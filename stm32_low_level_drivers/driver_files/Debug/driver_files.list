
driver_files.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005f8  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000784  0800078c  0000178c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000784  08000784  0000178c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000784  08000784  0000178c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000784  0800078c  0000178c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000784  08000784  00001784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000788  08000788  00001788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000178c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000178c  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009bc  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002d8  00000000  00000000  00002178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  00002450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000091  00000000  00000000  00002520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000013b0  00000000  00000000  000025b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000dca  00000000  00000000  00003961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000052f0  00000000  00000000  0000472b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00009a1b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000290  00000000  00000000  00009a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00009cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800076c 	.word	0x0800076c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	0800076c 	.word	0x0800076c

080001cc <delay_ms>:
// HC-SR04 pins
#define TRIG_PIN   9   // Example: PA9
#define ECHO_PIN   8   // Example: PA8

// Simple delay function
void delay_ms(uint32_t ms) {
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
    for(uint32_t i = 0; i < ms * 4000; i++) {
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
 80001d8:	e003      	b.n	80001e2 <delay_ms+0x16>
        __asm("NOP");
 80001da:	bf00      	nop
    for(uint32_t i = 0; i < ms * 4000; i++) {
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	3301      	adds	r3, #1
 80001e0:	60fb      	str	r3, [r7, #12]
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	68fa      	ldr	r2, [r7, #12]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d3f3      	bcc.n	80001da <delay_ms+0xe>
    }
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	3714      	adds	r7, #20
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <delay_us>:

void delay_us(uint32_t us) {
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
    for(uint32_t i = 0; i < us * 4; i++) {
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	e003      	b.n	8000216 <delay_us+0x16>
        __asm("NOP");
 800020e:	bf00      	nop
    for(uint32_t i = 0; i < us * 4; i++) {
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	3301      	adds	r3, #1
 8000214:	60fb      	str	r3, [r7, #12]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	009b      	lsls	r3, r3, #2
 800021a:	68fa      	ldr	r2, [r7, #12]
 800021c:	429a      	cmp	r2, r3
 800021e:	d3f6      	bcc.n	800020e <delay_us+0xe>
    }
}
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	3714      	adds	r7, #20
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr

0800022e <ultrasonic_init>:

void ultrasonic_init(void) {
 800022e:	b580      	push	{r7, lr}
 8000230:	b086      	sub	sp, #24
 8000232:	af00      	add	r7, sp, #0
    GPIO_Handle_t gpioTrig, gpioEcho;

    // Configure Trigger pin (output)
    gpioTrig.pGPIOx = GPIOA;
 8000234:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000238:	60fb      	str	r3, [r7, #12]
    gpioTrig.GPIO_PinConfig.GPIO_PinNumber = TRIG_PIN;
 800023a:	2309      	movs	r3, #9
 800023c:	743b      	strb	r3, [r7, #16]
    gpioTrig.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800023e:	2301      	movs	r3, #1
 8000240:	747b      	strb	r3, [r7, #17]
    gpioTrig.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 8000242:	2302      	movs	r3, #2
 8000244:	74bb      	strb	r3, [r7, #18]
    gpioTrig.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000246:	2300      	movs	r3, #0
 8000248:	74fb      	strb	r3, [r7, #19]
    gpioTrig.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800024a:	2300      	movs	r3, #0
 800024c:	753b      	strb	r3, [r7, #20]
    GPIO_PeriClockControl(GPIOA, ENABLE);
 800024e:	2101      	movs	r1, #1
 8000250:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000254:	f000 f892 	bl	800037c <GPIO_PeriClockControl>
    GPIO_Init(&gpioTrig);
 8000258:	f107 030c 	add.w	r3, r7, #12
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f95b 	bl	8000518 <GPIO_Init>

    // Configure Echo pin (input)
    gpioEcho.pGPIOx = GPIOA;
 8000262:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000266:	603b      	str	r3, [r7, #0]
    gpioEcho.GPIO_PinConfig.GPIO_PinNumber = ECHO_PIN;
 8000268:	2308      	movs	r3, #8
 800026a:	713b      	strb	r3, [r7, #4]
    gpioEcho.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800026c:	2300      	movs	r3, #0
 800026e:	717b      	strb	r3, [r7, #5]
    gpioEcho.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 8000270:	2302      	movs	r3, #2
 8000272:	71bb      	strb	r3, [r7, #6]
    gpioEcho.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000274:	2300      	movs	r3, #0
 8000276:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(&gpioEcho);
 8000278:	463b      	mov	r3, r7
 800027a:	4618      	mov	r0, r3
 800027c:	f000 f94c 	bl	8000518 <GPIO_Init>
}
 8000280:	bf00      	nop
 8000282:	3718      	adds	r7, #24
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <ultrasonic_get_distance>:

uint32_t ultrasonic_get_distance(void) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
    uint32_t timeCount = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	607b      	str	r3, [r7, #4]

    // Send 10Âµs pulse on TRIG
    GPIO_WriteToOutputPin(GPIOA, TRIG_PIN, 0);
 8000292:	2200      	movs	r2, #0
 8000294:	2109      	movs	r1, #9
 8000296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800029a:	f000 fa1f 	bl	80006dc <GPIO_WriteToOutputPin>
    delay_us(2);
 800029e:	2002      	movs	r0, #2
 80002a0:	f7ff ffae 	bl	8000200 <delay_us>
    GPIO_WriteToOutputPin(GPIOA, TRIG_PIN, 1);
 80002a4:	2201      	movs	r2, #1
 80002a6:	2109      	movs	r1, #9
 80002a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ac:	f000 fa16 	bl	80006dc <GPIO_WriteToOutputPin>
    delay_us(10);
 80002b0:	200a      	movs	r0, #10
 80002b2:	f7ff ffa5 	bl	8000200 <delay_us>
    GPIO_WriteToOutputPin(GPIOA, TRIG_PIN, 0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2109      	movs	r1, #9
 80002ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002be:	f000 fa0d 	bl	80006dc <GPIO_WriteToOutputPin>

    // Wait for ECHO to go HIGH
    while(!GPIO_ReadFromInputPin(GPIOA, ECHO_PIN));
 80002c2:	bf00      	nop
 80002c4:	2108      	movs	r1, #8
 80002c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ca:	f000 f9f1 	bl	80006b0 <GPIO_ReadFromInputPin>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0f7      	beq.n	80002c4 <ultrasonic_get_distance+0x3c>

    // Measure HIGH time of ECHO
    while(GPIO_ReadFromInputPin(GPIOA, ECHO_PIN)) {
 80002d4:	e005      	b.n	80002e2 <ultrasonic_get_distance+0x5a>
        timeCount++;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	3301      	adds	r3, #1
 80002da:	607b      	str	r3, [r7, #4]
        delay_us(1);
 80002dc:	2001      	movs	r0, #1
 80002de:	f7ff ff8f 	bl	8000200 <delay_us>
    while(GPIO_ReadFromInputPin(GPIOA, ECHO_PIN)) {
 80002e2:	2108      	movs	r1, #8
 80002e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002e8:	f000 f9e2 	bl	80006b0 <GPIO_ReadFromInputPin>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d1f1      	bne.n	80002d6 <ultrasonic_get_distance+0x4e>
    }

    // Distance calculation (time in Âµs / 58 = distance in cm)
    return (timeCount / 58);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a03      	ldr	r2, [pc, #12]	@ (8000304 <ultrasonic_get_distance+0x7c>)
 80002f6:	fba2 2303 	umull	r2, r3, r2, r3
 80002fa:	095b      	lsrs	r3, r3, #5
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	8d3dcb09 	.word	0x8d3dcb09

08000308 <main>:

int main(void) {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
    ultrasonic_init();
 800030c:	f7ff ff8f 	bl	800022e <ultrasonic_init>

    while(1) {
        distance = ultrasonic_get_distance();
 8000310:	f7ff ffba 	bl	8000288 <ultrasonic_get_distance>
 8000314:	4603      	mov	r3, r0
 8000316:	4a03      	ldr	r2, [pc, #12]	@ (8000324 <main+0x1c>)
 8000318:	6013      	str	r3, [r2, #0]
        // here you can debug using UART/LED
        delay_ms(50);
 800031a:	2032      	movs	r0, #50	@ 0x32
 800031c:	f7ff ff56 	bl	80001cc <delay_ms>
        distance = ultrasonic_get_distance();
 8000320:	bf00      	nop
 8000322:	e7f5      	b.n	8000310 <main+0x8>
 8000324:	2000001c 	.word	0x2000001c

08000328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000328:	480d      	ldr	r0, [pc, #52]	@ (8000360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800032c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000330:	480c      	ldr	r0, [pc, #48]	@ (8000364 <LoopForever+0x6>)
  ldr r1, =_edata
 8000332:	490d      	ldr	r1, [pc, #52]	@ (8000368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000334:	4a0d      	ldr	r2, [pc, #52]	@ (800036c <LoopForever+0xe>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000338:	e002      	b.n	8000340 <LoopCopyDataInit>

0800033a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800033c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033e:	3304      	adds	r3, #4

08000340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000344:	d3f9      	bcc.n	800033a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000346:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000348:	4c0a      	ldr	r4, [pc, #40]	@ (8000374 <LoopForever+0x16>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800034c:	e001      	b.n	8000352 <LoopFillZerobss>

0800034e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000350:	3204      	adds	r2, #4

08000352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000354:	d3fb      	bcc.n	800034e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000356:	f000 f9e5 	bl	8000724 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800035a:	f7ff ffd5 	bl	8000308 <main>

0800035e <LoopForever>:

LoopForever:
  b LoopForever
 800035e:	e7fe      	b.n	800035e <LoopForever>
  ldr   r0, =_estack
 8000360:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800036c:	0800078c 	.word	0x0800078c
  ldr r2, =_sbss
 8000370:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000374:	20000020 	.word	0x20000020

08000378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC1_2_IRQHandler>
	...

0800037c <GPIO_PeriClockControl>:
  * @param[in] pGPIOx  - Base address of GPIO peripheral (e.g., GPIOA, GPIOB, etc.)
  * @param[in] EnorDi  - Enable or disable macros: ENABLE = 1, DISABLE = 0
  * @return    - None
  * @note      - Must be called before accessing GPIO registers.
  */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000388:	78fb      	ldrb	r3, [r7, #3]
 800038a:	2b01      	cmp	r3, #1
 800038c:	d157      	bne.n	800043e <GPIO_PeriClockControl+0xc2>
		if(pGPIOx==GPIOA){
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000394:	d106      	bne.n	80003a4 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000396:	4b58      	ldr	r3, [pc, #352]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039a:	4a57      	ldr	r2, [pc, #348]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
				}
				else if(pGPIOx==GPIOH){
					GPIOH_PCLK_DI();
				}
	}
}
 80003a2:	e0a3      	b.n	80004ec <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB){
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a55      	ldr	r2, [pc, #340]	@ (80004fc <GPIO_PeriClockControl+0x180>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003ac:	4b52      	ldr	r3, [pc, #328]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 80003ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b0:	4a51      	ldr	r2, [pc, #324]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 80003b2:	f043 0302 	orr.w	r3, r3, #2
 80003b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003b8:	e098      	b.n	80004ec <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC){
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a50      	ldr	r2, [pc, #320]	@ (8000500 <GPIO_PeriClockControl+0x184>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003c2:	4b4d      	ldr	r3, [pc, #308]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003c6:	4a4c      	ldr	r2, [pc, #304]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 80003c8:	f043 0304 	orr.w	r3, r3, #4
 80003cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003ce:	e08d      	b.n	80004ec <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD){
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a4c      	ldr	r2, [pc, #304]	@ (8000504 <GPIO_PeriClockControl+0x188>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003d8:	4b47      	ldr	r3, [pc, #284]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 80003da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003dc:	4a46      	ldr	r2, [pc, #280]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 80003de:	f043 0308 	orr.w	r3, r3, #8
 80003e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003e4:	e082      	b.n	80004ec <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE){
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a47      	ldr	r2, [pc, #284]	@ (8000508 <GPIO_PeriClockControl+0x18c>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003ee:	4b42      	ldr	r3, [pc, #264]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f2:	4a41      	ldr	r2, [pc, #260]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 80003f4:	f043 0310 	orr.w	r3, r3, #16
 80003f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003fa:	e077      	b.n	80004ec <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF){
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a43      	ldr	r2, [pc, #268]	@ (800050c <GPIO_PeriClockControl+0x190>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000404:	4b3c      	ldr	r3, [pc, #240]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 8000406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000408:	4a3b      	ldr	r2, [pc, #236]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 800040a:	f043 0320 	orr.w	r3, r3, #32
 800040e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000410:	e06c      	b.n	80004ec <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG){
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a3e      	ldr	r2, [pc, #248]	@ (8000510 <GPIO_PeriClockControl+0x194>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800041a:	4b37      	ldr	r3, [pc, #220]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041e:	4a36      	ldr	r2, [pc, #216]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 8000420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000424:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000426:	e061      	b.n	80004ec <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH){
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a3a      	ldr	r2, [pc, #232]	@ (8000514 <GPIO_PeriClockControl+0x198>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d15d      	bne.n	80004ec <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000430:	4b31      	ldr	r3, [pc, #196]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 8000432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000434:	4a30      	ldr	r2, [pc, #192]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 8000436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800043a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800043c:	e056      	b.n	80004ec <GPIO_PeriClockControl+0x170>
				if(pGPIOx==GPIOA){
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 8000446:	4b2c      	ldr	r3, [pc, #176]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044a:	4a2b      	ldr	r2, [pc, #172]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 800044c:	f023 0301 	bic.w	r3, r3, #1
 8000450:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000452:	e04b      	b.n	80004ec <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOB){
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a29      	ldr	r2, [pc, #164]	@ (80004fc <GPIO_PeriClockControl+0x180>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 800045c:	4b26      	ldr	r3, [pc, #152]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 800045e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000460:	4a25      	ldr	r2, [pc, #148]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 8000462:	f023 0302 	bic.w	r3, r3, #2
 8000466:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000468:	e040      	b.n	80004ec <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOC){
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a24      	ldr	r2, [pc, #144]	@ (8000500 <GPIO_PeriClockControl+0x184>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 8000472:	4b21      	ldr	r3, [pc, #132]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000476:	4a20      	ldr	r2, [pc, #128]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 8000478:	f023 0304 	bic.w	r3, r3, #4
 800047c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800047e:	e035      	b.n	80004ec <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOD){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a20      	ldr	r2, [pc, #128]	@ (8000504 <GPIO_PeriClockControl+0x188>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 8000488:	4b1b      	ldr	r3, [pc, #108]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 800048a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048c:	4a1a      	ldr	r2, [pc, #104]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 800048e:	f023 0308 	bic.w	r3, r3, #8
 8000492:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000494:	e02a      	b.n	80004ec <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOE){
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a1b      	ldr	r2, [pc, #108]	@ (8000508 <GPIO_PeriClockControl+0x18c>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d106      	bne.n	80004ac <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 800049e:	4b16      	ldr	r3, [pc, #88]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a2:	4a15      	ldr	r2, [pc, #84]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 80004a4:	f023 0310 	bic.w	r3, r3, #16
 80004a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004aa:	e01f      	b.n	80004ec <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOF){
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a17      	ldr	r2, [pc, #92]	@ (800050c <GPIO_PeriClockControl+0x190>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d106      	bne.n	80004c2 <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 80004b4:	4b10      	ldr	r3, [pc, #64]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 80004b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b8:	4a0f      	ldr	r2, [pc, #60]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 80004ba:	f023 0320 	bic.w	r3, r3, #32
 80004be:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004c0:	e014      	b.n	80004ec <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOG){
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a12      	ldr	r2, [pc, #72]	@ (8000510 <GPIO_PeriClockControl+0x194>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d106      	bne.n	80004d8 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 80004ca:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ce:	4a0a      	ldr	r2, [pc, #40]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 80004d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004d6:	e009      	b.n	80004ec <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOH){
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a0e      	ldr	r2, [pc, #56]	@ (8000514 <GPIO_PeriClockControl+0x198>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d105      	bne.n	80004ec <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 80004e0:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 80004e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e4:	4a04      	ldr	r2, [pc, #16]	@ (80004f8 <GPIO_PeriClockControl+0x17c>)
 80004e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	40021000 	.word	0x40021000
 80004fc:	48000400 	.word	0x48000400
 8000500:	48000800 	.word	0x48000800
 8000504:	48000c00 	.word	0x48000c00
 8000508:	48001000 	.word	0x48001000
 800050c:	48001400 	.word	0x48001400
 8000510:	48001800 	.word	0x48001800
 8000514:	48001c00 	.word	0x48001c00

08000518 <GPIO_Init>:
  * @param[in] pGPIOHandle - Handle structure that contains GPIO configuration information.
  * @return    - None
  * @note      - Make sure peripheral clock for GPIO is enabled before calling this function.
  */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]

    // 1. Configure the mode of GPIO pin
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	795b      	ldrb	r3, [r3, #5]
 8000528:	2b03      	cmp	r3, #3
 800052a:	d821      	bhi.n	8000570 <GPIO_Init+0x58>
    {
        // non-interrupt mode
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	795b      	ldrb	r3, [r3, #5]
 8000530:	461a      	mov	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	791b      	ldrb	r3, [r3, #4]
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	791b      	ldrb	r3, [r3, #4]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	2103      	movs	r1, #3
 800054c:	fa01 f303 	lsl.w	r3, r1, r3
 8000550:	43db      	mvns	r3, r3
 8000552:	4619      	mov	r1, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	400a      	ands	r2, r1
 800055a:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	6819      	ldr	r1, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	430a      	orrs	r2, r1
 800056a:	601a      	str	r2, [r3, #0]
        temp = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
    {
        // interrupt mode (later)
    }

    // 2. Configure speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	799b      	ldrb	r3, [r3, #6]
 8000574:	461a      	mov	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	791b      	ldrb	r3, [r3, #4]
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	fa02 f303 	lsl.w	r3, r2, r3
 8000580:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	689a      	ldr	r2, [r3, #8]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2103      	movs	r1, #3
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	4619      	mov	r1, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	400a      	ands	r2, r1
 800059e:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	6899      	ldr	r1, [r3, #8]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	430a      	orrs	r2, r1
 80005ae:	609a      	str	r2, [r3, #8]
    temp = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]

    // 3. Configure pull-up/pull-down
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	79db      	ldrb	r3, [r3, #7]
 80005b8:	461a      	mov	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	68da      	ldr	r2, [r3, #12]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	2103      	movs	r1, #3
 80005d4:	fa01 f303 	lsl.w	r3, r1, r3
 80005d8:	43db      	mvns	r3, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	400a      	ands	r2, r1
 80005e2:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	68d9      	ldr	r1, [r3, #12]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	430a      	orrs	r2, r1
 80005f2:	60da      	str	r2, [r3, #12]
    temp = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]

    // 4. Configure output type
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	7a1b      	ldrb	r3, [r3, #8]
 80005fc:	461a      	mov	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	4619      	mov	r1, r3
 8000614:	2301      	movs	r3, #1
 8000616:	408b      	lsls	r3, r1
 8000618:	43db      	mvns	r3, r3
 800061a:	4619      	mov	r1, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	400a      	ands	r2, r1
 8000622:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6859      	ldr	r1, [r3, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	430a      	orrs	r2, r1
 8000632:	605a      	str	r2, [r3, #4]
    temp = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]

    // 5. Configure alternate function if needed
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	795b      	ldrb	r3, [r3, #5]
 800063c:	2b02      	cmp	r3, #2
 800063e:	d131      	bne.n	80006a4 <GPIO_Init+0x18c>
    {
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;  // AFR[0] or AFR[1]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	08db      	lsrs	r3, r3, #3
 8000646:	72fb      	strb	r3, [r7, #11]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;  // Position within register
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	f003 0307 	and.w	r3, r3, #7
 8000650:	72bb      	strb	r3, [r7, #10]

        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	7afa      	ldrb	r2, [r7, #11]
 8000658:	3208      	adds	r2, #8
 800065a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800065e:	7abb      	ldrb	r3, [r7, #10]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	220f      	movs	r2, #15
 8000664:	fa02 f303 	lsl.w	r3, r2, r3
 8000668:	43db      	mvns	r3, r3
 800066a:	4618      	mov	r0, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	7afa      	ldrb	r2, [r7, #11]
 8000672:	4001      	ands	r1, r0
 8000674:	3208      	adds	r2, #8
 8000676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	7afa      	ldrb	r2, [r7, #11]
 8000680:	3208      	adds	r2, #8
 8000682:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7a5b      	ldrb	r3, [r3, #9]
 800068a:	461a      	mov	r2, r3
 800068c:	7abb      	ldrb	r3, [r7, #10]
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	fa02 f303 	lsl.w	r3, r2, r3
 8000694:	4618      	mov	r0, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	7afa      	ldrb	r2, [r7, #11]
 800069c:	4301      	orrs	r1, r0
 800069e:	3208      	adds	r2, #8
 80006a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <GPIO_ReadFromInputPin>:
  * @param[in] pGPIOx       - Base address of GPIO port.
  * @param[in] GPIO_PinNumber - Pin number (0-15).
  * @return    - uint8_t: 0 (LOW) or 1 (HIGH).
  * @note      - None
  */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t GPIO_PinNumber){
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> GPIO_PinNumber) & 1);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	691a      	ldr	r2, [r3, #16]
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	fa22 f303 	lsr.w	r3, r2, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	73fb      	strb	r3, [r7, #15]
	return value;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <GPIO_WriteToOutputPin>:
  * @param[in] GPIO_PinNumber - Pin number (0-15).
  * @param[in] value        - 0 = RESET (LOW), 1 = SET (HIGH).
  * @return    - None
  * @note      - None
  */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t GPIO_PinNumber, uint32_t value){
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	460b      	mov	r3, r1
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	72fb      	strb	r3, [r7, #11]
	if( value == GPIO_PIN_SET){
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d109      	bne.n	8000704 <GPIO_WriteToOutputPin+0x28>
		pGPIOx->ODR |= (1<<GPIO_PinNumber);
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	7afa      	ldrb	r2, [r7, #11]
 80006f6:	2101      	movs	r1, #1
 80006f8:	fa01 f202 	lsl.w	r2, r1, r2
 80006fc:	431a      	orrs	r2, r3
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	615a      	str	r2, [r3, #20]
	}
	else{
		pGPIOx->ODR &= ~(1<<GPIO_PinNumber);
	}
}
 8000702:	e009      	b.n	8000718 <GPIO_WriteToOutputPin+0x3c>
		pGPIOx->ODR &= ~(1<<GPIO_PinNumber);
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	7afa      	ldrb	r2, [r7, #11]
 800070a:	2101      	movs	r1, #1
 800070c:	fa01 f202 	lsl.w	r2, r1, r2
 8000710:	43d2      	mvns	r2, r2
 8000712:	401a      	ands	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	615a      	str	r2, [r3, #20]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <__libc_init_array>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	4d0d      	ldr	r5, [pc, #52]	@ (800075c <__libc_init_array+0x38>)
 8000728:	4c0d      	ldr	r4, [pc, #52]	@ (8000760 <__libc_init_array+0x3c>)
 800072a:	1b64      	subs	r4, r4, r5
 800072c:	10a4      	asrs	r4, r4, #2
 800072e:	2600      	movs	r6, #0
 8000730:	42a6      	cmp	r6, r4
 8000732:	d109      	bne.n	8000748 <__libc_init_array+0x24>
 8000734:	4d0b      	ldr	r5, [pc, #44]	@ (8000764 <__libc_init_array+0x40>)
 8000736:	4c0c      	ldr	r4, [pc, #48]	@ (8000768 <__libc_init_array+0x44>)
 8000738:	f000 f818 	bl	800076c <_init>
 800073c:	1b64      	subs	r4, r4, r5
 800073e:	10a4      	asrs	r4, r4, #2
 8000740:	2600      	movs	r6, #0
 8000742:	42a6      	cmp	r6, r4
 8000744:	d105      	bne.n	8000752 <__libc_init_array+0x2e>
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f855 3b04 	ldr.w	r3, [r5], #4
 800074c:	4798      	blx	r3
 800074e:	3601      	adds	r6, #1
 8000750:	e7ee      	b.n	8000730 <__libc_init_array+0xc>
 8000752:	f855 3b04 	ldr.w	r3, [r5], #4
 8000756:	4798      	blx	r3
 8000758:	3601      	adds	r6, #1
 800075a:	e7f2      	b.n	8000742 <__libc_init_array+0x1e>
 800075c:	08000784 	.word	0x08000784
 8000760:	08000784 	.word	0x08000784
 8000764:	08000784 	.word	0x08000784
 8000768:	08000788 	.word	0x08000788

0800076c <_init>:
 800076c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800076e:	bf00      	nop
 8000770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000772:	bc08      	pop	{r3}
 8000774:	469e      	mov	lr, r3
 8000776:	4770      	bx	lr

08000778 <_fini>:
 8000778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800077a:	bf00      	nop
 800077c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800077e:	bc08      	pop	{r3}
 8000780:	469e      	mov	lr, r3
 8000782:	4770      	bx	lr
