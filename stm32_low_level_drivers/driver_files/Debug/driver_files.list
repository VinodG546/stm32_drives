
driver_files.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009bc  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b48  08000b48  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b48  08000b48  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000b48  08000b48  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000b48  08000b48  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b48  08000b48  00001b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b4c  08000b4c  00001b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000b50  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000200c  2**0
                  CONTENTS
 10 .bss          00000028  2000000c  2000000c  0000200c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000034  20000034  0000200c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000141f  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000410  00000000  00000000  0000345b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  00003870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f0  00000000  00000000  000039c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000235b  00000000  00000000  00003ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000018b4  00000000  00000000  00005e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000098aa  00000000  00000000  000076bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010f69  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000494  00000000  00000000  00010fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00011440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000b30 	.word	0x08000b30

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08000b30 	.word	0x08000b30

080001cc <delay>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void delay(uint32_t n)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b085      	sub	sp, #20
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0; i<n;i++)
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
 80001d8:	e00c      	b.n	80001f4 <delay+0x28>
		for(j=0;j<1000;j++);
 80001da:	2300      	movs	r3, #0
 80001dc:	60bb      	str	r3, [r7, #8]
 80001de:	e002      	b.n	80001e6 <delay+0x1a>
 80001e0:	68bb      	ldr	r3, [r7, #8]
 80001e2:	3301      	adds	r3, #1
 80001e4:	60bb      	str	r3, [r7, #8]
 80001e6:	68bb      	ldr	r3, [r7, #8]
 80001e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80001ec:	d3f8      	bcc.n	80001e0 <delay+0x14>
	for(i=0; i<n;i++)
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	3301      	adds	r3, #1
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	68fa      	ldr	r2, [r7, #12]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d3ee      	bcc.n	80001da <delay+0xe>
}
 80001fc:	bf00      	nop
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
	...

0800020c <SPI2_GPIOInits>:

void SPI2_GPIOInits(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0

	GPIO_PeriClockControl(GPIOB, ENABLE);
 8000212:	2101      	movs	r1, #1
 8000214:	4812      	ldr	r0, [pc, #72]	@ (8000260 <SPI2_GPIOInits+0x54>)
 8000216:	f000 f8bf 	bl	8000398 <GPIO_PeriClockControl>

	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800021a:	4b11      	ldr	r3, [pc, #68]	@ (8000260 <SPI2_GPIOInits+0x54>)
 800021c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800021e:	2302      	movs	r3, #2
 8000220:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000222:	2305      	movs	r3, #5
 8000224:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000226:	2300      	movs	r3, #0
 8000228:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800022a:	2300      	movs	r3, #0
 800022c:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 800022e:	2302      	movs	r3, #2
 8000230:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000232:	230d      	movs	r3, #13
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f97b 	bl	8000534 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800023e:	230f      	movs	r3, #15
 8000240:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f975 	bl	8000534 <GPIO_Init>
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPIPins);


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800024a:	230c      	movs	r3, #12
 800024c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f96f 	bl	8000534 <GPIO_Init>


}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	48000400 	.word	0x48000400

08000264 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800026a:	4b0b      	ldr	r3, [pc, #44]	@ (8000298 <SPI2_Inits+0x34>)
 800026c:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800026e:	2301      	movs	r3, #1
 8000270:	727b      	strb	r3, [r7, #9]
	//SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV256;
 8000272:	2307      	movs	r3, #7
 8000274:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000276:	2300      	movs	r3, #0
 8000278:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800027a:	2300      	movs	r3, #0
 800027c:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI;
 800027e:	2300      	movs	r3, #0
 8000280:	73bb      	strb	r3, [r7, #14]
	SPI2handle.SPIConfig.SPI_DataSize = SPI_DATASIZE_8BIT;
 8000282:	2307      	movs	r3, #7
 8000284:	72fb      	strb	r3, [r7, #11]
	SPI_Init(&SPI2handle);
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fb3f 	bl	800090c <SPI_Init>
}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40003800 	.word	0x40003800

0800029c <btn_init>:

void btn_init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
	GPIO_Handle_t pGPIOBtn;

	GPIO_PeriClockControl(GPIOC, ENABLE);
 80002a2:	2101      	movs	r1, #1
 80002a4:	480a      	ldr	r0, [pc, #40]	@ (80002d0 <btn_init+0x34>)
 80002a6:	f000 f877 	bl	8000398 <GPIO_PeriClockControl>


	pGPIOBtn.pGPIOx = GPIOC;
 80002aa:	4b09      	ldr	r3, [pc, #36]	@ (80002d0 <btn_init+0x34>)
 80002ac:	607b      	str	r3, [r7, #4]
	pGPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ae:	230d      	movs	r3, #13
 80002b0:	723b      	strb	r3, [r7, #8]
	pGPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002b2:	2300      	movs	r3, #0
 80002b4:	727b      	strb	r3, [r7, #9]
	pGPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 80002b6:	2302      	movs	r3, #2
 80002b8:	72bb      	strb	r3, [r7, #10]
	pGPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002ba:	2300      	movs	r3, #0
 80002bc:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&pGPIOBtn);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 f937 	bl	8000534 <GPIO_Init>
}
 80002c6:	bf00      	nop
 80002c8:	3710      	adds	r7, #16
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	48000800 	.word	0x48000800

080002d4 <main>:
uint8_t tx_data[] = {10,20,30,40,50,60,70,80,90,100};
uint8_t rx_data[10];

char data[] = "Hello all";
int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0

    SPI2_GPIOInits();
 80002d8:	f7ff ff98 	bl	800020c <SPI2_GPIOInits>
    btn_init();
 80002dc:	f7ff ffde 	bl	800029c <btn_init>
    SPI2_Inits();
 80002e0:	f7ff ffc0 	bl	8000264 <SPI2_Inits>
     * Making SSOE 1 does NSS output enable
     * The NSS pin is automatically managed by the hardware
     * i.e When SPE = 1, NSS will be pulled to low
     * and if SPE = 0, the NSS will be pulled high automatically
     */
    SPI_SSOEConfig(SPI2, ENABLE);
 80002e4:	2101      	movs	r1, #1
 80002e6:	4813      	ldr	r0, [pc, #76]	@ (8000334 <main+0x60>)
 80002e8:	f000 fbe2 	bl	8000ab0 <SPI_SSOEConfig>

    while(1)
    {
    	//Waits until button is pressed
    	while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == SET);
 80002ec:	bf00      	nop
 80002ee:	210d      	movs	r1, #13
 80002f0:	4811      	ldr	r0, [pc, #68]	@ (8000338 <main+0x64>)
 80002f2:	f000 fabd 	bl	8000870 <GPIO_ReadFromInputPin>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d0f8      	beq.n	80002ee <main+0x1a>

    	delay(500);
 80002fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000300:	f7ff ff64 	bl	80001cc <delay>
    	//Enable SPI2 Peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 8000304:	2101      	movs	r1, #1
 8000306:	480b      	ldr	r0, [pc, #44]	@ (8000334 <main+0x60>)
 8000308:	f000 fbb6 	bl	8000a78 <SPI_PeripheralControl>

		//delay(200);
		//Transmit data
		//SPI_SendData(SPI2, (uint8_t *)data, data_len);
		//SPI_SendData(SPI2, tx_data, 10);
		SPI_TransmitReceive(SPI2, tx_data, rx_data, 10);
 800030c:	230a      	movs	r3, #10
 800030e:	4a0b      	ldr	r2, [pc, #44]	@ (800033c <main+0x68>)
 8000310:	490b      	ldr	r1, [pc, #44]	@ (8000340 <main+0x6c>)
 8000312:	4808      	ldr	r0, [pc, #32]	@ (8000334 <main+0x60>)
 8000314:	f000 fb70 	bl	80009f8 <SPI_TransmitReceive>


		//Confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG) );
 8000318:	bf00      	nop
 800031a:	2180      	movs	r1, #128	@ 0x80
 800031c:	4805      	ldr	r0, [pc, #20]	@ (8000334 <main+0x60>)
 800031e:	f000 fb57 	bl	80009d0 <SPI_GetFlagStatus>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d1f8      	bne.n	800031a <main+0x46>

		SPI_PeripheralControl(SPI2, DISABLE);
 8000328:	2100      	movs	r1, #0
 800032a:	4802      	ldr	r0, [pc, #8]	@ (8000334 <main+0x60>)
 800032c:	f000 fba4 	bl	8000a78 <SPI_PeripheralControl>
    	while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == SET);
 8000330:	e7dc      	b.n	80002ec <main+0x18>
 8000332:	bf00      	nop
 8000334:	40003800 	.word	0x40003800
 8000338:	48000800 	.word	0x48000800
 800033c:	20000028 	.word	0x20000028
 8000340:	20000000 	.word	0x20000000

08000344 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000344:	480d      	ldr	r0, [pc, #52]	@ (800037c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000346:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000348:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800034c:	480c      	ldr	r0, [pc, #48]	@ (8000380 <LoopForever+0x6>)
  ldr r1, =_edata
 800034e:	490d      	ldr	r1, [pc, #52]	@ (8000384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000350:	4a0d      	ldr	r2, [pc, #52]	@ (8000388 <LoopForever+0xe>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0a      	ldr	r2, [pc, #40]	@ (800038c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000364:	4c0a      	ldr	r4, [pc, #40]	@ (8000390 <LoopForever+0x16>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000372:	f000 fbb9 	bl	8000ae8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000376:	f7ff ffad 	bl	80002d4 <main>

0800037a <LoopForever>:

LoopForever:
  b LoopForever
 800037a:	e7fe      	b.n	800037a <LoopForever>
  ldr   r0, =_estack
 800037c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000384:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000388:	08000b50 	.word	0x08000b50
  ldr r2, =_sbss
 800038c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000390:	20000034 	.word	0x20000034

08000394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000394:	e7fe      	b.n	8000394 <ADC1_2_IRQHandler>
	...

08000398 <GPIO_PeriClockControl>:
  * @param[in] pGPIOx  - Base address of GPIO peripheral (e.g., GPIOA, GPIOB, etc.)
  * @param[in] EnorDi  - Enable or disable macros: ENABLE = 1, DISABLE = 0
  * @return    - None
  * @note      - Must be called before accessing GPIO registers.
  */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	460b      	mov	r3, r1
 80003a2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80003a4:	78fb      	ldrb	r3, [r7, #3]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d157      	bne.n	800045a <GPIO_PeriClockControl+0xc2>
		if(pGPIOx==GPIOA){
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80003b0:	d106      	bne.n	80003c0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003b2:	4b58      	ldr	r3, [pc, #352]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b6:	4a57      	ldr	r2, [pc, #348]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
		}
		else if(pGPIOx==GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 80003be:	e0a3      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB){
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a55      	ldr	r2, [pc, #340]	@ (8000518 <GPIO_PeriClockControl+0x180>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003c8:	4b52      	ldr	r3, [pc, #328]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80003ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003cc:	4a51      	ldr	r2, [pc, #324]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80003ce:	f043 0302 	orr.w	r3, r3, #2
 80003d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003d4:	e098      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC){
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a50      	ldr	r2, [pc, #320]	@ (800051c <GPIO_PeriClockControl+0x184>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003de:	4b4d      	ldr	r3, [pc, #308]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e2:	4a4c      	ldr	r2, [pc, #304]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80003e4:	f043 0304 	orr.w	r3, r3, #4
 80003e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003ea:	e08d      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a4c      	ldr	r2, [pc, #304]	@ (8000520 <GPIO_PeriClockControl+0x188>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003f4:	4b47      	ldr	r3, [pc, #284]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80003f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f8:	4a46      	ldr	r2, [pc, #280]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80003fa:	f043 0308 	orr.w	r3, r3, #8
 80003fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000400:	e082      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a47      	ldr	r2, [pc, #284]	@ (8000524 <GPIO_PeriClockControl+0x18c>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800040a:	4b42      	ldr	r3, [pc, #264]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800040e:	4a41      	ldr	r2, [pc, #260]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 8000410:	f043 0310 	orr.w	r3, r3, #16
 8000414:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000416:	e077      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a43      	ldr	r2, [pc, #268]	@ (8000528 <GPIO_PeriClockControl+0x190>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000420:	4b3c      	ldr	r3, [pc, #240]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 8000422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000424:	4a3b      	ldr	r2, [pc, #236]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 8000426:	f043 0320 	orr.w	r3, r3, #32
 800042a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800042c:	e06c      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG){
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a3e      	ldr	r2, [pc, #248]	@ (800052c <GPIO_PeriClockControl+0x194>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d106      	bne.n	8000444 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000436:	4b37      	ldr	r3, [pc, #220]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043a:	4a36      	ldr	r2, [pc, #216]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 800043c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000440:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000442:	e061      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a3a      	ldr	r2, [pc, #232]	@ (8000530 <GPIO_PeriClockControl+0x198>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d15d      	bne.n	8000508 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 800044c:	4b31      	ldr	r3, [pc, #196]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 800044e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000450:	4a30      	ldr	r2, [pc, #192]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 8000452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000456:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000458:	e056      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		if(pGPIOx==GPIOA){
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000460:	d106      	bne.n	8000470 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000462:	4b2c      	ldr	r3, [pc, #176]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 8000464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000466:	4a2b      	ldr	r2, [pc, #172]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 8000468:	f023 0301 	bic.w	r3, r3, #1
 800046c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800046e:	e04b      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a29      	ldr	r2, [pc, #164]	@ (8000518 <GPIO_PeriClockControl+0x180>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d106      	bne.n	8000486 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000478:	4b26      	ldr	r3, [pc, #152]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 800047a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047c:	4a25      	ldr	r2, [pc, #148]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 800047e:	f023 0302 	bic.w	r3, r3, #2
 8000482:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000484:	e040      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC){
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a24      	ldr	r2, [pc, #144]	@ (800051c <GPIO_PeriClockControl+0x184>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d106      	bne.n	800049c <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 800048e:	4b21      	ldr	r3, [pc, #132]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000492:	4a20      	ldr	r2, [pc, #128]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 8000494:	f023 0304 	bic.w	r3, r3, #4
 8000498:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800049a:	e035      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD){
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a20      	ldr	r2, [pc, #128]	@ (8000520 <GPIO_PeriClockControl+0x188>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d106      	bne.n	80004b2 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80004a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80004a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80004aa:	f023 0308 	bic.w	r3, r3, #8
 80004ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004b0:	e02a      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE){
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000524 <GPIO_PeriClockControl+0x18c>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d106      	bne.n	80004c8 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80004ba:	4b16      	ldr	r3, [pc, #88]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004be:	4a15      	ldr	r2, [pc, #84]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80004c0:	f023 0310 	bic.w	r3, r3, #16
 80004c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004c6:	e01f      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a17      	ldr	r2, [pc, #92]	@ (8000528 <GPIO_PeriClockControl+0x190>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d106      	bne.n	80004de <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80004d0:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80004d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80004d6:	f023 0320 	bic.w	r3, r3, #32
 80004da:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004dc:	e014      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG){
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4a12      	ldr	r2, [pc, #72]	@ (800052c <GPIO_PeriClockControl+0x194>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d106      	bne.n	80004f4 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 80004e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80004ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004f2:	e009      	b.n	8000508 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH){
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000530 <GPIO_PeriClockControl+0x198>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d105      	bne.n	8000508 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 80004fc:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 80004fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000500:	4a04      	ldr	r2, [pc, #16]	@ (8000514 <GPIO_PeriClockControl+0x17c>)
 8000502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000506:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000
 8000518:	48000400 	.word	0x48000400
 800051c:	48000800 	.word	0x48000800
 8000520:	48000c00 	.word	0x48000c00
 8000524:	48001000 	.word	0x48001000
 8000528:	48001400 	.word	0x48001400
 800052c:	48001800 	.word	0x48001800
 8000530:	48001c00 	.word	0x48001c00

08000534 <GPIO_Init>:
  * @param[in] pGPIOHandle - Handle structure that contains GPIO configuration information.
  * @return    - None
  * @note      - Make sure peripheral clock for GPIO is enabled before calling this function.
  */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000534:	b480      	push	{r7}
 8000536:	b087      	sub	sp, #28
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]

    // 1. Configure the mode of GPIO pin
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	795b      	ldrb	r3, [r3, #5]
 8000544:	2b03      	cmp	r3, #3
 8000546:	d822      	bhi.n	800058e <GPIO_Init+0x5a>
    {
        // non-interrupt mode
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	795b      	ldrb	r3, [r3, #5]
 800054c:	461a      	mov	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	791b      	ldrb	r3, [r3, #4]
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	fa02 f303 	lsl.w	r3, r2, r3
 8000558:	617b      	str	r3, [r7, #20]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	2103      	movs	r1, #3
 8000568:	fa01 f303 	lsl.w	r3, r1, r3
 800056c:	43db      	mvns	r3, r3
 800056e:	4619      	mov	r1, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	400a      	ands	r2, r1
 8000576:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	6819      	ldr	r1, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	697a      	ldr	r2, [r7, #20]
 8000584:	430a      	orrs	r2, r1
 8000586:	601a      	str	r2, [r3, #0]
        temp = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	e0cb      	b.n	8000726 <GPIO_Init+0x1f2>
    }
    else
    {
        // interrupt mode
        if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	795b      	ldrb	r3, [r3, #5]
 8000592:	2b04      	cmp	r3, #4
 8000594:	d117      	bne.n	80005c6 <GPIO_Init+0x92>
        {
        	EXTI->FTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000596:	4b47      	ldr	r3, [pc, #284]	@ (80006b4 <GPIO_Init+0x180>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	7912      	ldrb	r2, [r2, #4]
 800059e:	4611      	mov	r1, r2
 80005a0:	2201      	movs	r2, #1
 80005a2:	408a      	lsls	r2, r1
 80005a4:	4611      	mov	r1, r2
 80005a6:	4a43      	ldr	r2, [pc, #268]	@ (80006b4 <GPIO_Init+0x180>)
 80005a8:	430b      	orrs	r3, r1
 80005aa:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR1 &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ac:	4b41      	ldr	r3, [pc, #260]	@ (80006b4 <GPIO_Init+0x180>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	7912      	ldrb	r2, [r2, #4]
 80005b4:	4611      	mov	r1, r2
 80005b6:	2201      	movs	r2, #1
 80005b8:	408a      	lsls	r2, r1
 80005ba:	43d2      	mvns	r2, r2
 80005bc:	4611      	mov	r1, r2
 80005be:	4a3d      	ldr	r2, [pc, #244]	@ (80006b4 <GPIO_Init+0x180>)
 80005c0:	400b      	ands	r3, r1
 80005c2:	6093      	str	r3, [r2, #8]
 80005c4:	e035      	b.n	8000632 <GPIO_Init+0xfe>

        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	795b      	ldrb	r3, [r3, #5]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d117      	bne.n	80005fe <GPIO_Init+0xca>
        {
        	EXTI->RTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ce:	4b39      	ldr	r3, [pc, #228]	@ (80006b4 <GPIO_Init+0x180>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	7912      	ldrb	r2, [r2, #4]
 80005d6:	4611      	mov	r1, r2
 80005d8:	2201      	movs	r2, #1
 80005da:	408a      	lsls	r2, r1
 80005dc:	4611      	mov	r1, r2
 80005de:	4a35      	ldr	r2, [pc, #212]	@ (80006b4 <GPIO_Init+0x180>)
 80005e0:	430b      	orrs	r3, r1
 80005e2:	6093      	str	r3, [r2, #8]
        	EXTI->FTSR1 &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e4:	4b33      	ldr	r3, [pc, #204]	@ (80006b4 <GPIO_Init+0x180>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	7912      	ldrb	r2, [r2, #4]
 80005ec:	4611      	mov	r1, r2
 80005ee:	2201      	movs	r2, #1
 80005f0:	408a      	lsls	r2, r1
 80005f2:	43d2      	mvns	r2, r2
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a2f      	ldr	r2, [pc, #188]	@ (80006b4 <GPIO_Init+0x180>)
 80005f8:	400b      	ands	r3, r1
 80005fa:	60d3      	str	r3, [r2, #12]
 80005fc:	e019      	b.n	8000632 <GPIO_Init+0xfe>
        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	795b      	ldrb	r3, [r3, #5]
 8000602:	2b06      	cmp	r3, #6
 8000604:	d115      	bne.n	8000632 <GPIO_Init+0xfe>
        {
        	EXTI->FTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000606:	4b2b      	ldr	r3, [pc, #172]	@ (80006b4 <GPIO_Init+0x180>)
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	7912      	ldrb	r2, [r2, #4]
 800060e:	4611      	mov	r1, r2
 8000610:	2201      	movs	r2, #1
 8000612:	408a      	lsls	r2, r1
 8000614:	4611      	mov	r1, r2
 8000616:	4a27      	ldr	r2, [pc, #156]	@ (80006b4 <GPIO_Init+0x180>)
 8000618:	430b      	orrs	r3, r1
 800061a:	60d3      	str	r3, [r2, #12]
        	EXTI->RTSR1 |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061c:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <GPIO_Init+0x180>)
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	7912      	ldrb	r2, [r2, #4]
 8000624:	4611      	mov	r1, r2
 8000626:	2201      	movs	r2, #1
 8000628:	408a      	lsls	r2, r1
 800062a:	4611      	mov	r1, r2
 800062c:	4a21      	ldr	r2, [pc, #132]	@ (80006b4 <GPIO_Init+0x180>)
 800062e:	430b      	orrs	r3, r1
 8000630:	6093      	str	r3, [r2, #8]
        }
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	791b      	ldrb	r3, [r3, #4]
 8000636:	089b      	lsrs	r3, r3, #2
 8000638:	74fb      	strb	r3, [r7, #19]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	f003 0303 	and.w	r3, r3, #3
 8000642:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800064c:	d042      	beq.n	80006d4 <GPIO_Init+0x1a0>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a19      	ldr	r2, [pc, #100]	@ (80006b8 <GPIO_Init+0x184>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d02b      	beq.n	80006b0 <GPIO_Init+0x17c>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a17      	ldr	r2, [pc, #92]	@ (80006bc <GPIO_Init+0x188>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d024      	beq.n	80006ac <GPIO_Init+0x178>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a16      	ldr	r2, [pc, #88]	@ (80006c0 <GPIO_Init+0x18c>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d01d      	beq.n	80006a8 <GPIO_Init+0x174>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a14      	ldr	r2, [pc, #80]	@ (80006c4 <GPIO_Init+0x190>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d016      	beq.n	80006a4 <GPIO_Init+0x170>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a13      	ldr	r2, [pc, #76]	@ (80006c8 <GPIO_Init+0x194>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d00f      	beq.n	80006a0 <GPIO_Init+0x16c>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <GPIO_Init+0x198>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d008      	beq.n	800069c <GPIO_Init+0x168>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a10      	ldr	r2, [pc, #64]	@ (80006d0 <GPIO_Init+0x19c>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d101      	bne.n	8000698 <GPIO_Init+0x164>
 8000694:	2307      	movs	r3, #7
 8000696:	e01e      	b.n	80006d6 <GPIO_Init+0x1a2>
 8000698:	2300      	movs	r3, #0
 800069a:	e01c      	b.n	80006d6 <GPIO_Init+0x1a2>
 800069c:	2306      	movs	r3, #6
 800069e:	e01a      	b.n	80006d6 <GPIO_Init+0x1a2>
 80006a0:	2305      	movs	r3, #5
 80006a2:	e018      	b.n	80006d6 <GPIO_Init+0x1a2>
 80006a4:	2304      	movs	r3, #4
 80006a6:	e016      	b.n	80006d6 <GPIO_Init+0x1a2>
 80006a8:	2303      	movs	r3, #3
 80006aa:	e014      	b.n	80006d6 <GPIO_Init+0x1a2>
 80006ac:	2302      	movs	r3, #2
 80006ae:	e012      	b.n	80006d6 <GPIO_Init+0x1a2>
 80006b0:	2301      	movs	r3, #1
 80006b2:	e010      	b.n	80006d6 <GPIO_Init+0x1a2>
 80006b4:	40010400 	.word	0x40010400
 80006b8:	48000400 	.word	0x48000400
 80006bc:	48000800 	.word	0x48000800
 80006c0:	48000c00 	.word	0x48000c00
 80006c4:	48001000 	.word	0x48001000
 80006c8:	48001400 	.word	0x48001400
 80006cc:	48001800 	.word	0x48001800
 80006d0:	48001c00 	.word	0x48001c00
 80006d4:	2300      	movs	r3, #0
 80006d6:	747b      	strb	r3, [r7, #17]
        SYSCFG->EXTICR[temp1] &= ~(0xF << (temp2 * 4));
 80006d8:	4a63      	ldr	r2, [pc, #396]	@ (8000868 <GPIO_Init+0x334>)
 80006da:	7cfb      	ldrb	r3, [r7, #19]
 80006dc:	3302      	adds	r3, #2
 80006de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006e2:	7cbb      	ldrb	r3, [r7, #18]
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	210f      	movs	r1, #15
 80006e8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ec:	43db      	mvns	r3, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	495d      	ldr	r1, [pc, #372]	@ (8000868 <GPIO_Init+0x334>)
 80006f2:	7cfb      	ldrb	r3, [r7, #19]
 80006f4:	4002      	ands	r2, r0
 80006f6:	3302      	adds	r3, #2
 80006f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG -> EXTICR[temp1] = portcode << (temp2 * 4);
 80006fc:	7c7a      	ldrb	r2, [r7, #17]
 80006fe:	7cbb      	ldrb	r3, [r7, #18]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	fa02 f103 	lsl.w	r1, r2, r3
 8000706:	4a58      	ldr	r2, [pc, #352]	@ (8000868 <GPIO_Init+0x334>)
 8000708:	7cfb      	ldrb	r3, [r7, #19]
 800070a:	3302      	adds	r3, #2
 800070c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        EXTI -> IMR1 |= 1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000710:	4b56      	ldr	r3, [pc, #344]	@ (800086c <GPIO_Init+0x338>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	7912      	ldrb	r2, [r2, #4]
 8000718:	4611      	mov	r1, r2
 800071a:	2201      	movs	r2, #1
 800071c:	408a      	lsls	r2, r1
 800071e:	4611      	mov	r1, r2
 8000720:	4a52      	ldr	r2, [pc, #328]	@ (800086c <GPIO_Init+0x338>)
 8000722:	430b      	orrs	r3, r1
 8000724:	6013      	str	r3, [r2, #0]
    }

    // 2. Configure speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	799b      	ldrb	r3, [r3, #6]
 800072a:	461a      	mov	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	689a      	ldr	r2, [r3, #8]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	2103      	movs	r1, #3
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43db      	mvns	r3, r3
 800074c:	4619      	mov	r1, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	400a      	ands	r2, r1
 8000754:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	6899      	ldr	r1, [r3, #8]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	430a      	orrs	r2, r1
 8000764:	609a      	str	r2, [r3, #8]
    temp = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]

    // 3. Configure pull-up/pull-down
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	79db      	ldrb	r3, [r3, #7]
 800076e:	461a      	mov	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	68da      	ldr	r2, [r3, #12]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	2103      	movs	r1, #3
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43db      	mvns	r3, r3
 8000790:	4619      	mov	r1, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	400a      	ands	r2, r1
 8000798:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	68d9      	ldr	r1, [r3, #12]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	430a      	orrs	r2, r1
 80007a8:	60da      	str	r2, [r3, #12]
    temp = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]

    // 4. Configure output type
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7a1b      	ldrb	r3, [r3, #8]
 80007b2:	461a      	mov	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	fa02 f303 	lsl.w	r3, r2, r3
 80007bc:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	791b      	ldrb	r3, [r3, #4]
 80007c8:	4619      	mov	r1, r3
 80007ca:	2301      	movs	r3, #1
 80007cc:	408b      	lsls	r3, r1
 80007ce:	43db      	mvns	r3, r3
 80007d0:	4619      	mov	r1, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	400a      	ands	r2, r1
 80007d8:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	6859      	ldr	r1, [r3, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	430a      	orrs	r2, r1
 80007e8:	605a      	str	r2, [r3, #4]
    temp = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]

    // 5. Configure alternate function if needed
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	795b      	ldrb	r3, [r3, #5]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d131      	bne.n	800085a <GPIO_Init+0x326>
    {
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;  // AFR[0] or AFR[1]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	791b      	ldrb	r3, [r3, #4]
 80007fa:	08db      	lsrs	r3, r3, #3
 80007fc:	743b      	strb	r3, [r7, #16]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;  // Position within register
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	791b      	ldrb	r3, [r3, #4]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	73fb      	strb	r3, [r7, #15]

        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	7c3a      	ldrb	r2, [r7, #16]
 800080e:	3208      	adds	r2, #8
 8000810:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	220f      	movs	r2, #15
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	43db      	mvns	r3, r3
 8000820:	4618      	mov	r0, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	7c3a      	ldrb	r2, [r7, #16]
 8000828:	4001      	ands	r1, r0
 800082a:	3208      	adds	r2, #8
 800082c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	7c3a      	ldrb	r2, [r7, #16]
 8000836:	3208      	adds	r2, #8
 8000838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7a5b      	ldrb	r3, [r3, #9]
 8000840:	461a      	mov	r2, r3
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	7c3a      	ldrb	r2, [r7, #16]
 8000852:	4301      	orrs	r1, r0
 8000854:	3208      	adds	r2, #8
 8000856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 800085a:	bf00      	nop
 800085c:	371c      	adds	r7, #28
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40010000 	.word	0x40010000
 800086c:	40010400 	.word	0x40010400

08000870 <GPIO_ReadFromInputPin>:
  * @param[in] pGPIOx       - Base address of GPIO port.
  * @param[in] GPIO_PinNumber - Pin number (0-15).
  * @return    - uint8_t: 0 (LOW) or 1 (HIGH).
  * @note      - None
  */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t GPIO_PinNumber){
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> GPIO_PinNumber) & 1);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	691a      	ldr	r2, [r3, #16]
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	fa22 f303 	lsr.w	r3, r2, r3
 8000886:	b2db      	uxtb	r3, r3
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	73fb      	strb	r3, [r7, #15]
	return value;
 800088e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <SPI_PeriClockControl>:
 */
#include "stm32l4xx_spi_driver.h"

// Peripheral clock setup
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE) {
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d11f      	bne.n	80008ee <SPI_PeriClockControl+0x52>
        if (pSPIx == SPI1) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <SPI_PeriClockControl+0x60>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d106      	bne.n	80008c4 <SPI_PeriClockControl+0x28>
            SPI1_PCLK_EN();
 80008b6:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <SPI_PeriClockControl+0x64>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ba:	4a11      	ldr	r2, [pc, #68]	@ (8000900 <SPI_PeriClockControl+0x64>)
 80008bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008c0:	6613      	str	r3, [r2, #96]	@ 0x60
            SPI3_PCLK_EN();
        }
    } else {

    }
}
 80008c2:	e014      	b.n	80008ee <SPI_PeriClockControl+0x52>
        } else if (pSPIx == SPI2) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000904 <SPI_PeriClockControl+0x68>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d106      	bne.n	80008da <SPI_PeriClockControl+0x3e>
            SPI2_PCLK_EN();
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <SPI_PeriClockControl+0x64>)
 80008ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000900 <SPI_PeriClockControl+0x64>)
 80008d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80008d8:	e009      	b.n	80008ee <SPI_PeriClockControl+0x52>
        } else if (pSPIx == SPI3) {
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <SPI_PeriClockControl+0x6c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d105      	bne.n	80008ee <SPI_PeriClockControl+0x52>
            SPI3_PCLK_EN();
 80008e2:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <SPI_PeriClockControl+0x64>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e6:	4a06      	ldr	r2, [pc, #24]	@ (8000900 <SPI_PeriClockControl+0x64>)
 80008e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008ec:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40013000 	.word	0x40013000
 8000900:	40021000 	.word	0x40021000
 8000904:	40003800 	.word	0x40003800
 8000908:	40003c00 	.word	0x40003c00

0800090c <SPI_Init>:

// Init and deinit SPI
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	SPI_PeriClockControl(pSPIHandle->pSPIx,ENABLE);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2101      	movs	r1, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ffbe 	bl	800089c <SPI_PeriClockControl>
    uint32_t tempreg = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]

    // Configure device mode
    tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	791b      	ldrb	r3, [r3, #4]
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	68fa      	ldr	r2, [r7, #12]
 800092c:	4313      	orrs	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]

    // Configure bus config
    if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	795b      	ldrb	r3, [r3, #5]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d104      	bne.n	8000942 <SPI_Init+0x36>
        tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	e014      	b.n	800096c <SPI_Init+0x60>
    } else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	795b      	ldrb	r3, [r3, #5]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d104      	bne.n	8000954 <SPI_Init+0x48>
        tempreg |= (1 << SPI_CR1_BIDIMODE);
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	e00b      	b.n	800096c <SPI_Init+0x60>
    } else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_TXONLY) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	795b      	ldrb	r3, [r3, #5]
 8000958:	2b03      	cmp	r3, #3
 800095a:	d107      	bne.n	800096c <SPI_Init+0x60>
        tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000962:	60fb      	str	r3, [r7, #12]
        tempreg |= (1 << SPI_CR1_RXONLY);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800096a:	60fb      	str	r3, [r7, #12]
    }

    // Configure clock speed
    tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	799b      	ldrb	r3, [r3, #6]
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	4313      	orrs	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]

    // Configure CPOL & CPHA
    tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7a1b      	ldrb	r3, [r3, #8]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	4313      	orrs	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]
    tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	7a5b      	ldrb	r3, [r3, #9]
 8000988:	461a      	mov	r2, r3
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	4313      	orrs	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]

    tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7a9b      	ldrb	r3, [r3, #10]
 8000994:	025b      	lsls	r3, r3, #9
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	4313      	orrs	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
    // Write to CR1
    pSPIHandle->pSPIx->CR1 = tempreg;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	601a      	str	r2, [r3, #0]

    // Configure data size in CR2
    pSPIHandle->pSPIx->CR2 &= ~(0xF << SPI_CR2_DS);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	685a      	ldr	r2, [r3, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 80009b2:	605a      	str	r2, [r3, #4]
    pSPIHandle->pSPIx->CR2 |= (pSPIHandle->SPIConfig.SPI_DataSize << SPI_CR2_DS);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6859      	ldr	r1, [r3, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	79db      	ldrb	r3, [r3, #7]
 80009be:	021a      	lsls	r2, r3, #8
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	430a      	orrs	r2, r1
 80009c6:	605a      	str	r2, [r3, #4]
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <SPI_GetFlagStatus>:
        SPI3_REG_RESET();
    }
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
    if (pSPIx->SR & FlagName) {
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	4013      	ands	r3, r2
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SPI_GetFlagStatus+0x1a>
        return FLAG_SET;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e000      	b.n	80009ec <SPI_GetFlagStatus+0x1c>
    }
    return FLAG_RESET;
 80009ea:	2300      	movs	r3, #0
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SPI_TransmitReceive>:
            len--;
        }
    }
}
void SPI_TransmitReceive(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint8_t *pRxBuffer, uint32_t len)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	603b      	str	r3, [r7, #0]
	if (pSPIx->CR1 & (1 << SPI_CR1_SSM)) {
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d02a      	beq.n	8000a68 <SPI_TransmitReceive+0x70>
	        pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	601a      	str	r2, [r3, #0]
	    }
    while(len > 0)
 8000a1e:	e023      	b.n	8000a68 <SPI_TransmitReceive+0x70>
    {
        // Wait until TXE is set
        while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000a20:	bf00      	nop
 8000a22:	2102      	movs	r1, #2
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f7ff ffd3 	bl	80009d0 <SPI_GetFlagStatus>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d0f8      	beq.n	8000a22 <SPI_TransmitReceive+0x2a>

        // Write to DR — 8-bit
        *((volatile uint8_t*)&pSPIx->DR) = *pTxBuffer;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	330c      	adds	r3, #12
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	7812      	ldrb	r2, [r2, #0]
 8000a38:	701a      	strb	r2, [r3, #0]

        // Wait until RXNE is set
        while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000a3a:	bf00      	nop
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f7ff ffc6 	bl	80009d0 <SPI_GetFlagStatus>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0f8      	beq.n	8000a3c <SPI_TransmitReceive+0x44>

        // Read from DR — 8-bit
        *pRxBuffer = *((volatile uint8_t*)&pSPIx->DR);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	330c      	adds	r3, #12
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	701a      	strb	r2, [r3, #0]

        pTxBuffer++;
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
        pRxBuffer++;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	607b      	str	r3, [r7, #4]
        len--;
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	603b      	str	r3, [r7, #0]
    while(len > 0)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1d8      	bne.n	8000a20 <SPI_TransmitReceive+0x28>
    }
}
 8000a6e:	bf00      	nop
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx,uint8_t EnorDi)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a84:	78fb      	ldrb	r3, [r7, #3]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d106      	bne.n	8000a98 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1  |= (1 << SPI_CR1_SPE);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1  &= ~(1 << SPI_CR1_SPE);
	}
}
 8000a96:	e005      	b.n	8000aa4 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1  &= ~(1 << SPI_CR1_SPE);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	601a      	str	r2, [r3, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <SPI_SSOEConfig>:

void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000abc:	78fb      	ldrb	r3, [r7, #3]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d106      	bne.n	8000ad0 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (SPI_CR2_SSOE);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f043 0202 	orr.w	r2, r3, #2
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	605a      	str	r2, [r3, #4]
	}else
	{
		pSPIx->CR2 &=  ~(SPI_CR2_SSOE);
	}
}
 8000ace:	e005      	b.n	8000adc <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(SPI_CR2_SSOE);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f023 0202 	bic.w	r2, r3, #2
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	605a      	str	r2, [r3, #4]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <__libc_init_array>:
 8000ae8:	b570      	push	{r4, r5, r6, lr}
 8000aea:	4d0d      	ldr	r5, [pc, #52]	@ (8000b20 <__libc_init_array+0x38>)
 8000aec:	4c0d      	ldr	r4, [pc, #52]	@ (8000b24 <__libc_init_array+0x3c>)
 8000aee:	1b64      	subs	r4, r4, r5
 8000af0:	10a4      	asrs	r4, r4, #2
 8000af2:	2600      	movs	r6, #0
 8000af4:	42a6      	cmp	r6, r4
 8000af6:	d109      	bne.n	8000b0c <__libc_init_array+0x24>
 8000af8:	4d0b      	ldr	r5, [pc, #44]	@ (8000b28 <__libc_init_array+0x40>)
 8000afa:	4c0c      	ldr	r4, [pc, #48]	@ (8000b2c <__libc_init_array+0x44>)
 8000afc:	f000 f818 	bl	8000b30 <_init>
 8000b00:	1b64      	subs	r4, r4, r5
 8000b02:	10a4      	asrs	r4, r4, #2
 8000b04:	2600      	movs	r6, #0
 8000b06:	42a6      	cmp	r6, r4
 8000b08:	d105      	bne.n	8000b16 <__libc_init_array+0x2e>
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
 8000b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b10:	4798      	blx	r3
 8000b12:	3601      	adds	r6, #1
 8000b14:	e7ee      	b.n	8000af4 <__libc_init_array+0xc>
 8000b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b1a:	4798      	blx	r3
 8000b1c:	3601      	adds	r6, #1
 8000b1e:	e7f2      	b.n	8000b06 <__libc_init_array+0x1e>
 8000b20:	08000b48 	.word	0x08000b48
 8000b24:	08000b48 	.word	0x08000b48
 8000b28:	08000b48 	.word	0x08000b48
 8000b2c:	08000b4c 	.word	0x08000b4c

08000b30 <_init>:
 8000b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b32:	bf00      	nop
 8000b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b36:	bc08      	pop	{r3}
 8000b38:	469e      	mov	lr, r3
 8000b3a:	4770      	bx	lr

08000b3c <_fini>:
 8000b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3e:	bf00      	nop
 8000b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b42:	bc08      	pop	{r3}
 8000b44:	469e      	mov	lr, r3
 8000b46:	4770      	bx	lr
