#include <stdint.h>

#define     FLASH_BASEADDR                0x08000000U   //flash memory starting address
#define     SRAM1_BASEADDR                0x20000000U   //sram1 starting address  96kb
#define     SRAM2_BASEADDR				  0x10000000U   //sram2 starting address 32kb
#define     ROM_BASEADDR                  0x1FFF0000U 	//system memory or ROM starting address

#define     PERIPH_BASEADDR               0x40000000U
#define     APB1_BASEADDR				  0x40000000U
#define     APB2_BASEADDR				  0x40010000U
#define     AHB1_BASEADDR                 0x40020000U
#define     AHB2_BASEADDR                 0x48000000U

//base addresses of peripheral of AHB2  bus

#define     GPIOA_BASEADDR				  0x48000000U
#define     GPIOB_BASEADDR				  0x48000400U
#define     GPIOC_BASEADDR                0x48000800U
#define     GPIOD_BASEADDR				  0x48000c00U
#define     GPIOE_BASEADDR				  0x48001000U
#define     GPIOF_BASEADDR				  0x48001400U
#define     GPIOG_BASEADDR				  0x48001800U
#define     GPIOH_BASEADDR				  0x48001C00U

#define     ADC_BASEADDR                  0x50040000U



//base addresses of AHB1 bus peripherals

#define    DMA1_BASEADDR				  0x40020000U
#define    DMA2_BASEADDR                  0x40020400U

#define    RCC_BASEADDR                   0x40021000U


//base addresses of APB2 peripherals

#define    USART1_BASEADDR                0x40013800U

#define    SPI1_BASEADDR                  0x40013000U

#define    EXTI_BASEADDR                  0x40010400U

#define    SYSCFG_BASEADDR                0x40010000U


//base addresses of peripherals of APB1 bus

#define    RTC_BASEADDR                    0x40002800U

#define    SPI2_BASEADDR                   0x40003800U
#define    SPI3_BASEADDR                   0x40003C00U

#define    USART2_BASEADDR                 0x40004400U
#define    USART3_BASEADDR                 0x40004800U

#define    UART4_BASEADDR                  0x40004C00U
#define    UART5_BASEADDR				   0x40005000U

#define    I2C1_BASEADDR				   0x40005400U
#define    I2C2_BASEADDR				   0x40005800U
#define    I2C3_BASEADDR				   0x40005C00U

#define    DAC1_BASEADDR				   0x40007400U


//********************************************************************************************

//registers for different peripherals  for stm32l4xx  only


//GPIO registers structure

typedef struct
{
	volatile uint32_t  MODER;    //GPIO port mode register (GPIOx_MODER) offset 0x0
	volatile uint32_t  OTYPER;   //GPIO port output type register (GPIOx_OTYPER)  offset 0x04
	volatile uint32_t  OSPEEDR;  //GPIO port output speed register (GPIOx_OSPEEDR) offset 0x08
	volatile uint32_t  PUPDR;    //GPIO port pull-up/pull-down register (GPIOx_PUPDR)
	volatile uint32_t  IDR;     // GPIO port input data register (GPIOx_IDR)
	volatile uint32_t  ODR;      //GPIO port output data register (GPIOx_ODR)
	volatile uint32_t  BSSR;    //GPIO port bit set/reset register (GPIOx_BSRR)
	volatile uint32_t  LCKR;      //GPIO port configuration lock register (GPIOx_LCKR)
	volatile uint32_t  AFR[2];   //GPIO alternate function low  and high register (GPIOx_AFRL  and GPIO_ARRH)
	volatile uint32_t  BRR;      // GPIO port bit reset register (GPIOx_BRR)
	volatile uint32_t  ASCR;     // GPIO port analog switch control register (GPIOx_ASCR)
}GPIO_RegDef_t;      //GPIO registers structure


#define   GPIOA       ((GPIO_RegDef_t*)GPIOA_BASEADDR)
#define   GPIOB       ((GPIO_RegDef_t*)GPIOB_BASEADDR)
#define   GPIOC       ((GPIO_RegDef_t*)GPIOC_BASEADDR)
#define   GPIOD       ((GPIO_RegDef_t*)GPIOD_BASEADDR)
#define   GPIOE       ((GPIO_RegDef_t*)GPIOE_BASEADDR)
#define   GPIOF       ((GPIO_RegDef_t*)GPIOF_BASEADDR)
#define   GPIOG       ((GPIO_RegDef_t*)GPIOG_BASEADDR)
#define   GPIOH       ((GPIO_RegDef_t*)GPIOH_BASEADDR)


//struct for RCC clock
typedef struct
{
    volatile uint32_t CR;          // 0x00: Clock control register
    volatile uint32_t ICSCR;       // 0x04: Internal clock sources calibration register
    volatile uint32_t CFGR;        // 0x08: Clock configuration register
    volatile uint32_t PLLCFGR;     // 0x0C: PLL configuration register
    volatile uint32_t PLLSAI1CFGR; // 0x10: PLLSAI1 configuration register
    volatile uint32_t PLLSAI2CFGR; // 0x14: PLLSAI2 configuration register
    volatile uint32_t CIER;        // 0x18: Clock interrupt enable register
    volatile uint32_t CIFR;        // 0x1C: Clock interrupt flag register
    volatile uint32_t CICR;        // 0x20: Clock interrupt clear register
    uint32_t RESERVED0;            // 0x24: Reserved
    volatile uint32_t AHB1RSTR;    // 0x28: AHB1 peripheral reset register
    volatile uint32_t AHB2RSTR;    // 0x2C: AHB2 peripheral reset register
    volatile uint32_t AHB3RSTR;    // 0x30: AHB3 peripheral reset register
    uint32_t RESERVED1;            // 0x34: Reserved
    volatile uint32_t APB1RSTR1;   // 0x38: APB1 peripheral reset register 1
    volatile uint32_t APB1RSTR2;   // 0x3C: APB1 peripheral reset register 2
    volatile uint32_t APB2RSTR;    // 0x40: APB2 peripheral reset register
    uint32_t RESERVED2;            // 0x44: Reserved
    volatile uint32_t AHB1ENR;     // 0x48: AHB1 peripheral clock enable register
    volatile uint32_t AHB2ENR;     // 0x4C: AHB2 peripheral clock enable register
    volatile uint32_t AHB3ENR;     // 0x50: AHB3 peripheral clock enable register
    uint32_t RESERVED3;            // 0x54: Reserved
    volatile uint32_t APB1ENR1;    // 0x58: APB1 peripheral clock enable register 1
    volatile uint32_t APB1ENR2;    // 0x5C: APB1 peripheral clock enable register 2
    volatile uint32_t APB2ENR;     // 0x60: APB2 peripheral clock enable register
    uint32_t RESERVED4;            // 0x64: Reserved
    volatile uint32_t AHB1SMENR;   // 0x68: AHB1 peripheral clocks enable in sleep/stop
    volatile uint32_t AHB2SMENR;   // 0x6C: AHB2 peripheral clocks enable in sleep/stop
    volatile uint32_t AHB3SMENR;   // 0x70: AHB3 peripheral clocks enable in sleep/stop
    uint32_t RESERVED5;            // 0x74: Reserved
    volatile uint32_t APB1SMENR1;  // 0x78: APB1 peripheral clocks enable in sleep/stop 1
    volatile uint32_t APB1SMENR2;  // 0x7C: APB1 peripheral clocks enable in sleep/stop 2
    volatile uint32_t APB2SMENR;   // 0x80: APB2 peripheral clocks enable in sleep/stop
    uint32_t RESERVED6;            // 0x84: Reserved
    volatile uint32_t CCIPR;       // 0x88: Peripherals independent clock config register
    uint32_t RESERVED7;            // 0x8C: Reserved
    volatile uint32_t BDCR;        // 0x90: Backup domain control register
    volatile uint32_t CSR;         // 0x94: Control/status register
    volatile uint32_t CRRCR;       // 0x98: Clock recovery RC register
    volatile uint32_t CCIPR2;      // 0x9C: Peripherals independent clock config register 2
} RCC_RegDef_t;

#define    RCC   ((RCC_RegDef_t*)RCC_BASEADDR)

//macros for enabling GPIOx RCC clock

#define GPIOA_PCLK_EN()    (RCC->AHB2ENR |= (1 << 0))
#define GPIOB_PCLK_EN()    (RCC->AHB2ENR |= (1 << 1))
#define GPIOC_PCLK_EN()    (RCC->AHB2ENR |= (1 << 2))
#define GPIOD_PCLK_EN()    (RCC->AHB2ENR |= (1 << 3))
#define GPIOE_PCLK_EN()    (RCC->AHB2ENR |= (1 << 4))
#define GPIOF_PCLK_EN()    (RCC->AHB2ENR |= (1 << 5))
#define GPIOG_PCLK_EN()    (RCC->AHB2ENR |= (1 << 6))
#define GPIOH_PCLK_EN()    (RCC->AHB2ENR |= (1 << 7))

//macros for enabling SPIx RCC clock

#define SPI1_PCLK_EN()     (RCC->APB2ENR |= (1 << 12))
#define SPI2_PCLK_EN()     (RCC->APB1ENR1 |= (1 << 14))
#define SPI3_PCLK_EN()     (RCC->APB1ENR1 |= (1 << 15))

//macros for enabling I2cx RCC clock

#define I2C1_PCLK_EN()     (RCC->APB1ENR1 |= (1 << 21))
#define I2C2_PCLK_EN()     (RCC->APB1ENR1 |= (1 << 22))
#define I2C3_PCLK_EN()     (RCC->APB1ENR1 |= (1 << 23))

//macros for enabling USARTx RCC clock

#define USART1_PCLK_EN()   (RCC->APB2ENR |= (1 << 14))
#define USART2_PCLK_EN()   (RCC->APB1ENR1 |= (1 << 17))
#define USART3_PCLK_EN()   (RCC->APB1ENR1 |= (1 << 18))
#define UART4_PCLK_EN()    (RCC->APB1ENR1 |= (1 << 19))
#define UART5_PCLK_EN()    (RCC->APB1ENR1 |= (1 << 20))

//macros for enabling DMAx RCC clock

#define DMA1_PCLK_EN()     (RCC->AHB1ENR |= (1 << 0))
#define DMA2_PCLK_EN()     (RCC->AHB1ENR |= (1 << 1))

//ADC clock

#define ADC_PCLK_EN()      (RCC->AHB2ENR |= (1 << 13))

//DAC clock

#define DAC1_PCLK_EN()     (RCC->APB1ENR1 |= (1 << 29))

//system configuration clock

#define SYSCFG_PCLK_EN()   (RCC->APB2ENR |= (1 << 0))



//macros for disabling clock

//macros for disabling GPIOx RCC clock
#define GPIOA_PCLK_DI()    (RCC->AHB2ENR &= ~(1 << 0))
#define GPIOB_PCLK_DI()    (RCC->AHB2ENR &= ~(1 << 1))
#define GPIOC_PCLK_DI()    (RCC->AHB2ENR &= ~(1 << 2))
#define GPIOD_PCLK_DI()    (RCC->AHB2ENR &= ~(1 << 3))
#define GPIOE_PCLK_DI()    (RCC->AHB2ENR &= ~(1 << 4))
#define GPIOF_PCLK_DI()    (RCC->AHB2ENR &= ~(1 << 5))
#define GPIOG_PCLK_DI()    (RCC->AHB2ENR &= ~(1 << 6))
#define GPIOH_PCLK_DI()    (RCC->AHB2ENR &= ~(1 << 7))

//macros for disabling SPIx RCC clock
#define SPI1_PCLK_DI()     (RCC->APB2ENR  &= ~(1 << 12))
#define SPI2_PCLK_DI()     (RCC->APB1ENR1 &= ~(1 << 14))
#define SPI3_PCLK_DI()     (RCC->APB1ENR1 &= ~(1 << 15))

//macros for disabling I2Cx RCC clock
#define I2C1_PCLK_DI()     (RCC->APB1ENR1 &= ~(1 << 21))
#define I2C2_PCLK_DI()     (RCC->APB1ENR1 &= ~(1 << 22))
#define I2C3_PCLK_DI()     (RCC->APB1ENR1 &= ~(1 << 23))

//macros for disabling USARTx RCC clock
#define USART1_PCLK_DI()   (RCC->APB2ENR  &= ~(1 << 14))
#define USART2_PCLK_DI()   (RCC->APB1ENR1 &= ~(1 << 17))
#define USART3_PCLK_DI()   (RCC->APB1ENR1 &= ~(1 << 18))
#define UART4_PCLK_DI()    (RCC->APB1ENR1 &= ~(1 << 19))
#define UART5_PCLK_DI()    (RCC->APB1ENR1 &= ~(1 << 20))

//macros for disabling DMAx RCC clock
#define DMA1_PCLK_DI()     (RCC->AHB1ENR  &= ~(1 << 0))
#define DMA2_PCLK_DI()     (RCC->AHB1ENR  &= ~(1 << 1))

//ADC clock disable
#define ADC_PCLK_DI()      (RCC->AHB2ENR  &= ~(1 << 13))

//DAC clock disable
#define DAC1_PCLK_DI()     (RCC->APB1ENR1 &= ~(1 << 29))

//system configuration clock disable
#define SYSCFG_PCLK_DI()   (RCC->APB2ENR  &= ~(1 << 0))









