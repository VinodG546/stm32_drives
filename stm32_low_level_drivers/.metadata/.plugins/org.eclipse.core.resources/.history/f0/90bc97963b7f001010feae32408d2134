#include "stm32l4xx_gpio_driver.h"

// Peripheral clock setup
/**
  * @fn        - GPIO_PeriClockControl
  * @brief     - This function enables or disables the peripheral clock for the given GPIO port.
  * @param[in] pGPIOx  - Base address of GPIO peripheral (e.g., GPIOA, GPIOB, etc.)
  * @param[in] EnorDi  - Enable or disable macros: ENABLE = 1, DISABLE = 0
  * @return    - None
  * @note      - Must be called before accessing GPIO registers.
  */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){

}

// Init and deinit GPIO
/**
  * @fn        - GPIO_Init
  * @brief     - Initializes the GPIO pin according to the configuration in GPIO handle.
  * @param[in] pGPIOHandle - Handle structure that contains GPIO configuration information.
  * @return    - None
  * @note      - Make sure peripheral clock for GPIO is enabled before calling this function.
  */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){

}

/**
  * @fn        - GPIO_DeInit
  * @brief     - Resets all registers of the given GPIO port.
  * @param[in] pGPIOx - Base address of GPIO peripheral (e.g., GPIOA, GPIOB, etc.)
  * @return    - None
  * @note      - Internally uses RCC reset register macros.
  */
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx){

}


// APIs for reading and writing into/from GPIOs
/**
  * @fn        - GPIO_ReadFromInputPin
  * @brief     - Reads the logic level (0 or 1) from a specific GPIO pin.
  * @param[in] pGPIOx       - Base address of GPIO port.
  * @param[in] GPIO_PinNumber - Pin number (0-15).
  * @return    - uint8_t: 0 (LOW) or 1 (HIGH).
  * @note      - None
  */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t GPIO_PinNumber){

}

/**
  * @fn        - GPIO_ReadFromInputPort
  * @brief     - Reads the entire 16-bit value from the GPIO input data register.
  * @param[in] pGPIOx - Base address of GPIO port.
  * @return    - uint16_t: 16-bit port input value.
  * @note      - None
  */
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx){

}

/**
  * @fn        - GPIO_WriteToOutputPin
  * @brief     - Writes a logic value (0 or 1) to a specific GPIO output pin.
  * @param[in] pGPIOx       - Base address of GPIO port.
  * @param[in] GPIO_PinNumber - Pin number (0-15).
  * @param[in] value        - 0 = RESET (LOW), 1 = SET (HIGH).
  * @return    - None
  * @note      - None
  */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t GPIO_PinNumber, uint32_t value){

}

/**
  * @fn        - GPIO_WriteToOutputPort
  * @brief     - Writes a 16-bit value to the entire GPIO output data register.
  * @param[in] pGPIOx - Base address of GPIO port.
  * @param[in] value  - 16-bit value to be written on port pins.
  * @return    - None
  * @note      - Overwrites all pin states of the port.
  */
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint32_t value){

}

/**
  * @fn        - GPIO_ToggleOutputPin
  * @brief     - Toggles the output state of the given GPIO pin.
  * @param[in] pGPIOx       - Base address of GPIO port.
  * @param[in] GPIO_PinNumber - Pin number (0-15).
  * @return    - None
  * @note      - Useful for blinking LEDs or toggling signals.
  */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t GPIO_PinNumber){

}


// APIs for IRQ configuration and handling
/**
  * @fn        - GPIO_IRQConfig
  * @brief     - Configures the IRQ number and enables/disables it in NVIC.
  * @param[in] IRQNumber   - IRQ number to configure (from MCU vector table).
  * @param[in] IRQPriority - Priority of the IRQ (lower number = higher priority).
  * @param[in] EnorDi      - ENABLE = 1, DISABLE = 0.
  * @return    - None
  * @note      - Must also configure EXTI line for GPIO before enabling IRQ.
  */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t EnorDi){

}

/**
  * @fn        - GPIO_IRQHandling
  * @brief     - Handles the interrupt generated on the given pin number.
  * @param[in] GPIO_PinNumber - Pin number (0-15) which triggered the interrupt.
  * @return    - None
  * @note      - Clears the EXTI pending register bit corresponding to the pin.
  */
void GPIO_IRQHandling(uint8_t GPIO_PinNumber){

}
