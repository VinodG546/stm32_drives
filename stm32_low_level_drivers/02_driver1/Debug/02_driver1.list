
02_driver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004c4  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000650  08000658  00001658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000650  08000650  00001658  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000650  08000650  00001658  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000650  08000658  00001658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000650  08000650  00001650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000654  08000654  00001654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001658  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000900  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000245  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  000021d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007e  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000013a4  00000000  00000000  00002306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d09  00000000  00000000  000036aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005289  00000000  00000000  000043b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000963c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000224  00000000  00000000  00009680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  000098a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000638 	.word	0x08000638

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	08000638 	.word	0x08000638

080001cc <delay>:
 *      Author: VINOD
 */

#include"stm32l4xx_gpio_driver.h"

void delay(void){
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<50000;i++);
 80001d2:	2300      	movs	r3, #0
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	e002      	b.n	80001de <delay+0x12>
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	3301      	adds	r3, #1
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d9f7      	bls.n	80001d8 <delay+0xc>
}
 80001e8:	bf00      	nop
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr

080001f6 <main>:
int main(){
 80001f6:	b580      	push	{r7, lr}
 80001f8:	b084      	sub	sp, #16
 80001fa:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx = GPIOA;
 80001fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000200:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000202:	2305      	movs	r3, #5
 8000204:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000206:	2301      	movs	r3, #1
 8000208:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 800020a:	2302      	movs	r3, #2
 800020c:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType =GPIO_OP_TYPE_PP;
 800020e:	2300      	movs	r3, #0
 8000210:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000212:	2300      	movs	r3, #0
 8000214:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000216:	2101      	movs	r1, #1
 8000218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021c:	f000 f838 	bl	8000290 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f902 	bl	800042c <GPIO_Init>

	while(1){
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);
 8000228:	2105      	movs	r1, #5
 800022a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800022e:	f000 f9c9 	bl	80005c4 <GPIO_ToggleOutputPin>
		delay();
 8000232:	f7ff ffcb 	bl	80001cc <delay>
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);
 8000236:	bf00      	nop
 8000238:	e7f6      	b.n	8000228 <main+0x32>
	...

0800023c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800023c:	480d      	ldr	r0, [pc, #52]	@ (8000274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000240:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000244:	480c      	ldr	r0, [pc, #48]	@ (8000278 <LoopForever+0x6>)
  ldr r1, =_edata
 8000246:	490d      	ldr	r1, [pc, #52]	@ (800027c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000248:	4a0d      	ldr	r2, [pc, #52]	@ (8000280 <LoopForever+0xe>)
  movs r3, #0
 800024a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800024c:	e002      	b.n	8000254 <LoopCopyDataInit>

0800024e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800024e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000252:	3304      	adds	r3, #4

08000254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000258:	d3f9      	bcc.n	800024e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025a:	4a0a      	ldr	r2, [pc, #40]	@ (8000284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800025c:	4c0a      	ldr	r4, [pc, #40]	@ (8000288 <LoopForever+0x16>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000260:	e001      	b.n	8000266 <LoopFillZerobss>

08000262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000264:	3204      	adds	r2, #4

08000266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000268:	d3fb      	bcc.n	8000262 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800026a:	f000 f9c1 	bl	80005f0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800026e:	f7ff ffc2 	bl	80001f6 <main>

08000272 <LoopForever>:

LoopForever:
  b LoopForever
 8000272:	e7fe      	b.n	8000272 <LoopForever>
  ldr   r0, =_estack
 8000274:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800027c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000280:	08000658 	.word	0x08000658
  ldr r2, =_sbss
 8000284:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000288:	2000001c 	.word	0x2000001c

0800028c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800028c:	e7fe      	b.n	800028c <ADC1_2_IRQHandler>
	...

08000290 <GPIO_PeriClockControl>:
  * @param[in] pGPIOx  - Base address of GPIO peripheral (e.g., GPIOA, GPIOB, etc.)
  * @param[in] EnorDi  - Enable or disable macros: ENABLE = 1, DISABLE = 0
  * @return    - None
  * @note      - Must be called before accessing GPIO registers.
  */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	460b      	mov	r3, r1
 800029a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800029c:	78fb      	ldrb	r3, [r7, #3]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d157      	bne.n	8000352 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx==GPIOA){
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80002a8:	d106      	bne.n	80002b8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80002aa:	4b58      	ldr	r3, [pc, #352]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ae:	4a57      	ldr	r2, [pc, #348]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
				}
				else if(pGPIOx==GPIOH){
					GPIOH_PCLK_DI();
				}
	}
}
 80002b6:	e0a3      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOB){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4a55      	ldr	r2, [pc, #340]	@ (8000410 <GPIO_PeriClockControl+0x180>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d106      	bne.n	80002ce <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002c0:	4b52      	ldr	r3, [pc, #328]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80002c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c4:	4a51      	ldr	r2, [pc, #324]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80002c6:	f043 0302 	orr.w	r3, r3, #2
 80002ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002cc:	e098      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOC){
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a50      	ldr	r2, [pc, #320]	@ (8000414 <GPIO_PeriClockControl+0x184>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d106      	bne.n	80002e4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002d6:	4b4d      	ldr	r3, [pc, #308]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002da:	4a4c      	ldr	r2, [pc, #304]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80002dc:	f043 0304 	orr.w	r3, r3, #4
 80002e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002e2:	e08d      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOD){
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4a4c      	ldr	r2, [pc, #304]	@ (8000418 <GPIO_PeriClockControl+0x188>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d106      	bne.n	80002fa <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002ec:	4b47      	ldr	r3, [pc, #284]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80002ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f0:	4a46      	ldr	r2, [pc, #280]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80002f2:	f043 0308 	orr.w	r3, r3, #8
 80002f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002f8:	e082      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOE){
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a47      	ldr	r2, [pc, #284]	@ (800041c <GPIO_PeriClockControl+0x18c>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d106      	bne.n	8000310 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000302:	4b42      	ldr	r3, [pc, #264]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 8000304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000306:	4a41      	ldr	r2, [pc, #260]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 8000308:	f043 0310 	orr.w	r3, r3, #16
 800030c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800030e:	e077      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOF){
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a43      	ldr	r2, [pc, #268]	@ (8000420 <GPIO_PeriClockControl+0x190>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d106      	bne.n	8000326 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000318:	4b3c      	ldr	r3, [pc, #240]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 800031a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031c:	4a3b      	ldr	r2, [pc, #236]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000324:	e06c      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOG){
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a3e      	ldr	r2, [pc, #248]	@ (8000424 <GPIO_PeriClockControl+0x194>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800032e:	4b37      	ldr	r3, [pc, #220]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000332:	4a36      	ldr	r2, [pc, #216]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 8000334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000338:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800033a:	e061      	b.n	8000400 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx==GPIOH){
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a3a      	ldr	r2, [pc, #232]	@ (8000428 <GPIO_PeriClockControl+0x198>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d15d      	bne.n	8000400 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000344:	4b31      	ldr	r3, [pc, #196]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 8000346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000348:	4a30      	ldr	r2, [pc, #192]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 800034a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800034e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000350:	e056      	b.n	8000400 <GPIO_PeriClockControl+0x170>
				if(pGPIOx==GPIOA){
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000358:	d106      	bne.n	8000368 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800035e:	4a2b      	ldr	r2, [pc, #172]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 8000360:	f023 0301 	bic.w	r3, r3, #1
 8000364:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000366:	e04b      	b.n	8000400 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOB){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a29      	ldr	r2, [pc, #164]	@ (8000410 <GPIO_PeriClockControl+0x180>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d106      	bne.n	800037e <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 8000370:	4b26      	ldr	r3, [pc, #152]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 8000372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000374:	4a25      	ldr	r2, [pc, #148]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 8000376:	f023 0302 	bic.w	r3, r3, #2
 800037a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800037c:	e040      	b.n	8000400 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOC){
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a24      	ldr	r2, [pc, #144]	@ (8000414 <GPIO_PeriClockControl+0x184>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 8000386:	4b21      	ldr	r3, [pc, #132]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038a:	4a20      	ldr	r2, [pc, #128]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 800038c:	f023 0304 	bic.w	r3, r3, #4
 8000390:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000392:	e035      	b.n	8000400 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOD){
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a20      	ldr	r2, [pc, #128]	@ (8000418 <GPIO_PeriClockControl+0x188>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 800039e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a0:	4a1a      	ldr	r2, [pc, #104]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80003a2:	f023 0308 	bic.w	r3, r3, #8
 80003a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003a8:	e02a      	b.n	8000400 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOE){
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a1b      	ldr	r2, [pc, #108]	@ (800041c <GPIO_PeriClockControl+0x18c>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 80003b2:	4b16      	ldr	r3, [pc, #88]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80003b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b6:	4a15      	ldr	r2, [pc, #84]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80003b8:	f023 0310 	bic.w	r3, r3, #16
 80003bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003be:	e01f      	b.n	8000400 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOF){
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a17      	ldr	r2, [pc, #92]	@ (8000420 <GPIO_PeriClockControl+0x190>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 80003c8:	4b10      	ldr	r3, [pc, #64]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80003ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003cc:	4a0f      	ldr	r2, [pc, #60]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80003ce:	f023 0320 	bic.w	r3, r3, #32
 80003d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003d4:	e014      	b.n	8000400 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOG){
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a12      	ldr	r2, [pc, #72]	@ (8000424 <GPIO_PeriClockControl+0x194>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 80003de:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e2:	4a0a      	ldr	r2, [pc, #40]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80003e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80003e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003ea:	e009      	b.n	8000400 <GPIO_PeriClockControl+0x170>
				else if(pGPIOx==GPIOH){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000428 <GPIO_PeriClockControl+0x198>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d105      	bne.n	8000400 <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 80003f4:	4b05      	ldr	r3, [pc, #20]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80003f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003f8:	4a04      	ldr	r2, [pc, #16]	@ (800040c <GPIO_PeriClockControl+0x17c>)
 80003fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000
 8000410:	48000400 	.word	0x48000400
 8000414:	48000800 	.word	0x48000800
 8000418:	48000c00 	.word	0x48000c00
 800041c:	48001000 	.word	0x48001000
 8000420:	48001400 	.word	0x48001400
 8000424:	48001800 	.word	0x48001800
 8000428:	48001c00 	.word	0x48001c00

0800042c <GPIO_Init>:
  * @param[in] pGPIOHandle - Handle structure that contains GPIO configuration information.
  * @return    - None
  * @note      - Make sure peripheral clock for GPIO is enabled before calling this function.
  */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]

    // 1. Configure the mode of GPIO pin
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	795b      	ldrb	r3, [r3, #5]
 800043c:	2b03      	cmp	r3, #3
 800043e:	d821      	bhi.n	8000484 <GPIO_Init+0x58>
    {
        // non-interrupt mode
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	795b      	ldrb	r3, [r3, #5]
 8000444:	461a      	mov	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	fa02 f303 	lsl.w	r3, r2, r3
 8000450:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	791b      	ldrb	r3, [r3, #4]
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	2103      	movs	r1, #3
 8000460:	fa01 f303 	lsl.w	r3, r1, r3
 8000464:	43db      	mvns	r3, r3
 8000466:	4619      	mov	r1, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	400a      	ands	r2, r1
 800046e:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	6819      	ldr	r1, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	68fa      	ldr	r2, [r7, #12]
 800047c:	430a      	orrs	r2, r1
 800047e:	601a      	str	r2, [r3, #0]
        temp = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
    {
        // interrupt mode (later)
    }

    // 2. Configure speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	799b      	ldrb	r3, [r3, #6]
 8000488:	461a      	mov	r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	791b      	ldrb	r3, [r3, #4]
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	fa02 f303 	lsl.w	r3, r2, r3
 8000494:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	689a      	ldr	r2, [r3, #8]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	2103      	movs	r1, #3
 80004a4:	fa01 f303 	lsl.w	r3, r1, r3
 80004a8:	43db      	mvns	r3, r3
 80004aa:	4619      	mov	r1, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	400a      	ands	r2, r1
 80004b2:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	6899      	ldr	r1, [r3, #8]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	430a      	orrs	r2, r1
 80004c2:	609a      	str	r2, [r3, #8]
    temp = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]

    // 3. Configure pull-up/pull-down
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	79db      	ldrb	r3, [r3, #7]
 80004cc:	461a      	mov	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	791b      	ldrb	r3, [r3, #4]
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	fa02 f303 	lsl.w	r3, r2, r3
 80004d8:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	68da      	ldr	r2, [r3, #12]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	791b      	ldrb	r3, [r3, #4]
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	2103      	movs	r1, #3
 80004e8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ec:	43db      	mvns	r3, r3
 80004ee:	4619      	mov	r1, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	400a      	ands	r2, r1
 80004f6:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	68d9      	ldr	r1, [r3, #12]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	430a      	orrs	r2, r1
 8000506:	60da      	str	r2, [r3, #12]
    temp = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]

    // 4. Configure output type
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	7a1b      	ldrb	r3, [r3, #8]
 8000510:	461a      	mov	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	fa02 f303 	lsl.w	r3, r2, r3
 800051a:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	685a      	ldr	r2, [r3, #4]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	791b      	ldrb	r3, [r3, #4]
 8000526:	4619      	mov	r1, r3
 8000528:	2301      	movs	r3, #1
 800052a:	408b      	lsls	r3, r1
 800052c:	43db      	mvns	r3, r3
 800052e:	4619      	mov	r1, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	400a      	ands	r2, r1
 8000536:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	6859      	ldr	r1, [r3, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	430a      	orrs	r2, r1
 8000546:	605a      	str	r2, [r3, #4]
    temp = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]

    // 5. Configure alternate function if needed
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	795b      	ldrb	r3, [r3, #5]
 8000550:	2b02      	cmp	r3, #2
 8000552:	d131      	bne.n	80005b8 <GPIO_Init+0x18c>
    {
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;  // AFR[0] or AFR[1]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	791b      	ldrb	r3, [r3, #4]
 8000558:	08db      	lsrs	r3, r3, #3
 800055a:	72fb      	strb	r3, [r7, #11]
        uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;  // Position within register
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	f003 0307 	and.w	r3, r3, #7
 8000564:	72bb      	strb	r3, [r7, #10]

        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	7afa      	ldrb	r2, [r7, #11]
 800056c:	3208      	adds	r2, #8
 800056e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000572:	7abb      	ldrb	r3, [r7, #10]
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	220f      	movs	r2, #15
 8000578:	fa02 f303 	lsl.w	r3, r2, r3
 800057c:	43db      	mvns	r3, r3
 800057e:	4618      	mov	r0, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	7afa      	ldrb	r2, [r7, #11]
 8000586:	4001      	ands	r1, r0
 8000588:	3208      	adds	r2, #8
 800058a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	7afa      	ldrb	r2, [r7, #11]
 8000594:	3208      	adds	r2, #8
 8000596:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	7a5b      	ldrb	r3, [r3, #9]
 800059e:	461a      	mov	r2, r3
 80005a0:	7abb      	ldrb	r3, [r7, #10]
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	4618      	mov	r0, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	7afa      	ldrb	r2, [r7, #11]
 80005b0:	4301      	orrs	r1, r0
 80005b2:	3208      	adds	r2, #8
 80005b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <GPIO_ToggleOutputPin>:
  * @param[in] pGPIOx       - Base address of GPIO port.
  * @param[in] GPIO_PinNumber - Pin number (0-15).
  * @return    - None
  * @note      - Useful for blinking LEDs or toggling signals.
  */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t GPIO_PinNumber){
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1<<GPIO_PinNumber);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	78fa      	ldrb	r2, [r7, #3]
 80005d6:	2101      	movs	r1, #1
 80005d8:	fa01 f202 	lsl.w	r2, r1, r2
 80005dc:	405a      	eors	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	615a      	str	r2, [r3, #20]

}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <__libc_init_array>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000628 <__libc_init_array+0x38>)
 80005f4:	4c0d      	ldr	r4, [pc, #52]	@ (800062c <__libc_init_array+0x3c>)
 80005f6:	1b64      	subs	r4, r4, r5
 80005f8:	10a4      	asrs	r4, r4, #2
 80005fa:	2600      	movs	r6, #0
 80005fc:	42a6      	cmp	r6, r4
 80005fe:	d109      	bne.n	8000614 <__libc_init_array+0x24>
 8000600:	4d0b      	ldr	r5, [pc, #44]	@ (8000630 <__libc_init_array+0x40>)
 8000602:	4c0c      	ldr	r4, [pc, #48]	@ (8000634 <__libc_init_array+0x44>)
 8000604:	f000 f818 	bl	8000638 <_init>
 8000608:	1b64      	subs	r4, r4, r5
 800060a:	10a4      	asrs	r4, r4, #2
 800060c:	2600      	movs	r6, #0
 800060e:	42a6      	cmp	r6, r4
 8000610:	d105      	bne.n	800061e <__libc_init_array+0x2e>
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f855 3b04 	ldr.w	r3, [r5], #4
 8000618:	4798      	blx	r3
 800061a:	3601      	adds	r6, #1
 800061c:	e7ee      	b.n	80005fc <__libc_init_array+0xc>
 800061e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000622:	4798      	blx	r3
 8000624:	3601      	adds	r6, #1
 8000626:	e7f2      	b.n	800060e <__libc_init_array+0x1e>
 8000628:	08000650 	.word	0x08000650
 800062c:	08000650 	.word	0x08000650
 8000630:	08000650 	.word	0x08000650
 8000634:	08000654 	.word	0x08000654

08000638 <_init>:
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063a:	bf00      	nop
 800063c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063e:	bc08      	pop	{r3}
 8000640:	469e      	mov	lr, r3
 8000642:	4770      	bx	lr

08000644 <_fini>:
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000646:	bf00      	nop
 8000648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064a:	bc08      	pop	{r3}
 800064c:	469e      	mov	lr, r3
 800064e:	4770      	bx	lr
