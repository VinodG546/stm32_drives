
18_spi1_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bd4  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001d60  08001d60  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001d60  08001d60  00003018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001d60  08001d60  00003018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001d60  08001d60  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d60  08001d60  00002d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d64  08001d64  00002d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08001d68  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00003018  2**0
                  CONTENTS
 10 .bss          0000016c  20000018  20000018  00003018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000184  20000184  00003018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009877  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014ab  00000000  00000000  0000c8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  0000dd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a3  00000000  00000000  0000e890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000011f0  00000000  00000000  0000f133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd51  00000000  00000000  00010323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fca72  00000000  00000000  0001d074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119ae6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f60  00000000  00000000  00119b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0011ca8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000018 	.word	0x20000018
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001d48 	.word	0x08001d48

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	08001d48 	.word	0x08001d48

080001cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d6:	2003      	movs	r0, #3
 80001d8:	f000 f944 	bl	8000464 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001dc:	200f      	movs	r0, #15
 80001de:	f000 f815 	bl	800020c <HAL_InitTick>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e8:	2301      	movs	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e001      	b.n	80001f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ee:	f000 f805 	bl	80001fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
	...

0800020c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000214:	2300      	movs	r3, #0
 8000216:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000218:	4b17      	ldr	r3, [pc, #92]	@ (8000278 <HAL_InitTick+0x6c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d023      	beq.n	8000268 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000220:	4b16      	ldr	r3, [pc, #88]	@ (800027c <HAL_InitTick+0x70>)
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b14      	ldr	r3, [pc, #80]	@ (8000278 <HAL_InitTick+0x6c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	4619      	mov	r1, r3
 800022a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800022e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000232:	fbb2 f3f3 	udiv	r3, r2, r3
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f949 	bl	80004ce <HAL_SYSTICK_Config>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d10f      	bne.n	8000262 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b0f      	cmp	r3, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	2200      	movs	r2, #0
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f000 f913 	bl	800047a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000254:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <HAL_InitTick+0x74>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	6013      	str	r3, [r2, #0]
 800025a:	e007      	b.n	800026c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800025c:	2301      	movs	r3, #1
 800025e:	73fb      	strb	r3, [r7, #15]
 8000260:	e004      	b.n	800026c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	e001      	b.n	800026c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000268:	2301      	movs	r3, #1
 800026a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000004 	.word	0x20000004
 800027c:	20000014 	.word	0x20000014
 8000280:	20000000 	.word	0x20000000

08000284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <HAL_IncTick+0x20>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	461a      	mov	r2, r3
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <HAL_IncTick+0x24>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4413      	add	r3, r2
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <HAL_IncTick+0x24>)
 8000296:	6013      	str	r3, [r2, #0]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000004 	.word	0x20000004
 80002a8:	20000034 	.word	0x20000034

080002ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  return uwTick;
 80002b0:	4b03      	ldr	r3, [pc, #12]	@ (80002c0 <HAL_GetTick+0x14>)
 80002b2:	681b      	ldr	r3, [r3, #0]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	20000034 	.word	0x20000034

080002c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f003 0307 	and.w	r3, r3, #7
 80002d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <__NVIC_SetPriorityGrouping+0x44>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002da:	68ba      	ldr	r2, [r7, #8]
 80002dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80002e0:	4013      	ands	r3, r2
 80002e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80002f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002f6:	4a04      	ldr	r2, [pc, #16]	@ (8000308 <__NVIC_SetPriorityGrouping+0x44>)
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	60d3      	str	r3, [r2, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000310:	4b04      	ldr	r3, [pc, #16]	@ (8000324 <__NVIC_GetPriorityGrouping+0x18>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	0a1b      	lsrs	r3, r3, #8
 8000316:	f003 0307 	and.w	r3, r3, #7
}
 800031a:	4618      	mov	r0, r3
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000336:	2b00      	cmp	r3, #0
 8000338:	db0b      	blt.n	8000352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	f003 021f 	and.w	r2, r3, #31
 8000340:	4907      	ldr	r1, [pc, #28]	@ (8000360 <__NVIC_EnableIRQ+0x38>)
 8000342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000346:	095b      	lsrs	r3, r3, #5
 8000348:	2001      	movs	r0, #1
 800034a:	fa00 f202 	lsl.w	r2, r0, r2
 800034e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	e000e100 	.word	0xe000e100

08000364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	6039      	str	r1, [r7, #0]
 800036e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000374:	2b00      	cmp	r3, #0
 8000376:	db0a      	blt.n	800038e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	b2da      	uxtb	r2, r3
 800037c:	490c      	ldr	r1, [pc, #48]	@ (80003b0 <__NVIC_SetPriority+0x4c>)
 800037e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000382:	0112      	lsls	r2, r2, #4
 8000384:	b2d2      	uxtb	r2, r2
 8000386:	440b      	add	r3, r1
 8000388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800038c:	e00a      	b.n	80003a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	b2da      	uxtb	r2, r3
 8000392:	4908      	ldr	r1, [pc, #32]	@ (80003b4 <__NVIC_SetPriority+0x50>)
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	f003 030f 	and.w	r3, r3, #15
 800039a:	3b04      	subs	r3, #4
 800039c:	0112      	lsls	r2, r2, #4
 800039e:	b2d2      	uxtb	r2, r2
 80003a0:	440b      	add	r3, r1
 80003a2:	761a      	strb	r2, [r3, #24]
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	e000e100 	.word	0xe000e100
 80003b4:	e000ed00 	.word	0xe000ed00

080003b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b089      	sub	sp, #36	@ 0x24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f003 0307 	and.w	r3, r3, #7
 80003ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003cc:	69fb      	ldr	r3, [r7, #28]
 80003ce:	f1c3 0307 	rsb	r3, r3, #7
 80003d2:	2b04      	cmp	r3, #4
 80003d4:	bf28      	it	cs
 80003d6:	2304      	movcs	r3, #4
 80003d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003da:	69fb      	ldr	r3, [r7, #28]
 80003dc:	3304      	adds	r3, #4
 80003de:	2b06      	cmp	r3, #6
 80003e0:	d902      	bls.n	80003e8 <NVIC_EncodePriority+0x30>
 80003e2:	69fb      	ldr	r3, [r7, #28]
 80003e4:	3b03      	subs	r3, #3
 80003e6:	e000      	b.n	80003ea <NVIC_EncodePriority+0x32>
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003ec:	f04f 32ff 	mov.w	r2, #4294967295
 80003f0:	69bb      	ldr	r3, [r7, #24]
 80003f2:	fa02 f303 	lsl.w	r3, r2, r3
 80003f6:	43da      	mvns	r2, r3
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	401a      	ands	r2, r3
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000400:	f04f 31ff 	mov.w	r1, #4294967295
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	fa01 f303 	lsl.w	r3, r1, r3
 800040a:	43d9      	mvns	r1, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000410:	4313      	orrs	r3, r2
         );
}
 8000412:	4618      	mov	r0, r3
 8000414:	3724      	adds	r7, #36	@ 0x24
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
	...

08000420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	3b01      	subs	r3, #1
 800042c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000430:	d301      	bcc.n	8000436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000432:	2301      	movs	r3, #1
 8000434:	e00f      	b.n	8000456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000436:	4a0a      	ldr	r2, [pc, #40]	@ (8000460 <SysTick_Config+0x40>)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3b01      	subs	r3, #1
 800043c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800043e:	210f      	movs	r1, #15
 8000440:	f04f 30ff 	mov.w	r0, #4294967295
 8000444:	f7ff ff8e 	bl	8000364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000448:	4b05      	ldr	r3, [pc, #20]	@ (8000460 <SysTick_Config+0x40>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800044e:	4b04      	ldr	r3, [pc, #16]	@ (8000460 <SysTick_Config+0x40>)
 8000450:	2207      	movs	r2, #7
 8000452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000454:	2300      	movs	r3, #0
}
 8000456:	4618      	mov	r0, r3
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	e000e010 	.word	0xe000e010

08000464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f7ff ff29 	bl	80002c4 <__NVIC_SetPriorityGrouping>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	b086      	sub	sp, #24
 800047e:	af00      	add	r7, sp, #0
 8000480:	4603      	mov	r3, r0
 8000482:	60b9      	str	r1, [r7, #8]
 8000484:	607a      	str	r2, [r7, #4]
 8000486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800048c:	f7ff ff3e 	bl	800030c <__NVIC_GetPriorityGrouping>
 8000490:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	68b9      	ldr	r1, [r7, #8]
 8000496:	6978      	ldr	r0, [r7, #20]
 8000498:	f7ff ff8e 	bl	80003b8 <NVIC_EncodePriority>
 800049c:	4602      	mov	r2, r0
 800049e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004a2:	4611      	mov	r1, r2
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff ff5d 	bl	8000364 <__NVIC_SetPriority>
}
 80004aa:	bf00      	nop
 80004ac:	3718      	adds	r7, #24
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b082      	sub	sp, #8
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	4603      	mov	r3, r0
 80004ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ff31 	bl	8000328 <__NVIC_EnableIRQ>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f7ff ffa2 	bl	8000420 <SysTick_Config>
 80004dc:	4603      	mov	r3, r0
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d101      	bne.n	80004fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80004f6:	2301      	movs	r3, #1
 80004f8:	e098      	b.n	800062c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	461a      	mov	r2, r3
 8000500:	4b4d      	ldr	r3, [pc, #308]	@ (8000638 <HAL_DMA_Init+0x150>)
 8000502:	429a      	cmp	r2, r3
 8000504:	d80f      	bhi.n	8000526 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	461a      	mov	r2, r3
 800050c:	4b4b      	ldr	r3, [pc, #300]	@ (800063c <HAL_DMA_Init+0x154>)
 800050e:	4413      	add	r3, r2
 8000510:	4a4b      	ldr	r2, [pc, #300]	@ (8000640 <HAL_DMA_Init+0x158>)
 8000512:	fba2 2303 	umull	r2, r3, r2, r3
 8000516:	091b      	lsrs	r3, r3, #4
 8000518:	009a      	lsls	r2, r3, #2
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a48      	ldr	r2, [pc, #288]	@ (8000644 <HAL_DMA_Init+0x15c>)
 8000522:	641a      	str	r2, [r3, #64]	@ 0x40
 8000524:	e00e      	b.n	8000544 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	461a      	mov	r2, r3
 800052c:	4b46      	ldr	r3, [pc, #280]	@ (8000648 <HAL_DMA_Init+0x160>)
 800052e:	4413      	add	r3, r2
 8000530:	4a43      	ldr	r2, [pc, #268]	@ (8000640 <HAL_DMA_Init+0x158>)
 8000532:	fba2 2303 	umull	r2, r3, r2, r3
 8000536:	091b      	lsrs	r3, r3, #4
 8000538:	009a      	lsls	r2, r3, #2
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a42      	ldr	r2, [pc, #264]	@ (800064c <HAL_DMA_Init+0x164>)
 8000542:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2202      	movs	r2, #2
 8000548:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800055a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800055e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000568:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	691b      	ldr	r3, [r3, #16]
 800056e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000574:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000580:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6a1b      	ldr	r3, [r3, #32]
 8000586:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	4313      	orrs	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800059e:	d039      	beq.n	8000614 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	4a27      	ldr	r2, [pc, #156]	@ (8000644 <HAL_DMA_Init+0x15c>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d11a      	bne.n	80005e0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80005aa:	4b29      	ldr	r3, [pc, #164]	@ (8000650 <HAL_DMA_Init+0x168>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005b2:	f003 031c 	and.w	r3, r3, #28
 80005b6:	210f      	movs	r1, #15
 80005b8:	fa01 f303 	lsl.w	r3, r1, r3
 80005bc:	43db      	mvns	r3, r3
 80005be:	4924      	ldr	r1, [pc, #144]	@ (8000650 <HAL_DMA_Init+0x168>)
 80005c0:	4013      	ands	r3, r2
 80005c2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80005c4:	4b22      	ldr	r3, [pc, #136]	@ (8000650 <HAL_DMA_Init+0x168>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6859      	ldr	r1, [r3, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d0:	f003 031c 	and.w	r3, r3, #28
 80005d4:	fa01 f303 	lsl.w	r3, r1, r3
 80005d8:	491d      	ldr	r1, [pc, #116]	@ (8000650 <HAL_DMA_Init+0x168>)
 80005da:	4313      	orrs	r3, r2
 80005dc:	600b      	str	r3, [r1, #0]
 80005de:	e019      	b.n	8000614 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80005e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000654 <HAL_DMA_Init+0x16c>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005e8:	f003 031c 	and.w	r3, r3, #28
 80005ec:	210f      	movs	r1, #15
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4917      	ldr	r1, [pc, #92]	@ (8000654 <HAL_DMA_Init+0x16c>)
 80005f6:	4013      	ands	r3, r2
 80005f8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80005fa:	4b16      	ldr	r3, [pc, #88]	@ (8000654 <HAL_DMA_Init+0x16c>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6859      	ldr	r1, [r3, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000606:	f003 031c 	and.w	r3, r3, #28
 800060a:	fa01 f303 	lsl.w	r3, r1, r3
 800060e:	4911      	ldr	r1, [pc, #68]	@ (8000654 <HAL_DMA_Init+0x16c>)
 8000610:	4313      	orrs	r3, r2
 8000612:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2201      	movs	r2, #1
 800061e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800062a:	2300      	movs	r3, #0
}
 800062c:	4618      	mov	r0, r3
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	40020407 	.word	0x40020407
 800063c:	bffdfff8 	.word	0xbffdfff8
 8000640:	cccccccd 	.word	0xcccccccd
 8000644:	40020000 	.word	0x40020000
 8000648:	bffdfbf8 	.word	0xbffdfbf8
 800064c:	40020400 	.word	0x40020400
 8000650:	400200a8 	.word	0x400200a8
 8000654:	400204a8 	.word	0x400204a8

08000658 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
 8000664:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000666:	2300      	movs	r3, #0
 8000668:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000670:	2b01      	cmp	r3, #1
 8000672:	d101      	bne.n	8000678 <HAL_DMA_Start_IT+0x20>
 8000674:	2302      	movs	r3, #2
 8000676:	e04b      	b.n	8000710 <HAL_DMA_Start_IT+0xb8>
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2201      	movs	r2, #1
 800067c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b01      	cmp	r3, #1
 800068a:	d13a      	bne.n	8000702 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2202      	movs	r2, #2
 8000690:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2200      	movs	r2, #0
 8000698:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f022 0201 	bic.w	r2, r2, #1
 80006a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	68b9      	ldr	r1, [r7, #8]
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f000 f8e0 	bl	8000876 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d008      	beq.n	80006d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f042 020e 	orr.w	r2, r2, #14
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	e00f      	b.n	80006f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f022 0204 	bic.w	r2, r2, #4
 80006de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f042 020a 	orr.w	r2, r2, #10
 80006ee:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f042 0201 	orr.w	r2, r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	e005      	b.n	800070e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800070a:	2302      	movs	r3, #2
 800070c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800070e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000734:	f003 031c 	and.w	r3, r3, #28
 8000738:	2204      	movs	r2, #4
 800073a:	409a      	lsls	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4013      	ands	r3, r2
 8000740:	2b00      	cmp	r3, #0
 8000742:	d026      	beq.n	8000792 <HAL_DMA_IRQHandler+0x7a>
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	2b00      	cmp	r3, #0
 800074c:	d021      	beq.n	8000792 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f003 0320 	and.w	r3, r3, #32
 8000758:	2b00      	cmp	r3, #0
 800075a:	d107      	bne.n	800076c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f022 0204 	bic.w	r2, r2, #4
 800076a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000770:	f003 021c 	and.w	r2, r3, #28
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	2104      	movs	r1, #4
 800077a:	fa01 f202 	lsl.w	r2, r1, r2
 800077e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000784:	2b00      	cmp	r3, #0
 8000786:	d071      	beq.n	800086c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000790:	e06c      	b.n	800086c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000796:	f003 031c 	and.w	r3, r3, #28
 800079a:	2202      	movs	r2, #2
 800079c:	409a      	lsls	r2, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	4013      	ands	r3, r2
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d02e      	beq.n	8000804 <HAL_DMA_IRQHandler+0xec>
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	f003 0302 	and.w	r3, r3, #2
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d029      	beq.n	8000804 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d10b      	bne.n	80007d6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f022 020a 	bic.w	r2, r2, #10
 80007cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2201      	movs	r2, #1
 80007d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007da:	f003 021c 	and.w	r2, r3, #28
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e2:	2102      	movs	r1, #2
 80007e4:	fa01 f202 	lsl.w	r2, r1, r2
 80007e8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d038      	beq.n	800086c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000802:	e033      	b.n	800086c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000808:	f003 031c 	and.w	r3, r3, #28
 800080c:	2208      	movs	r2, #8
 800080e:	409a      	lsls	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	4013      	ands	r3, r2
 8000814:	2b00      	cmp	r3, #0
 8000816:	d02a      	beq.n	800086e <HAL_DMA_IRQHandler+0x156>
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	2b00      	cmp	r3, #0
 8000820:	d025      	beq.n	800086e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f022 020e 	bic.w	r2, r2, #14
 8000830:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000836:	f003 021c 	and.w	r2, r3, #28
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083e:	2101      	movs	r1, #1
 8000840:	fa01 f202 	lsl.w	r2, r1, r2
 8000844:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2201      	movs	r2, #1
 800084a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2201      	movs	r2, #1
 8000850:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2200      	movs	r2, #0
 8000858:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000860:	2b00      	cmp	r3, #0
 8000862:	d004      	beq.n	800086e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800086c:	bf00      	nop
 800086e:	bf00      	nop
}
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000876:	b480      	push	{r7}
 8000878:	b085      	sub	sp, #20
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000888:	f003 021c 	and.w	r2, r3, #28
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000890:	2101      	movs	r1, #1
 8000892:	fa01 f202 	lsl.w	r2, r1, r2
 8000896:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	683a      	ldr	r2, [r7, #0]
 800089e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	2b10      	cmp	r3, #16
 80008a6:	d108      	bne.n	80008ba <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	68ba      	ldr	r2, [r7, #8]
 80008b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80008b8:	e007      	b.n	80008ca <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	60da      	str	r2, [r3, #12]
}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d8:	b480      	push	{r7}
 80008da:	b087      	sub	sp, #28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008e6:	e17f      	b.n	8000be8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	2101      	movs	r1, #1
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	4013      	ands	r3, r2
 80008f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	f000 8171 	beq.w	8000be2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f003 0303 	and.w	r3, r3, #3
 8000908:	2b01      	cmp	r3, #1
 800090a:	d005      	beq.n	8000918 <HAL_GPIO_Init+0x40>
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f003 0303 	and.w	r3, r3, #3
 8000914:	2b02      	cmp	r3, #2
 8000916:	d130      	bne.n	800097a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	2203      	movs	r2, #3
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4013      	ands	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68da      	ldr	r2, [r3, #12]
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4313      	orrs	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800094e:	2201      	movs	r2, #1
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4013      	ands	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	091b      	lsrs	r3, r3, #4
 8000964:	f003 0201 	and.w	r2, r3, #1
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4313      	orrs	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f003 0303 	and.w	r3, r3, #3
 8000982:	2b03      	cmp	r3, #3
 8000984:	d118      	bne.n	80009b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800098a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800098c:	2201      	movs	r2, #1
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	f003 0201 	and.w	r2, r3, #1
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f003 0303 	and.w	r3, r3, #3
 80009c0:	2b03      	cmp	r3, #3
 80009c2:	d017      	beq.n	80009f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	2203      	movs	r2, #3
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4013      	ands	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	689a      	ldr	r2, [r3, #8]
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 0303 	and.w	r3, r3, #3
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d123      	bne.n	8000a48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	08da      	lsrs	r2, r3, #3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3208      	adds	r2, #8
 8000a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	f003 0307 	and.w	r3, r3, #7
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	220f      	movs	r2, #15
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4013      	ands	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	691a      	ldr	r2, [r3, #16]
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	08da      	lsrs	r2, r3, #3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3208      	adds	r2, #8
 8000a42:	6939      	ldr	r1, [r7, #16]
 8000a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	2203      	movs	r2, #3
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 0203 	and.w	r2, r3, #3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	f000 80ac 	beq.w	8000be2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8000c08 <HAL_GPIO_Init+0x330>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8e:	4a5e      	ldr	r2, [pc, #376]	@ (8000c08 <HAL_GPIO_Init+0x330>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a96:	4b5c      	ldr	r3, [pc, #368]	@ (8000c08 <HAL_GPIO_Init+0x330>)
 8000a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000aa2:	4a5a      	ldr	r2, [pc, #360]	@ (8000c0c <HAL_GPIO_Init+0x334>)
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	089b      	lsrs	r3, r3, #2
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	f003 0303 	and.w	r3, r3, #3
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	220f      	movs	r2, #15
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000acc:	d025      	beq.n	8000b1a <HAL_GPIO_Init+0x242>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a4f      	ldr	r2, [pc, #316]	@ (8000c10 <HAL_GPIO_Init+0x338>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d01f      	beq.n	8000b16 <HAL_GPIO_Init+0x23e>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a4e      	ldr	r2, [pc, #312]	@ (8000c14 <HAL_GPIO_Init+0x33c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d019      	beq.n	8000b12 <HAL_GPIO_Init+0x23a>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a4d      	ldr	r2, [pc, #308]	@ (8000c18 <HAL_GPIO_Init+0x340>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d013      	beq.n	8000b0e <HAL_GPIO_Init+0x236>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a4c      	ldr	r2, [pc, #304]	@ (8000c1c <HAL_GPIO_Init+0x344>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d00d      	beq.n	8000b0a <HAL_GPIO_Init+0x232>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a4b      	ldr	r2, [pc, #300]	@ (8000c20 <HAL_GPIO_Init+0x348>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d007      	beq.n	8000b06 <HAL_GPIO_Init+0x22e>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a4a      	ldr	r2, [pc, #296]	@ (8000c24 <HAL_GPIO_Init+0x34c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d101      	bne.n	8000b02 <HAL_GPIO_Init+0x22a>
 8000afe:	2306      	movs	r3, #6
 8000b00:	e00c      	b.n	8000b1c <HAL_GPIO_Init+0x244>
 8000b02:	2307      	movs	r3, #7
 8000b04:	e00a      	b.n	8000b1c <HAL_GPIO_Init+0x244>
 8000b06:	2305      	movs	r3, #5
 8000b08:	e008      	b.n	8000b1c <HAL_GPIO_Init+0x244>
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	e006      	b.n	8000b1c <HAL_GPIO_Init+0x244>
 8000b0e:	2303      	movs	r3, #3
 8000b10:	e004      	b.n	8000b1c <HAL_GPIO_Init+0x244>
 8000b12:	2302      	movs	r3, #2
 8000b14:	e002      	b.n	8000b1c <HAL_GPIO_Init+0x244>
 8000b16:	2301      	movs	r3, #1
 8000b18:	e000      	b.n	8000b1c <HAL_GPIO_Init+0x244>
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	f002 0203 	and.w	r2, r2, #3
 8000b22:	0092      	lsls	r2, r2, #2
 8000b24:	4093      	lsls	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b2c:	4937      	ldr	r1, [pc, #220]	@ (8000c0c <HAL_GPIO_Init+0x334>)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	3302      	adds	r3, #2
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c28 <HAL_GPIO_Init+0x350>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b5e:	4a32      	ldr	r2, [pc, #200]	@ (8000c28 <HAL_GPIO_Init+0x350>)
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b64:	4b30      	ldr	r3, [pc, #192]	@ (8000c28 <HAL_GPIO_Init+0x350>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d003      	beq.n	8000b88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b88:	4a27      	ldr	r2, [pc, #156]	@ (8000c28 <HAL_GPIO_Init+0x350>)
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b8e:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <HAL_GPIO_Init+0x350>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	43db      	mvns	r3, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8000c28 <HAL_GPIO_Init+0x350>)
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <HAL_GPIO_Init+0x350>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d003      	beq.n	8000bdc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bdc:	4a12      	ldr	r2, [pc, #72]	@ (8000c28 <HAL_GPIO_Init+0x350>)
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f47f ae78 	bne.w	80008e8 <HAL_GPIO_Init+0x10>
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	371c      	adds	r7, #28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40010000 	.word	0x40010000
 8000c10:	48000400 	.word	0x48000400
 8000c14:	48000800 	.word	0x48000800
 8000c18:	48000c00 	.word	0x48000c00
 8000c1c:	48001000 	.word	0x48001000
 8000c20:	48001400 	.word	0x48001400
 8000c24:	48001800 	.word	0x48001800
 8000c28:	40010400 	.word	0x40010400

08000c2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e0be      	b.n	8000dbc <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d108      	bne.n	8000c58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000c4e:	d009      	beq.n	8000c64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
 8000c56:	e005      	b.n	8000c64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d106      	bne.n	8000c7e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 f8a3 	bl	8000dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2202      	movs	r2, #2
 8000c82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000c94:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8000c9e:	d902      	bls.n	8000ca6 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	e002      	b.n	8000cac <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000ca6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000caa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8000cb4:	d007      	beq.n	8000cc6 <HAL_SPI_Init+0x9a>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8000cbe:	d002      	beq.n	8000cc6 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	431a      	orrs	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d08:	ea42 0103 	orr.w	r1, r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d24:	d11b      	bne.n	8000d5e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10b      	bne.n	8000d46 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8000d36:	d903      	bls.n	8000d40 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d3e:	e002      	b.n	8000d46 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2201      	movs	r2, #1
 8000d44:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d107      	bne.n	8000d5e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000d5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	0c1b      	lsrs	r3, r3, #16
 8000d64:	f003 0204 	and.w	r2, r3, #4
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	431a      	orrs	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000d84:	ea42 0103 	orr.w	r1, r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	430a      	orrs	r2, r1
 8000d94:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d9e:	d105      	bne.n	8000dac <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	b292      	uxth	r2, r2
 8000daa:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d101      	bne.n	8000df8 <HAL_SPI_TransmitReceive_DMA+0x20>
 8000df4:	2302      	movs	r3, #2
 8000df6:	e179      	b.n	80010ec <HAL_SPI_TransmitReceive_DMA+0x314>
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8000e06:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8000e0e:	7dbb      	ldrb	r3, [r7, #22]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d00d      	beq.n	8000e30 <HAL_SPI_TransmitReceive_DMA+0x58>
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000e1a:	d106      	bne.n	8000e2a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <HAL_SPI_TransmitReceive_DMA+0x52>
 8000e24:	7dbb      	ldrb	r3, [r7, #22]
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	d002      	beq.n	8000e30 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8000e2e:	e158      	b.n	80010e2 <HAL_SPI_TransmitReceive_DMA+0x30a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d005      	beq.n	8000e42 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d002      	beq.n	8000e42 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8000e3c:	887b      	ldrh	r3, [r7, #2]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d102      	bne.n	8000e48 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8000e46:	e14c      	b.n	80010e2 <HAL_SPI_TransmitReceive_DMA+0x30a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d003      	beq.n	8000e5c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2205      	movs	r2, #5
 8000e58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	887a      	ldrh	r2, [r7, #2]
 8000e72:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	887a      	ldrh	r2, [r7, #2]
 8000e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	887a      	ldrh	r2, [r7, #2]
 8000e86:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2200      	movs	r2, #0
 8000e94:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e9e:	d10f      	bne.n	8000ec0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  {
    SPI_RESET_CRC(hspi);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000ebe:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8000ece:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8000ed8:	d908      	bls.n	8000eec <HAL_SPI_TransmitReceive_DMA+0x114>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	e06f      	b.n	8000fcc <HAL_SPI_TransmitReceive_DMA+0x1f4>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000efa:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f06:	d126      	bne.n	8000f56 <HAL_SPI_TransmitReceive_DMA+0x17e>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10f      	bne.n	8000f34 <HAL_SPI_TransmitReceive_DMA+0x15c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000f22:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	085b      	lsrs	r3, r3, #1
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8000f32:	e010      	b.n	8000f56 <HAL_SPI_TransmitReceive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000f42:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	085b      	lsrs	r3, r3, #1
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	3301      	adds	r3, #1
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f60:	d134      	bne.n	8000fcc <HAL_SPI_TransmitReceive_DMA+0x1f4>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000f70:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d111      	bne.n	8000fa6 <HAL_SPI_TransmitReceive_DMA+0x1ce>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000f90:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	085b      	lsrs	r3, r3, #1
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8000fa4:	e012      	b.n	8000fcc <HAL_SPI_TransmitReceive_DMA+0x1f4>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000fb4:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	085b      	lsrs	r3, r3, #1
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d108      	bne.n	8000fea <HAL_SPI_TransmitReceive_DMA+0x212>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fdc:	4a45      	ldr	r2, [pc, #276]	@ (80010f4 <HAL_SPI_TransmitReceive_DMA+0x31c>)
 8000fde:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe4:	4a44      	ldr	r2, [pc, #272]	@ (80010f8 <HAL_SPI_TransmitReceive_DMA+0x320>)
 8000fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fe8:	e007      	b.n	8000ffa <HAL_SPI_TransmitReceive_DMA+0x222>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fee:	4a43      	ldr	r2, [pc, #268]	@ (80010fc <HAL_SPI_TransmitReceive_DMA+0x324>)
 8000ff0:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff6:	4a42      	ldr	r2, [pc, #264]	@ (8001100 <HAL_SPI_TransmitReceive_DMA+0x328>)
 8000ff8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffe:	4a41      	ldr	r2, [pc, #260]	@ (8001104 <HAL_SPI_TransmitReceive_DMA+0x32c>)
 8001000:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001006:	2200      	movs	r2, #0
 8001008:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	330c      	adds	r3, #12
 8001014:	4619      	mov	r1, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001022:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001024:	f7ff fb18 	bl	8000658 <HAL_DMA_Start_IT>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d008      	beq.n	8001040 <HAL_SPI_TransmitReceive_DMA+0x268>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001032:	f043 0210 	orr.w	r2, r3, #16
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800103e:	e050      	b.n	80010e2 <HAL_SPI_TransmitReceive_DMA+0x30a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0201 	orr.w	r2, r2, #1
 800104e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001054:	2200      	movs	r2, #0
 8001056:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800105c:	2200      	movs	r2, #0
 800105e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001064:	2200      	movs	r2, #0
 8001066:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800106c:	2200      	movs	r2, #0
 800106e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001078:	4619      	mov	r1, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	330c      	adds	r3, #12
 8001080:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001086:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001088:	f7ff fae6 	bl	8000658 <HAL_DMA_Start_IT>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d008      	beq.n	80010a4 <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001096:	f043 0210 	orr.w	r2, r3, #16
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	75fb      	strb	r3, [r7, #23]

    goto error;
 80010a2:	e01e      	b.n	80010e2 <HAL_SPI_TransmitReceive_DMA+0x30a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ae:	2b40      	cmp	r3, #64	@ 0x40
 80010b0:	d007      	beq.n	80010c2 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010c0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f042 0220 	orr.w	r2, r2, #32
 80010d0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 0202 	orr.w	r2, r2, #2
 80010e0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	0800140f 	.word	0x0800140f
 80010f8:	0800116d 	.word	0x0800116d
 80010fc:	0800142b 	.word	0x0800142b
 8001100:	080012cb 	.word	0x080012cb
 8001104:	08001447 	.word	0x08001447

08001108 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af02      	add	r7, sp, #8
 8001172:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001178:	61fb      	str	r3, [r7, #28]
  uint32_t tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	73fb      	strb	r3, [r7, #15]
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001182:	f7ff f893 	bl	80002ac <HAL_GetTick>
 8001186:	61b8      	str	r0, [r7, #24]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0320 	and.w	r3, r3, #32
 8001192:	2b20      	cmp	r3, #32
 8001194:	f000 8093 	beq.w	80012be <SPI_DMAReceiveCplt+0x152>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0220 	bic.w	r2, r2, #32
 80011a6:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
    /* CRC handling */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011b0:	d13e      	bne.n	8001230 <SPI_DMAReceiveCplt+0xc4>
    {
      /* Wait until RXNE flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2364      	movs	r3, #100	@ 0x64
 80011b8:	2201      	movs	r2, #1
 80011ba:	2101      	movs	r1, #1
 80011bc:	69f8      	ldr	r0, [r7, #28]
 80011be:	f000 f963 	bl	8001488 <SPI_WaitFlagStateUntilTimeout>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <SPI_DMAReceiveCplt+0x68>
      {
        /* Error on the CRC reception */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011cc:	f043 0202 	orr.w	r2, r3, #2
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      /* Read CRC */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80011dc:	d905      	bls.n	80011ea <SPI_DMAReceiveCplt+0x7e>
      {
        /* Read 16bit CRC */
        tmpreg = READ_REG(hspi->Instance->DR);
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	613b      	str	r3, [r7, #16]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	e022      	b.n	8001230 <SPI_DMAReceiveCplt+0xc4>
      }
      else
      {
        /* Initialize the 8bit temporary pointer */
        ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	330c      	adds	r3, #12
 80011f0:	617b      	str	r3, [r7, #20]
        /* Read 8bit CRC */
        tmpreg8 = *ptmpreg8;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	73fb      	strb	r3, [r7, #15]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80011fa:	7bfb      	ldrb	r3, [r7, #15]

        if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001200:	2b02      	cmp	r3, #2
 8001202:	d115      	bne.n	8001230 <SPI_DMAReceiveCplt+0xc4>
        {
          if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2364      	movs	r3, #100	@ 0x64
 800120a:	2201      	movs	r2, #1
 800120c:	2101      	movs	r1, #1
 800120e:	69f8      	ldr	r0, [r7, #28]
 8001210:	f000 f93a 	bl	8001488 <SPI_WaitFlagStateUntilTimeout>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <SPI_DMAReceiveCplt+0xba>
          {
            /* Error on the CRC reception */
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800121e:	f043 0202 	orr.w	r2, r3, #2
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
          tmpreg8 = *ptmpreg8;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	73fb      	strb	r3, [r7, #15]
          /* To avoid GCC warning */
          UNUSED(tmpreg8);
 800122e:	7bfb      	ldrb	r3, [r7, #15]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10d      	bne.n	8001254 <SPI_DMAReceiveCplt+0xe8>
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001240:	d108      	bne.n	8001254 <SPI_DMAReceiveCplt+0xe8>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0203 	bic.w	r2, r2, #3
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	e007      	b.n	8001264 <SPI_DMAReceiveCplt+0xf8>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0201 	bic.w	r2, r2, #1
 8001262:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	2164      	movs	r1, #100	@ 0x64
 8001268:	69f8      	ldr	r0, [r7, #28]
 800126a:	f000 fa2b 	bl	80016c4 <SPI_EndRxTransaction>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <SPI_DMAReceiveCplt+0x10e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	2220      	movs	r2, #32
 8001278:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	2200      	movs	r2, #0
 800127e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 0310 	and.w	r3, r3, #16
 8001294:	2b10      	cmp	r3, #16
 8001296:	d10a      	bne.n	80012ae <SPI_DMAReceiveCplt+0x142>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129c:	f043 0202 	orr.w	r2, r3, #2
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80012ac:	609a      	str	r2, [r3, #8]
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <SPI_DMAReceiveCplt+0x152>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80012b6:	69f8      	ldr	r0, [r7, #28]
 80012b8:	f7ff ff4e 	bl	8001158 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80012bc:	e002      	b.n	80012c4 <SPI_DMAReceiveCplt+0x158>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80012be:	69f8      	ldr	r0, [r7, #28]
 80012c0:	f7ff ff22 	bl	8001108 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b08a      	sub	sp, #40	@ 0x28
 80012ce:	af02      	add	r7, sp, #8
 80012d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d6:	61fb      	str	r3, [r7, #28]
  uint32_t tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80012e0:	f7fe ffe4 	bl	80002ac <HAL_GetTick>
 80012e4:	61b8      	str	r0, [r7, #24]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0320 	and.w	r3, r3, #32
 80012f0:	2b20      	cmp	r3, #32
 80012f2:	f000 8086 	beq.w	8001402 <SPI_DMATransmitReceiveCplt+0x138>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0220 	bic.w	r2, r2, #32
 8001304:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
    /* CRC handling */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800130a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800130e:	d13d      	bne.n	800138c <SPI_DMATransmitReceiveCplt+0xc2>
    {
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_8BIT))
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001318:	d120      	bne.n	800135c <SPI_DMATransmitReceiveCplt+0x92>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	2b01      	cmp	r3, #1
 8001320:	d11c      	bne.n	800135c <SPI_DMATransmitReceiveCplt+0x92>
      {
        if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_QUARTER_FULL, SPI_DEFAULT_TIMEOUT,
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2364      	movs	r3, #100	@ 0x64
 8001328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800132c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8001330:	69f8      	ldr	r0, [r7, #28]
 8001332:	f000 f931 	bl	8001598 <SPI_WaitFifoStateUntilTimeout>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <SPI_DMATransmitReceiveCplt+0x7e>
                                          tickstart) != HAL_OK)
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001340:	f043 0202 	orr.w	r2, r3, #2
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	661a      	str	r2, [r3, #96]	@ 0x60
        }
        /* Initialize the 8bit temporary pointer */
        ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	330c      	adds	r3, #12
 800134e:	617b      	str	r3, [r7, #20]
        /* Read 8bit CRC */
        tmpreg8 = *ptmpreg8;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	73fb      	strb	r3, [r7, #15]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	e017      	b.n	800138c <SPI_DMATransmitReceiveCplt+0xc2>
      }
      else
      {
        if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_HALF_FULL, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2364      	movs	r3, #100	@ 0x64
 8001362:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001366:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800136a:	69f8      	ldr	r0, [r7, #28]
 800136c:	f000 f914 	bl	8001598 <SPI_WaitFifoStateUntilTimeout>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <SPI_DMATransmitReceiveCplt+0xb8>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137a:	f043 0202 	orr.w	r2, r3, #2
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	661a      	str	r2, [r3, #96]	@ 0x60
        }
        /* Read CRC to Flush DR and RXNE flag */
        tmpreg = READ_REG(hspi->Instance->DR);
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	613b      	str	r3, [r7, #16]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 800138a:	693b      	ldr	r3, [r7, #16]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	2164      	movs	r1, #100	@ 0x64
 8001390:	69f8      	ldr	r0, [r7, #28]
 8001392:	f000 f9ef 	bl	8001774 <SPI_EndRxTxTransaction>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <SPI_DMATransmitReceiveCplt+0xde>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013a0:	f043 0220 	orr.w	r2, r3, #32
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0203 	bic.w	r2, r2, #3
 80013b6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	2200      	movs	r2, #0
 80013bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 0310 	and.w	r3, r3, #16
 80013d8:	2b10      	cmp	r3, #16
 80013da:	d10a      	bne.n	80013f2 <SPI_DMATransmitReceiveCplt+0x128>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e0:	f043 0202 	orr.w	r2, r3, #2
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80013f0:	609a      	str	r2, [r3, #8]
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <SPI_DMATransmitReceiveCplt+0x138>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80013fa:	69f8      	ldr	r0, [r7, #28]
 80013fc:	f7ff feac 	bl	8001158 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8001400:	e002      	b.n	8001408 <SPI_DMATransmitReceiveCplt+0x13e>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8001402:	69f8      	ldr	r0, [r7, #28]
 8001404:	f7ff fe8a 	bl	800111c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800141a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f7ff fe87 	bl	8001130 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001436:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f7ff fe83 	bl	8001144 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001452:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0203 	bic.w	r2, r2, #3
 8001462:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001468:	f043 0210 	orr.w	r2, r3, #16
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f7ff fe6d 	bl	8001158 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	4613      	mov	r3, r2
 8001496:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001498:	f7fe ff08 	bl	80002ac <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a0:	1a9b      	subs	r3, r3, r2
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80014a8:	f7fe ff00 	bl	80002ac <HAL_GetTick>
 80014ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80014ae:	4b39      	ldr	r3, [pc, #228]	@ (8001594 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	015b      	lsls	r3, r3, #5
 80014b4:	0d1b      	lsrs	r3, r3, #20
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80014be:	e054      	b.n	800156a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c6:	d050      	beq.n	800156a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80014c8:	f7fe fef0 	bl	80002ac <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	69fa      	ldr	r2, [r7, #28]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d902      	bls.n	80014de <SPI_WaitFlagStateUntilTimeout+0x56>
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d13d      	bne.n	800155a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80014ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80014f6:	d111      	bne.n	800151c <SPI_WaitFlagStateUntilTimeout+0x94>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001500:	d004      	beq.n	800150c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800150a:	d107      	bne.n	800151c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800151a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001524:	d10f      	bne.n	8001546 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001544:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e017      	b.n	800158a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3b01      	subs	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4013      	ands	r3, r2
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	429a      	cmp	r2, r3
 8001578:	bf0c      	ite	eq
 800157a:	2301      	moveq	r3, #1
 800157c:	2300      	movne	r3, #0
 800157e:	b2db      	uxtb	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	429a      	cmp	r2, r3
 8001586:	d19b      	bne.n	80014c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3720      	adds	r7, #32
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000014 	.word	0x20000014

08001598 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80015aa:	f7fe fe7f 	bl	80002ac <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80015ba:	f7fe fe77 	bl	80002ac <HAL_GetTick>
 80015be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	330c      	adds	r3, #12
 80015c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80015c8:	4b3d      	ldr	r3, [pc, #244]	@ (80016c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00da      	lsls	r2, r3, #3
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	0d1b      	lsrs	r3, r3, #20
 80015d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80015e0:	e060      	b.n	80016a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80015e8:	d107      	bne.n	80015fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d104      	bne.n	80015fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80015f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d050      	beq.n	80016a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001602:	f7fe fe53 	bl	80002ac <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800160e:	429a      	cmp	r2, r3
 8001610:	d902      	bls.n	8001618 <SPI_WaitFifoStateUntilTimeout+0x80>
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	2b00      	cmp	r3, #0
 8001616:	d13d      	bne.n	8001694 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001626:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001630:	d111      	bne.n	8001656 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800163a:	d004      	beq.n	8001646 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001644:	d107      	bne.n	8001656 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001654:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800165e:	d10f      	bne.n	8001680 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800167e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e010      	b.n	80016b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	4013      	ands	r3, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d196      	bne.n	80015e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3728      	adds	r7, #40	@ 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000014 	.word	0x20000014

080016c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80016d8:	d111      	bne.n	80016fe <SPI_EndRxTransaction+0x3a>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016e2:	d004      	beq.n	80016ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016ec:	d107      	bne.n	80016fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016fc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	@ 0x80
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f7ff febd 	bl	8001488 <SPI_WaitFlagStateUntilTimeout>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d007      	beq.n	8001724 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001718:	f043 0220 	orr.w	r2, r3, #32
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e023      	b.n	800176c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800172c:	d11d      	bne.n	800176a <SPI_EndRxTransaction+0xa6>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001736:	d004      	beq.n	8001742 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001740:	d113      	bne.n	800176a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f7ff ff22 	bl	8001598 <SPI_WaitFifoStateUntilTimeout>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d007      	beq.n	800176a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175e:	f043 0220 	orr.w	r2, r3, #32
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e000      	b.n	800176c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af02      	add	r7, sp, #8
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f7ff ff03 	bl	8001598 <SPI_WaitFifoStateUntilTimeout>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d007      	beq.n	80017a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179c:	f043 0220 	orr.w	r2, r3, #32
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e027      	b.n	80017f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2200      	movs	r2, #0
 80017b0:	2180      	movs	r1, #128	@ 0x80
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f7ff fe68 	bl	8001488 <SPI_WaitFlagStateUntilTimeout>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d007      	beq.n	80017ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c2:	f043 0220 	orr.w	r2, r3, #32
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e014      	b.n	80017f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f7ff fedc 	bl	8001598 <SPI_WaitFifoStateUntilTimeout>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ea:	f043 0220 	orr.w	r2, r3, #32
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e000      	b.n	80017f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d020      	beq.n	8001864 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d01b      	beq.n	8001864 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f06f 0202 	mvn.w	r2, #2
 8001834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f8ee 	bl	8001a2c <HAL_TIM_IC_CaptureCallback>
 8001850:	e005      	b.n	800185e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f8e0 	bl	8001a18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f8f1 	bl	8001a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	d020      	beq.n	80018b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d01b      	beq.n	80018b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f06f 0204 	mvn.w	r2, #4
 8001880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2202      	movs	r2, #2
 8001886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f8c8 	bl	8001a2c <HAL_TIM_IC_CaptureCallback>
 800189c:	e005      	b.n	80018aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f8ba 	bl	8001a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f8cb 	bl	8001a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d020      	beq.n	80018fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d01b      	beq.n	80018fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f06f 0208 	mvn.w	r2, #8
 80018cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2204      	movs	r2, #4
 80018d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f8a2 	bl	8001a2c <HAL_TIM_IC_CaptureCallback>
 80018e8:	e005      	b.n	80018f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f894 	bl	8001a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f8a5 	bl	8001a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	2b00      	cmp	r3, #0
 8001904:	d020      	beq.n	8001948 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	2b00      	cmp	r3, #0
 800190e:	d01b      	beq.n	8001948 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f06f 0210 	mvn.w	r2, #16
 8001918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2208      	movs	r2, #8
 800191e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f87c 	bl	8001a2c <HAL_TIM_IC_CaptureCallback>
 8001934:	e005      	b.n	8001942 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f86e 	bl	8001a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f87f 	bl	8001a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00c      	beq.n	800196c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f06f 0201 	mvn.w	r2, #1
 8001964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f84c 	bl	8001a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00c      	beq.n	8001990 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f876 	bl	8001a7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00c      	beq.n	80019b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d007      	beq.n	80019b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80019ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f86e 	bl	8001a90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00c      	beq.n	80019d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80019d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f83e 	bl	8001a54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00c      	beq.n	80019fc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0320 	and.w	r3, r3, #32
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d007      	beq.n	80019fc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f06f 0220 	mvn.w	r2, #32
 80019f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f836 	bl	8001a68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <main>:
uint8_t tx_buffer[10] = {0,1,2,3,4,5,6,7,8,9};
uint8_t rx_buffer[10];


int main()
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	HAL_Init();
 8001aa8:	f7fe fb90 	bl	80001cc <HAL_Init>
	spi1_init();
 8001aac:	f000 f80e 	bl	8001acc <spi1_init>

	HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buffer, rx_buffer, 10);
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	4a03      	ldr	r2, [pc, #12]	@ (8001ac0 <main+0x1c>)
 8001ab4:	4903      	ldr	r1, [pc, #12]	@ (8001ac4 <main+0x20>)
 8001ab6:	4804      	ldr	r0, [pc, #16]	@ (8001ac8 <main+0x24>)
 8001ab8:	f7ff f98e 	bl	8000dd8 <HAL_SPI_TransmitReceive_DMA>

	while(1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <main+0x18>
 8001ac0:	2000012c 	.word	0x2000012c
 8001ac4:	20000008 	.word	0x20000008
 8001ac8:	20000038 	.word	0x20000038

08001acc <spi1_init>:
	{

	}
}

void spi1_init(void){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct={0};
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]
	__HAL_RCC_SPI1_CLK_ENABLE();
 8001ae2:	4b59      	ldr	r3, [pc, #356]	@ (8001c48 <spi1_init+0x17c>)
 8001ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae6:	4a58      	ldr	r2, [pc, #352]	@ (8001c48 <spi1_init+0x17c>)
 8001ae8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001aec:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aee:	4b56      	ldr	r3, [pc, #344]	@ (8001c48 <spi1_init+0x17c>)
 8001af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b53      	ldr	r3, [pc, #332]	@ (8001c48 <spi1_init+0x17c>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afe:	4a52      	ldr	r2, [pc, #328]	@ (8001c48 <spi1_init+0x17c>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b06:	4b50      	ldr	r3, [pc, #320]	@ (8001c48 <spi1_init+0x17c>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]

	/*pa5-spi1_sck
	 * pa6-spi1_miso
	 * pa7-spi1_mosi*/

	GPIO_InitStruct.Pin= GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b12:	23e0      	movs	r3, #224	@ 0xe0
 8001b14:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode=GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate=GPIO_AF5_SPI1;
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull=GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b30:	f7fe fed2 	bl	80008d8 <HAL_GPIO_Init>


	hspi1.Instance=SPI1;
 8001b34:	4b45      	ldr	r3, [pc, #276]	@ (8001c4c <spi1_init+0x180>)
 8001b36:	4a46      	ldr	r2, [pc, #280]	@ (8001c50 <spi1_init+0x184>)
 8001b38:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b3a:	4b44      	ldr	r3, [pc, #272]	@ (8001c4c <spi1_init+0x180>)
 8001b3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b40:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b42:	4b42      	ldr	r3, [pc, #264]	@ (8001c4c <spi1_init+0x180>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b48:	4b40      	ldr	r3, [pc, #256]	@ (8001c4c <spi1_init+0x180>)
 8001b4a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001b4e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;		//CPOL = 0;
 8001b50:	4b3e      	ldr	r3, [pc, #248]	@ (8001c4c <spi1_init+0x180>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;	//CPHA = 0
 8001b56:	4b3d      	ldr	r3, [pc, #244]	@ (8001c4c <spi1_init+0x180>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;				//Software Mode
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c4c <spi1_init+0x180>)
 8001b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b62:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b64:	4b39      	ldr	r3, [pc, #228]	@ (8001c4c <spi1_init+0x180>)
 8001b66:	2210      	movs	r2, #16
 8001b68:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b6a:	4b38      	ldr	r3, [pc, #224]	@ (8001c4c <spi1_init+0x180>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b70:	4b36      	ldr	r3, [pc, #216]	@ (8001c4c <spi1_init+0x180>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b76:	4b35      	ldr	r3, [pc, #212]	@ (8001c4c <spi1_init+0x180>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_SPI_Init(&hspi1);
 8001b7c:	4833      	ldr	r0, [pc, #204]	@ (8001c4c <spi1_init+0x180>)
 8001b7e:	f7ff f855 	bl	8000c2c <HAL_SPI_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001b82:	4b31      	ldr	r3, [pc, #196]	@ (8001c48 <spi1_init+0x17c>)
 8001b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b86:	4a30      	ldr	r2, [pc, #192]	@ (8001c48 <spi1_init+0x17c>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c48 <spi1_init+0x17c>)
 8001b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]

	hdma_spi1_rx.Instance= DMA1_Channel2;
 8001b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c54 <spi1_init+0x188>)
 8001b9c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c58 <spi1_init+0x18c>)
 8001b9e:	601a      	str	r2, [r3, #0]
	hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8001ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c54 <spi1_init+0x188>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	605a      	str	r2, [r3, #4]
	hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c54 <spi1_init+0x188>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
	hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bac:	4b29      	ldr	r3, [pc, #164]	@ (8001c54 <spi1_init+0x188>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
	hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bb2:	4b28      	ldr	r3, [pc, #160]	@ (8001c54 <spi1_init+0x188>)
 8001bb4:	2280      	movs	r2, #128	@ 0x80
 8001bb6:	611a      	str	r2, [r3, #16]
	hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb8:	4b26      	ldr	r3, [pc, #152]	@ (8001c54 <spi1_init+0x188>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
	hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bbe:	4b25      	ldr	r3, [pc, #148]	@ (8001c54 <spi1_init+0x188>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
	hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001bc4:	4b23      	ldr	r3, [pc, #140]	@ (8001c54 <spi1_init+0x188>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
	hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bca:	4b22      	ldr	r3, [pc, #136]	@ (8001c54 <spi1_init+0x188>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]

	HAL_DMA_Init(&hdma_spi1_rx);
 8001bd0:	4820      	ldr	r0, [pc, #128]	@ (8001c54 <spi1_init+0x188>)
 8001bd2:	f7fe fc89 	bl	80004e8 <HAL_DMA_Init>
	hspi1.hdmarx = &hdma_spi1_rx;
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c4c <spi1_init+0x180>)
 8001bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8001c54 <spi1_init+0x188>)
 8001bda:	659a      	str	r2, [r3, #88]	@ 0x58

	//Enable DMA for SPI1_tx
	hdma_spi1_tx.Instance = DMA1_Channel3;
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c5c <spi1_init+0x190>)
 8001bde:	4a20      	ldr	r2, [pc, #128]	@ (8001c60 <spi1_init+0x194>)
 8001be0:	601a      	str	r2, [r3, #0]
	hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001be2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <spi1_init+0x190>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	605a      	str	r2, [r3, #4]
	hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001be8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c5c <spi1_init+0x190>)
 8001bea:	2210      	movs	r2, #16
 8001bec:	609a      	str	r2, [r3, #8]
	hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bee:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <spi1_init+0x190>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
	hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bf4:	4b19      	ldr	r3, [pc, #100]	@ (8001c5c <spi1_init+0x190>)
 8001bf6:	2280      	movs	r2, #128	@ 0x80
 8001bf8:	611a      	str	r2, [r3, #16]
	hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bfa:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <spi1_init+0x190>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	615a      	str	r2, [r3, #20]
	hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c00:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <spi1_init+0x190>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]
	hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <spi1_init+0x190>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	61da      	str	r2, [r3, #28]
	hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c0c:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <spi1_init+0x190>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]

	HAL_DMA_Init(&hdma_spi1_tx);
 8001c12:	4812      	ldr	r0, [pc, #72]	@ (8001c5c <spi1_init+0x190>)
 8001c14:	f7fe fc68 	bl	80004e8 <HAL_DMA_Init>
	hspi1.hdmatx = &hdma_spi1_tx;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <spi1_init+0x180>)
 8001c1a:	4a10      	ldr	r2, [pc, #64]	@ (8001c5c <spi1_init+0x190>)
 8001c1c:	655a      	str	r2, [r3, #84]	@ 0x54

	//Enable Interrupts
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	200c      	movs	r0, #12
 8001c24:	f7fe fc29 	bl	800047a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c28:	200c      	movs	r0, #12
 8001c2a:	f7fe fc42 	bl	80004b2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2100      	movs	r1, #0
 8001c32:	200d      	movs	r0, #13
 8001c34:	f7fe fc21 	bl	800047a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c38:	200d      	movs	r0, #13
 8001c3a:	f7fe fc3a 	bl	80004b2 <HAL_NVIC_EnableIRQ>



}
 8001c3e:	bf00      	nop
 8001c40:	3720      	adds	r7, #32
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	20000038 	.word	0x20000038
 8001c50:	40013000 	.word	0x40013000
 8001c54:	200000e4 	.word	0x200000e4
 8001c58:	4002001c 	.word	0x4002001c
 8001c5c:	2000009c 	.word	0x2000009c
 8001c60:	40020030 	.word	0x40020030

08001c64 <DMA1_CH2_IRQHandler>:

void DMA1_CH2_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001c68:	4802      	ldr	r0, [pc, #8]	@ (8001c74 <DMA1_CH2_IRQHandler+0x10>)
 8001c6a:	f7fe fd55 	bl	8000718 <HAL_DMA_IRQHandler>
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200000e4 	.word	0x200000e4

08001c78 <DMA1_CH3_IRQHandler>:
void DMA1_CH3_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001c7c:	4802      	ldr	r0, [pc, #8]	@ (8001c88 <DMA1_CH3_IRQHandler+0x10>)
 8001c7e:	f7fe fd4b 	bl	8000718 <HAL_DMA_IRQHandler>
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000009c 	.word	0x2000009c

08001c8c <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001c90:	f7fe faf8 	bl	8000284 <HAL_IncTick>
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <TIM3_IRQHandler>:
	HAL_NVIC_EnableIRQ(TIMx_IRQn);

	HAL_TIM_Base_Start_IT(&TimHandle);
}

void TIMx_IRQHandler(void){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 8001c9c:	4802      	ldr	r0, [pc, #8]	@ (8001ca8 <TIM3_IRQHandler+0x10>)
 8001c9e:	f7ff fdaf 	bl	8001800 <HAL_TIM_IRQHandler>
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000138 	.word	0x20000138

08001cac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cac:	480d      	ldr	r0, [pc, #52]	@ (8001ce4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cb0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb4:	480c      	ldr	r0, [pc, #48]	@ (8001ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cb6:	490d      	ldr	r1, [pc, #52]	@ (8001cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf0 <LoopForever+0xe>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ccc:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf8 <LoopForever+0x16>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001cda:	f000 f811 	bl	8001d00 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8001cde:	f7ff fee1 	bl	8001aa4 <main>

08001ce2 <LoopForever>:

LoopForever:
  b LoopForever
 8001ce2:	e7fe      	b.n	8001ce2 <LoopForever>
  ldr   r0, =_estack
 8001ce4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001cf0:	08001d68 	.word	0x08001d68
  ldr r2, =_sbss
 8001cf4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001cf8:	20000184 	.word	0x20000184

08001cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC1_2_IRQHandler>
	...

08001d00 <__libc_init_array>:
 8001d00:	b570      	push	{r4, r5, r6, lr}
 8001d02:	4d0d      	ldr	r5, [pc, #52]	@ (8001d38 <__libc_init_array+0x38>)
 8001d04:	4c0d      	ldr	r4, [pc, #52]	@ (8001d3c <__libc_init_array+0x3c>)
 8001d06:	1b64      	subs	r4, r4, r5
 8001d08:	10a4      	asrs	r4, r4, #2
 8001d0a:	2600      	movs	r6, #0
 8001d0c:	42a6      	cmp	r6, r4
 8001d0e:	d109      	bne.n	8001d24 <__libc_init_array+0x24>
 8001d10:	4d0b      	ldr	r5, [pc, #44]	@ (8001d40 <__libc_init_array+0x40>)
 8001d12:	4c0c      	ldr	r4, [pc, #48]	@ (8001d44 <__libc_init_array+0x44>)
 8001d14:	f000 f818 	bl	8001d48 <_init>
 8001d18:	1b64      	subs	r4, r4, r5
 8001d1a:	10a4      	asrs	r4, r4, #2
 8001d1c:	2600      	movs	r6, #0
 8001d1e:	42a6      	cmp	r6, r4
 8001d20:	d105      	bne.n	8001d2e <__libc_init_array+0x2e>
 8001d22:	bd70      	pop	{r4, r5, r6, pc}
 8001d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d28:	4798      	blx	r3
 8001d2a:	3601      	adds	r6, #1
 8001d2c:	e7ee      	b.n	8001d0c <__libc_init_array+0xc>
 8001d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d32:	4798      	blx	r3
 8001d34:	3601      	adds	r6, #1
 8001d36:	e7f2      	b.n	8001d1e <__libc_init_array+0x1e>
 8001d38:	08001d60 	.word	0x08001d60
 8001d3c:	08001d60 	.word	0x08001d60
 8001d40:	08001d60 	.word	0x08001d60
 8001d44:	08001d64 	.word	0x08001d64

08001d48 <_init>:
 8001d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4a:	bf00      	nop
 8001d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d4e:	bc08      	pop	{r3}
 8001d50:	469e      	mov	lr, r3
 8001d52:	4770      	bx	lr

08001d54 <_fini>:
 8001d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d56:	bf00      	nop
 8001d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d5a:	bc08      	pop	{r3}
 8001d5c:	469e      	mov	lr, r3
 8001d5e:	4770      	bx	lr
