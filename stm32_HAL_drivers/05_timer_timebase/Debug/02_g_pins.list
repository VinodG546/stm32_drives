
02_g_pins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000084c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009d8  080009d8  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009d8  080009d8  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080009d8  080009d8  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080009d8  080009d8  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009d8  080009d8  000019d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009dc  080009dc  000019dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080009e0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000200c  2**0
                  CONTENTS
 10 .bss          00000024  2000000c  2000000c  0000200c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  0000200c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002565  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000974  00000000  00000000  000045a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000318  00000000  00000000  00004f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000022a  00000000  00000000  00005230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001179  00000000  00000000  0000545a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000032af  00000000  00000000  000065d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0cd8  00000000  00000000  00009882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ea55a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b38  00000000  00000000  000ea5a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000eb0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080009c0 	.word	0x080009c0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080009c0 	.word	0x080009c0

080001cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d6:	2003      	movs	r0, #3
 80001d8:	f000 f91a 	bl	8000410 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001dc:	200f      	movs	r0, #15
 80001de:	f000 f815 	bl	800020c <HAL_InitTick>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e8:	2301      	movs	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e001      	b.n	80001f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ee:	f000 f805 	bl	80001fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
	...

0800020c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000214:	2300      	movs	r3, #0
 8000216:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000218:	4b17      	ldr	r3, [pc, #92]	@ (8000278 <HAL_InitTick+0x6c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d023      	beq.n	8000268 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000220:	4b16      	ldr	r3, [pc, #88]	@ (800027c <HAL_InitTick+0x70>)
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b14      	ldr	r3, [pc, #80]	@ (8000278 <HAL_InitTick+0x6c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	4619      	mov	r1, r3
 800022a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800022e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000232:	fbb2 f3f3 	udiv	r3, r2, r3
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f911 	bl	800045e <HAL_SYSTICK_Config>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d10f      	bne.n	8000262 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b0f      	cmp	r3, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	2200      	movs	r2, #0
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f000 f8e9 	bl	8000426 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000254:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <HAL_InitTick+0x74>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	6013      	str	r3, [r2, #0]
 800025a:	e007      	b.n	800026c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800025c:	2301      	movs	r3, #1
 800025e:	73fb      	strb	r3, [r7, #15]
 8000260:	e004      	b.n	800026c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	e001      	b.n	800026c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000268:	2301      	movs	r3, #1
 800026a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000004 	.word	0x20000004
 800027c:	20000008 	.word	0x20000008
 8000280:	20000000 	.word	0x20000000

08000284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <HAL_IncTick+0x20>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	461a      	mov	r2, r3
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <HAL_IncTick+0x24>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4413      	add	r3, r2
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <HAL_IncTick+0x24>)
 8000296:	6013      	str	r3, [r2, #0]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000004 	.word	0x20000004
 80002a8:	20000028 	.word	0x20000028

080002ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f003 0307 	and.w	r3, r3, #7
 80002ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002bc:	4b0c      	ldr	r3, [pc, #48]	@ (80002f0 <__NVIC_SetPriorityGrouping+0x44>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002c2:	68ba      	ldr	r2, [r7, #8]
 80002c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80002c8:	4013      	ands	r3, r2
 80002ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80002d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002de:	4a04      	ldr	r2, [pc, #16]	@ (80002f0 <__NVIC_SetPriorityGrouping+0x44>)
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	60d3      	str	r3, [r2, #12]
}
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f8:	4b04      	ldr	r3, [pc, #16]	@ (800030c <__NVIC_GetPriorityGrouping+0x18>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	f003 0307 	and.w	r3, r3, #7
}
 8000302:	4618      	mov	r0, r3
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	6039      	str	r1, [r7, #0]
 800031a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800031c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	db0a      	blt.n	800033a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	b2da      	uxtb	r2, r3
 8000328:	490c      	ldr	r1, [pc, #48]	@ (800035c <__NVIC_SetPriority+0x4c>)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	0112      	lsls	r2, r2, #4
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	440b      	add	r3, r1
 8000334:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000338:	e00a      	b.n	8000350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	b2da      	uxtb	r2, r3
 800033e:	4908      	ldr	r1, [pc, #32]	@ (8000360 <__NVIC_SetPriority+0x50>)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	f003 030f 	and.w	r3, r3, #15
 8000346:	3b04      	subs	r3, #4
 8000348:	0112      	lsls	r2, r2, #4
 800034a:	b2d2      	uxtb	r2, r2
 800034c:	440b      	add	r3, r1
 800034e:	761a      	strb	r2, [r3, #24]
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	e000e100 	.word	0xe000e100
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000364:	b480      	push	{r7}
 8000366:	b089      	sub	sp, #36	@ 0x24
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	f003 0307 	and.w	r3, r3, #7
 8000376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000378:	69fb      	ldr	r3, [r7, #28]
 800037a:	f1c3 0307 	rsb	r3, r3, #7
 800037e:	2b04      	cmp	r3, #4
 8000380:	bf28      	it	cs
 8000382:	2304      	movcs	r3, #4
 8000384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	3304      	adds	r3, #4
 800038a:	2b06      	cmp	r3, #6
 800038c:	d902      	bls.n	8000394 <NVIC_EncodePriority+0x30>
 800038e:	69fb      	ldr	r3, [r7, #28]
 8000390:	3b03      	subs	r3, #3
 8000392:	e000      	b.n	8000396 <NVIC_EncodePriority+0x32>
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000398:	f04f 32ff 	mov.w	r2, #4294967295
 800039c:	69bb      	ldr	r3, [r7, #24]
 800039e:	fa02 f303 	lsl.w	r3, r2, r3
 80003a2:	43da      	mvns	r2, r3
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	401a      	ands	r2, r3
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003ac:	f04f 31ff 	mov.w	r1, #4294967295
 80003b0:	697b      	ldr	r3, [r7, #20]
 80003b2:	fa01 f303 	lsl.w	r3, r1, r3
 80003b6:	43d9      	mvns	r1, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003bc:	4313      	orrs	r3, r2
         );
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3724      	adds	r7, #36	@ 0x24
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
	...

080003cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80003dc:	d301      	bcc.n	80003e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003de:	2301      	movs	r3, #1
 80003e0:	e00f      	b.n	8000402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e2:	4a0a      	ldr	r2, [pc, #40]	@ (800040c <SysTick_Config+0x40>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	3b01      	subs	r3, #1
 80003e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003ea:	210f      	movs	r1, #15
 80003ec:	f04f 30ff 	mov.w	r0, #4294967295
 80003f0:	f7ff ff8e 	bl	8000310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f4:	4b05      	ldr	r3, [pc, #20]	@ (800040c <SysTick_Config+0x40>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003fa:	4b04      	ldr	r3, [pc, #16]	@ (800040c <SysTick_Config+0x40>)
 80003fc:	2207      	movs	r2, #7
 80003fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000400:	2300      	movs	r3, #0
}
 8000402:	4618      	mov	r0, r3
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	e000e010 	.word	0xe000e010

08000410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f7ff ff47 	bl	80002ac <__NVIC_SetPriorityGrouping>
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	b086      	sub	sp, #24
 800042a:	af00      	add	r7, sp, #0
 800042c:	4603      	mov	r3, r0
 800042e:	60b9      	str	r1, [r7, #8]
 8000430:	607a      	str	r2, [r7, #4]
 8000432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000438:	f7ff ff5c 	bl	80002f4 <__NVIC_GetPriorityGrouping>
 800043c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	68b9      	ldr	r1, [r7, #8]
 8000442:	6978      	ldr	r0, [r7, #20]
 8000444:	f7ff ff8e 	bl	8000364 <NVIC_EncodePriority>
 8000448:	4602      	mov	r2, r0
 800044a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800044e:	4611      	mov	r1, r2
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ff5d 	bl	8000310 <__NVIC_SetPriority>
}
 8000456:	bf00      	nop
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b082      	sub	sp, #8
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f7ff ffb0 	bl	80003cc <SysTick_Config>
 800046c:	4603      	mov	r3, r0
}
 800046e:	4618      	mov	r0, r3
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000478:	b480      	push	{r7}
 800047a:	b087      	sub	sp, #28
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000486:	e17f      	b.n	8000788 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	2101      	movs	r1, #1
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	fa01 f303 	lsl.w	r3, r1, r3
 8000494:	4013      	ands	r3, r2
 8000496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	2b00      	cmp	r3, #0
 800049c:	f000 8171 	beq.w	8000782 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	f003 0303 	and.w	r3, r3, #3
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d005      	beq.n	80004b8 <HAL_GPIO_Init+0x40>
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	f003 0303 	and.w	r3, r3, #3
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	d130      	bne.n	800051a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	2203      	movs	r2, #3
 80004c4:	fa02 f303 	lsl.w	r3, r2, r3
 80004c8:	43db      	mvns	r3, r3
 80004ca:	693a      	ldr	r2, [r7, #16]
 80004cc:	4013      	ands	r3, r2
 80004ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	68da      	ldr	r2, [r3, #12]
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	fa02 f303 	lsl.w	r3, r2, r3
 80004dc:	693a      	ldr	r2, [r7, #16]
 80004de:	4313      	orrs	r3, r2
 80004e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	693a      	ldr	r2, [r7, #16]
 80004e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80004ee:	2201      	movs	r2, #1
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	fa02 f303 	lsl.w	r3, r2, r3
 80004f6:	43db      	mvns	r3, r3
 80004f8:	693a      	ldr	r2, [r7, #16]
 80004fa:	4013      	ands	r3, r2
 80004fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	091b      	lsrs	r3, r3, #4
 8000504:	f003 0201 	and.w	r2, r3, #1
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	fa02 f303 	lsl.w	r3, r2, r3
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	4313      	orrs	r3, r2
 8000512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	693a      	ldr	r2, [r7, #16]
 8000518:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	f003 0303 	and.w	r3, r3, #3
 8000522:	2b03      	cmp	r3, #3
 8000524:	d118      	bne.n	8000558 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800052a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800052c:	2201      	movs	r2, #1
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	fa02 f303 	lsl.w	r3, r2, r3
 8000534:	43db      	mvns	r3, r3
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	4013      	ands	r3, r2
 800053a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	08db      	lsrs	r3, r3, #3
 8000542:	f003 0201 	and.w	r2, r3, #1
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	4313      	orrs	r3, r2
 8000550:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	f003 0303 	and.w	r3, r3, #3
 8000560:	2b03      	cmp	r3, #3
 8000562:	d017      	beq.n	8000594 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	2203      	movs	r2, #3
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	43db      	mvns	r3, r3
 8000576:	693a      	ldr	r2, [r7, #16]
 8000578:	4013      	ands	r3, r2
 800057a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	689a      	ldr	r2, [r3, #8]
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	fa02 f303 	lsl.w	r3, r2, r3
 8000588:	693a      	ldr	r2, [r7, #16]
 800058a:	4313      	orrs	r3, r2
 800058c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	693a      	ldr	r2, [r7, #16]
 8000592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f003 0303 	and.w	r3, r3, #3
 800059c:	2b02      	cmp	r3, #2
 800059e:	d123      	bne.n	80005e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	08da      	lsrs	r2, r3, #3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3208      	adds	r2, #8
 80005a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	f003 0307 	and.w	r3, r3, #7
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	220f      	movs	r2, #15
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	43db      	mvns	r3, r3
 80005be:	693a      	ldr	r2, [r7, #16]
 80005c0:	4013      	ands	r3, r2
 80005c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	691a      	ldr	r2, [r3, #16]
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	f003 0307 	and.w	r3, r3, #7
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	fa02 f303 	lsl.w	r3, r2, r3
 80005d4:	693a      	ldr	r2, [r7, #16]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	08da      	lsrs	r2, r3, #3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3208      	adds	r2, #8
 80005e2:	6939      	ldr	r1, [r7, #16]
 80005e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	2203      	movs	r2, #3
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	43db      	mvns	r3, r3
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	4013      	ands	r3, r2
 80005fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	f003 0203 	and.w	r2, r3, #3
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	4313      	orrs	r3, r2
 8000614:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	693a      	ldr	r2, [r7, #16]
 800061a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000624:	2b00      	cmp	r3, #0
 8000626:	f000 80ac 	beq.w	8000782 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062a:	4b5f      	ldr	r3, [pc, #380]	@ (80007a8 <HAL_GPIO_Init+0x330>)
 800062c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800062e:	4a5e      	ldr	r2, [pc, #376]	@ (80007a8 <HAL_GPIO_Init+0x330>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6613      	str	r3, [r2, #96]	@ 0x60
 8000636:	4b5c      	ldr	r3, [pc, #368]	@ (80007a8 <HAL_GPIO_Init+0x330>)
 8000638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000642:	4a5a      	ldr	r2, [pc, #360]	@ (80007ac <HAL_GPIO_Init+0x334>)
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	089b      	lsrs	r3, r3, #2
 8000648:	3302      	adds	r3, #2
 800064a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800064e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	f003 0303 	and.w	r3, r3, #3
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	220f      	movs	r2, #15
 800065a:	fa02 f303 	lsl.w	r3, r2, r3
 800065e:	43db      	mvns	r3, r3
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	4013      	ands	r3, r2
 8000664:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800066c:	d025      	beq.n	80006ba <HAL_GPIO_Init+0x242>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a4f      	ldr	r2, [pc, #316]	@ (80007b0 <HAL_GPIO_Init+0x338>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d01f      	beq.n	80006b6 <HAL_GPIO_Init+0x23e>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a4e      	ldr	r2, [pc, #312]	@ (80007b4 <HAL_GPIO_Init+0x33c>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d019      	beq.n	80006b2 <HAL_GPIO_Init+0x23a>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a4d      	ldr	r2, [pc, #308]	@ (80007b8 <HAL_GPIO_Init+0x340>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d013      	beq.n	80006ae <HAL_GPIO_Init+0x236>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a4c      	ldr	r2, [pc, #304]	@ (80007bc <HAL_GPIO_Init+0x344>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d00d      	beq.n	80006aa <HAL_GPIO_Init+0x232>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a4b      	ldr	r2, [pc, #300]	@ (80007c0 <HAL_GPIO_Init+0x348>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d007      	beq.n	80006a6 <HAL_GPIO_Init+0x22e>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a4a      	ldr	r2, [pc, #296]	@ (80007c4 <HAL_GPIO_Init+0x34c>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d101      	bne.n	80006a2 <HAL_GPIO_Init+0x22a>
 800069e:	2306      	movs	r3, #6
 80006a0:	e00c      	b.n	80006bc <HAL_GPIO_Init+0x244>
 80006a2:	2307      	movs	r3, #7
 80006a4:	e00a      	b.n	80006bc <HAL_GPIO_Init+0x244>
 80006a6:	2305      	movs	r3, #5
 80006a8:	e008      	b.n	80006bc <HAL_GPIO_Init+0x244>
 80006aa:	2304      	movs	r3, #4
 80006ac:	e006      	b.n	80006bc <HAL_GPIO_Init+0x244>
 80006ae:	2303      	movs	r3, #3
 80006b0:	e004      	b.n	80006bc <HAL_GPIO_Init+0x244>
 80006b2:	2302      	movs	r3, #2
 80006b4:	e002      	b.n	80006bc <HAL_GPIO_Init+0x244>
 80006b6:	2301      	movs	r3, #1
 80006b8:	e000      	b.n	80006bc <HAL_GPIO_Init+0x244>
 80006ba:	2300      	movs	r3, #0
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	f002 0203 	and.w	r2, r2, #3
 80006c2:	0092      	lsls	r2, r2, #2
 80006c4:	4093      	lsls	r3, r2
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80006cc:	4937      	ldr	r1, [pc, #220]	@ (80007ac <HAL_GPIO_Init+0x334>)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	089b      	lsrs	r3, r3, #2
 80006d2:	3302      	adds	r3, #2
 80006d4:	693a      	ldr	r2, [r7, #16]
 80006d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80006da:	4b3b      	ldr	r3, [pc, #236]	@ (80007c8 <HAL_GPIO_Init+0x350>)
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	43db      	mvns	r3, r3
 80006e4:	693a      	ldr	r2, [r7, #16]
 80006e6:	4013      	ands	r3, r2
 80006e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d003      	beq.n	80006fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80006fe:	4a32      	ldr	r2, [pc, #200]	@ (80007c8 <HAL_GPIO_Init+0x350>)
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000704:	4b30      	ldr	r3, [pc, #192]	@ (80007c8 <HAL_GPIO_Init+0x350>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	43db      	mvns	r3, r3
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	4013      	ands	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800071c:	2b00      	cmp	r3, #0
 800071e:	d003      	beq.n	8000728 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000720:	693a      	ldr	r2, [r7, #16]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4313      	orrs	r3, r2
 8000726:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000728:	4a27      	ldr	r2, [pc, #156]	@ (80007c8 <HAL_GPIO_Init+0x350>)
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800072e:	4b26      	ldr	r3, [pc, #152]	@ (80007c8 <HAL_GPIO_Init+0x350>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	43db      	mvns	r3, r3
 8000738:	693a      	ldr	r2, [r7, #16]
 800073a:	4013      	ands	r3, r2
 800073c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800074a:	693a      	ldr	r2, [r7, #16]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	4313      	orrs	r3, r2
 8000750:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000752:	4a1d      	ldr	r2, [pc, #116]	@ (80007c8 <HAL_GPIO_Init+0x350>)
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000758:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <HAL_GPIO_Init+0x350>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	43db      	mvns	r3, r3
 8000762:	693a      	ldr	r2, [r7, #16]
 8000764:	4013      	ands	r3, r2
 8000766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000770:	2b00      	cmp	r3, #0
 8000772:	d003      	beq.n	800077c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	4313      	orrs	r3, r2
 800077a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800077c:	4a12      	ldr	r2, [pc, #72]	@ (80007c8 <HAL_GPIO_Init+0x350>)
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	3301      	adds	r3, #1
 8000786:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	fa22 f303 	lsr.w	r3, r2, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	f47f ae78 	bne.w	8000488 <HAL_GPIO_Init+0x10>
  }
}
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	371c      	adds	r7, #28
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010000 	.word	0x40010000
 80007b0:	48000400 	.word	0x48000400
 80007b4:	48000800 	.word	0x48000800
 80007b8:	48000c00 	.word	0x48000c00
 80007bc:	48001000 	.word	0x48001000
 80007c0:	48001400 	.word	0x48001400
 80007c4:	48001800 	.word	0x48001800
 80007c8:	40010400 	.word	0x40010400

080007cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	691a      	ldr	r2, [r3, #16]
 80007dc:	887b      	ldrh	r3, [r7, #2]
 80007de:	4013      	ands	r3, r2
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80007e4:	2301      	movs	r3, #1
 80007e6:	73fb      	strb	r3, [r7, #15]
 80007e8:	e001      	b.n	80007ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	807b      	strh	r3, [r7, #2]
 8000808:	4613      	mov	r3, r2
 800080a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800080c:	787b      	ldrb	r3, [r7, #1]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d003      	beq.n	800081a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000812:	887a      	ldrh	r2, [r7, #2]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000818:	e002      	b.n	8000820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800081a:	887a      	ldrh	r2, [r7, #2]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <main>:


uint8_t button_status;

int main()
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000830:	f7ff fccc 	bl	80001cc <HAL_Init>
	btn_init();
 8000834:	f000 f81a 	bl	800086c <btn_init>
	led_init();
 8000838:	f000 f844 	bl	80008c4 <led_init>
	while(1)
	{
		button_status = HAL_GPIO_ReadPin(BTN_PORT, BTN_PIN);
 800083c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000840:	4808      	ldr	r0, [pc, #32]	@ (8000864 <main+0x38>)
 8000842:	f7ff ffc3 	bl	80007cc <HAL_GPIO_ReadPin>
 8000846:	4603      	mov	r3, r0
 8000848:	461a      	mov	r2, r3
 800084a:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <main+0x3c>)
 800084c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_PORT, LED_PIN, button_status);
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <main+0x3c>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	461a      	mov	r2, r3
 8000854:	2120      	movs	r1, #32
 8000856:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085a:	f7ff ffcf 	bl	80007fc <HAL_GPIO_WritePin>
		button_status = HAL_GPIO_ReadPin(BTN_PORT, BTN_PIN);
 800085e:	bf00      	nop
 8000860:	e7ec      	b.n	800083c <main+0x10>
 8000862:	bf00      	nop
 8000864:	48000800 	.word	0x48000800
 8000868:	2000002c 	.word	0x2000002c

0800086c <btn_init>:

	}
}

void btn_init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
	//2. Configure PC13 as GPIO Input for Button
	//Enable CLock
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <btn_init+0x50>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000884:	4a0d      	ldr	r2, [pc, #52]	@ (80008bc <btn_init+0x50>)
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088c:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <btn_init+0x50>)
 800088e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = BTN_PIN;
 8000898:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(BTN_PORT, &GPIO_InitStruct);
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <btn_init+0x54>)
 80008b0:	f7ff fde2 	bl	8000478 <HAL_GPIO_Init>
}
 80008b4:	bf00      	nop
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000800 	.word	0x48000800

080008c4 <led_init>:
void led_init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
	//1. Configure PA5 as GPIO output for LED
	//Enable Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <led_init+0x50>)
 80008da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000914 <led_init+0x50>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <led_init+0x50>)
 80008e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = LED_PIN;
 80008f0:	2320      	movs	r3, #32
 80008f2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	4619      	mov	r1, r3
 8000904:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000908:	f7ff fdb6 	bl	8000478 <HAL_GPIO_Init>
}
 800090c:	bf00      	nop
 800090e:	3718      	adds	r7, #24
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000

08000918 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800091c:	f7ff fcb2 	bl	8000284 <HAL_IncTick>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000924:	480d      	ldr	r0, [pc, #52]	@ (800095c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000926:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000928:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	@ (8000960 <LoopForever+0x6>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	@ (8000964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <LoopForever+0xe>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	@ (8000970 <LoopForever+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000952:	f000 f811 	bl	8000978 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000956:	f7ff ff69 	bl	800082c <main>

0800095a <LoopForever>:

LoopForever:
  b LoopForever
 800095a:	e7fe      	b.n	800095a <LoopForever>
  ldr   r0, =_estack
 800095c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000968:	080009e0 	.word	0x080009e0
  ldr r2, =_sbss
 800096c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000970:	20000030 	.word	0x20000030

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>
	...

08000978 <__libc_init_array>:
 8000978:	b570      	push	{r4, r5, r6, lr}
 800097a:	4d0d      	ldr	r5, [pc, #52]	@ (80009b0 <__libc_init_array+0x38>)
 800097c:	4c0d      	ldr	r4, [pc, #52]	@ (80009b4 <__libc_init_array+0x3c>)
 800097e:	1b64      	subs	r4, r4, r5
 8000980:	10a4      	asrs	r4, r4, #2
 8000982:	2600      	movs	r6, #0
 8000984:	42a6      	cmp	r6, r4
 8000986:	d109      	bne.n	800099c <__libc_init_array+0x24>
 8000988:	4d0b      	ldr	r5, [pc, #44]	@ (80009b8 <__libc_init_array+0x40>)
 800098a:	4c0c      	ldr	r4, [pc, #48]	@ (80009bc <__libc_init_array+0x44>)
 800098c:	f000 f818 	bl	80009c0 <_init>
 8000990:	1b64      	subs	r4, r4, r5
 8000992:	10a4      	asrs	r4, r4, #2
 8000994:	2600      	movs	r6, #0
 8000996:	42a6      	cmp	r6, r4
 8000998:	d105      	bne.n	80009a6 <__libc_init_array+0x2e>
 800099a:	bd70      	pop	{r4, r5, r6, pc}
 800099c:	f855 3b04 	ldr.w	r3, [r5], #4
 80009a0:	4798      	blx	r3
 80009a2:	3601      	adds	r6, #1
 80009a4:	e7ee      	b.n	8000984 <__libc_init_array+0xc>
 80009a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009aa:	4798      	blx	r3
 80009ac:	3601      	adds	r6, #1
 80009ae:	e7f2      	b.n	8000996 <__libc_init_array+0x1e>
 80009b0:	080009d8 	.word	0x080009d8
 80009b4:	080009d8 	.word	0x080009d8
 80009b8:	080009d8 	.word	0x080009d8
 80009bc:	080009dc 	.word	0x080009dc

080009c0 <_init>:
 80009c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c2:	bf00      	nop
 80009c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009c6:	bc08      	pop	{r3}
 80009c8:	469e      	mov	lr, r3
 80009ca:	4770      	bx	lr

080009cc <_fini>:
 80009cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ce:	bf00      	nop
 80009d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009d2:	bc08      	pop	{r3}
 80009d4:	469e      	mov	lr, r3
 80009d6:	4770      	bx	lr
