
11_uart_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002848  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080029d4  080029d4  000039d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a0c  08002a0c  00004018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002a0c  08002a0c  00003a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a14  08002a14  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a14  08002a14  00003a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a18  08002a18  00003a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002a1c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00004018  2**0
                  CONTENTS
 10 .bss          000000bc  20000018  20000018  00004018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000d4  200000d4  00004018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008bd8  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000144b  00000000  00000000  0000cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  0000e070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000054f  00000000  00000000  0000e760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000197a  00000000  00000000  0000ecaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009003  00000000  00000000  00010629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8a4b  00000000  00000000  0001962c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00102077  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c38  00000000  00000000  001020bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00103cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000018 	.word	0x20000018
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080029bc 	.word	0x080029bc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	080029bc 	.word	0x080029bc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004fe:	2300      	movs	r3, #0
 8000500:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000502:	2003      	movs	r0, #3
 8000504:	f000 f968 	bl	80007d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000508:	200f      	movs	r0, #15
 800050a:	f000 f815 	bl	8000538 <HAL_InitTick>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d002      	beq.n	800051a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000514:	2301      	movs	r3, #1
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	e001      	b.n	800051e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800051a:	f000 f805 	bl	8000528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800051e:	79fb      	ldrb	r3, [r7, #7]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000544:	4b17      	ldr	r3, [pc, #92]	@ (80005a4 <HAL_InitTick+0x6c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d023      	beq.n	8000594 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800054c:	4b16      	ldr	r3, [pc, #88]	@ (80005a8 <HAL_InitTick+0x70>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b14      	ldr	r3, [pc, #80]	@ (80005a4 <HAL_InitTick+0x6c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	4619      	mov	r1, r3
 8000556:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800055a:	fbb3 f3f1 	udiv	r3, r3, r1
 800055e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f96d 	bl	8000842 <HAL_SYSTICK_Config>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d10f      	bne.n	800058e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d809      	bhi.n	8000588 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f000 f937 	bl	80007ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000580:	4a0a      	ldr	r2, [pc, #40]	@ (80005ac <HAL_InitTick+0x74>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	e007      	b.n	8000598 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000588:	2301      	movs	r3, #1
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e004      	b.n	8000598 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	e001      	b.n	8000598 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000598:	7bfb      	ldrb	r3, [r7, #15]
}
 800059a:	4618      	mov	r0, r3
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004
 80005a8:	20000014 	.word	0x20000014
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <HAL_IncTick+0x20>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_IncTick+0x24>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	4a04      	ldr	r2, [pc, #16]	@ (80005d4 <HAL_IncTick+0x24>)
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000004 	.word	0x20000004
 80005d4:	20000034 	.word	0x20000034

080005d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return uwTick;
 80005dc:	4b03      	ldr	r3, [pc, #12]	@ (80005ec <HAL_GetTick+0x14>)
 80005de:	681b      	ldr	r3, [r3, #0]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000034 	.word	0x20000034

080005f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f8:	f7ff ffee 	bl	80005d8 <HAL_GetTick>
 80005fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000608:	d005      	beq.n	8000616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800060a:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <HAL_Delay+0x44>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000616:	bf00      	nop
 8000618:	f7ff ffde 	bl	80005d8 <HAL_GetTick>
 800061c:	4602      	mov	r2, r0
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	429a      	cmp	r2, r3
 8000626:	d8f7      	bhi.n	8000618 <HAL_Delay+0x28>
  {
  }
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004

08000638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000660:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066a:	4a04      	ldr	r2, [pc, #16]	@ (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	60d3      	str	r3, [r2, #12]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b04      	ldr	r3, [pc, #16]	@ (8000698 <__NVIC_GetPriorityGrouping+0x18>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	f003 0307 	and.w	r3, r3, #7
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db0b      	blt.n	80006c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 021f 	and.w	r2, r3, #31
 80006b4:	4907      	ldr	r1, [pc, #28]	@ (80006d4 <__NVIC_EnableIRQ+0x38>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	095b      	lsrs	r3, r3, #5
 80006bc:	2001      	movs	r0, #1
 80006be:	fa00 f202 	lsl.w	r2, r0, r2
 80006c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db0a      	blt.n	8000702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	490c      	ldr	r1, [pc, #48]	@ (8000724 <__NVIC_SetPriority+0x4c>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000700:	e00a      	b.n	8000718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4908      	ldr	r1, [pc, #32]	@ (8000728 <__NVIC_SetPriority+0x50>)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	3b04      	subs	r3, #4
 8000710:	0112      	lsls	r2, r2, #4
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	440b      	add	r3, r1
 8000716:	761a      	strb	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072c:	b480      	push	{r7}
 800072e:	b089      	sub	sp, #36	@ 0x24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	f1c3 0307 	rsb	r3, r3, #7
 8000746:	2b04      	cmp	r3, #4
 8000748:	bf28      	it	cs
 800074a:	2304      	movcs	r3, #4
 800074c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3304      	adds	r3, #4
 8000752:	2b06      	cmp	r3, #6
 8000754:	d902      	bls.n	800075c <NVIC_EncodePriority+0x30>
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3b03      	subs	r3, #3
 800075a:	e000      	b.n	800075e <NVIC_EncodePriority+0x32>
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	f04f 32ff 	mov.w	r2, #4294967295
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43da      	mvns	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	401a      	ands	r2, r3
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000774:	f04f 31ff 	mov.w	r1, #4294967295
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	43d9      	mvns	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	4313      	orrs	r3, r2
         );
}
 8000786:	4618      	mov	r0, r3
 8000788:	3724      	adds	r7, #36	@ 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
	...

08000794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007a4:	d301      	bcc.n	80007aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00f      	b.n	80007ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007aa:	4a0a      	ldr	r2, [pc, #40]	@ (80007d4 <SysTick_Config+0x40>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b2:	210f      	movs	r1, #15
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f7ff ff8e 	bl	80006d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007bc:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <SysTick_Config+0x40>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c2:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <SysTick_Config+0x40>)
 80007c4:	2207      	movs	r2, #7
 80007c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff29 	bl	8000638 <__NVIC_SetPriorityGrouping>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b086      	sub	sp, #24
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000800:	f7ff ff3e 	bl	8000680 <__NVIC_GetPriorityGrouping>
 8000804:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	6978      	ldr	r0, [r7, #20]
 800080c:	f7ff ff8e 	bl	800072c <NVIC_EncodePriority>
 8000810:	4602      	mov	r2, r0
 8000812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff5d 	bl	80006d8 <__NVIC_SetPriority>
}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff31 	bl	800069c <__NVIC_EnableIRQ>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b082      	sub	sp, #8
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ffa2 	bl	8000794 <SysTick_Config>
 8000850:	4603      	mov	r3, r0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800085a:	b480      	push	{r7}
 800085c:	b085      	sub	sp, #20
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000862:	2300      	movs	r3, #0
 8000864:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b02      	cmp	r3, #2
 8000870:	d008      	beq.n	8000884 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2204      	movs	r2, #4
 8000876:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	e022      	b.n	80008ca <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f022 020e 	bic.w	r2, r2, #14
 8000892:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f022 0201 	bic.w	r2, r2, #1
 80008a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a8:	f003 021c 	and.w	r2, r3, #28
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	2101      	movs	r1, #1
 80008b2:	fa01 f202 	lsl.w	r2, r1, r2
 80008b6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2201      	movs	r2, #1
 80008bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b084      	sub	sp, #16
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008de:	2300      	movs	r3, #0
 80008e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d005      	beq.n	80008fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2204      	movs	r2, #4
 80008f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	e029      	b.n	800094e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f022 020e 	bic.w	r2, r2, #14
 8000908:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f022 0201 	bic.w	r2, r2, #1
 8000918:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091e:	f003 021c 	and.w	r2, r3, #28
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	2101      	movs	r1, #1
 8000928:	fa01 f202 	lsl.w	r2, r1, r2
 800092c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2201      	movs	r2, #1
 8000932:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000942:	2b00      	cmp	r3, #0
 8000944:	d003      	beq.n	800094e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	4798      	blx	r3
    }
  }
  return status;
 800094e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000958:	b480      	push	{r7}
 800095a:	b087      	sub	sp, #28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000966:	e17f      	b.n	8000c68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	2101      	movs	r1, #1
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	fa01 f303 	lsl.w	r3, r1, r3
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2b00      	cmp	r3, #0
 800097c:	f000 8171 	beq.w	8000c62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 0303 	and.w	r3, r3, #3
 8000988:	2b01      	cmp	r3, #1
 800098a:	d005      	beq.n	8000998 <HAL_GPIO_Init+0x40>
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 0303 	and.w	r3, r3, #3
 8000994:	2b02      	cmp	r3, #2
 8000996:	d130      	bne.n	80009fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	2203      	movs	r2, #3
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	68da      	ldr	r2, [r3, #12]
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4313      	orrs	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009ce:	2201      	movs	r2, #1
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	091b      	lsrs	r3, r3, #4
 80009e4:	f003 0201 	and.w	r2, r3, #1
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f003 0303 	and.w	r3, r3, #3
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d118      	bne.n	8000a38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	08db      	lsrs	r3, r3, #3
 8000a22:	f003 0201 	and.w	r2, r3, #1
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f003 0303 	and.w	r3, r3, #3
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	d017      	beq.n	8000a74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	2203      	movs	r2, #3
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	689a      	ldr	r2, [r3, #8]
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d123      	bne.n	8000ac8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	08da      	lsrs	r2, r3, #3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3208      	adds	r2, #8
 8000a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f003 0307 	and.w	r3, r3, #7
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	220f      	movs	r2, #15
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	691a      	ldr	r2, [r3, #16]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	08da      	lsrs	r2, r3, #3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3208      	adds	r2, #8
 8000ac2:	6939      	ldr	r1, [r7, #16]
 8000ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 0203 	and.w	r2, r3, #3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f000 80ac 	beq.w	8000c62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	4b5f      	ldr	r3, [pc, #380]	@ (8000c88 <HAL_GPIO_Init+0x330>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b0e:	4a5e      	ldr	r2, [pc, #376]	@ (8000c88 <HAL_GPIO_Init+0x330>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b16:	4b5c      	ldr	r3, [pc, #368]	@ (8000c88 <HAL_GPIO_Init+0x330>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b22:	4a5a      	ldr	r2, [pc, #360]	@ (8000c8c <HAL_GPIO_Init+0x334>)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	089b      	lsrs	r3, r3, #2
 8000b28:	3302      	adds	r3, #2
 8000b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	f003 0303 	and.w	r3, r3, #3
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	220f      	movs	r2, #15
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b4c:	d025      	beq.n	8000b9a <HAL_GPIO_Init+0x242>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a4f      	ldr	r2, [pc, #316]	@ (8000c90 <HAL_GPIO_Init+0x338>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d01f      	beq.n	8000b96 <HAL_GPIO_Init+0x23e>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a4e      	ldr	r2, [pc, #312]	@ (8000c94 <HAL_GPIO_Init+0x33c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d019      	beq.n	8000b92 <HAL_GPIO_Init+0x23a>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a4d      	ldr	r2, [pc, #308]	@ (8000c98 <HAL_GPIO_Init+0x340>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d013      	beq.n	8000b8e <HAL_GPIO_Init+0x236>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a4c      	ldr	r2, [pc, #304]	@ (8000c9c <HAL_GPIO_Init+0x344>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d00d      	beq.n	8000b8a <HAL_GPIO_Init+0x232>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a4b      	ldr	r2, [pc, #300]	@ (8000ca0 <HAL_GPIO_Init+0x348>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d007      	beq.n	8000b86 <HAL_GPIO_Init+0x22e>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a4a      	ldr	r2, [pc, #296]	@ (8000ca4 <HAL_GPIO_Init+0x34c>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d101      	bne.n	8000b82 <HAL_GPIO_Init+0x22a>
 8000b7e:	2306      	movs	r3, #6
 8000b80:	e00c      	b.n	8000b9c <HAL_GPIO_Init+0x244>
 8000b82:	2307      	movs	r3, #7
 8000b84:	e00a      	b.n	8000b9c <HAL_GPIO_Init+0x244>
 8000b86:	2305      	movs	r3, #5
 8000b88:	e008      	b.n	8000b9c <HAL_GPIO_Init+0x244>
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	e006      	b.n	8000b9c <HAL_GPIO_Init+0x244>
 8000b8e:	2303      	movs	r3, #3
 8000b90:	e004      	b.n	8000b9c <HAL_GPIO_Init+0x244>
 8000b92:	2302      	movs	r3, #2
 8000b94:	e002      	b.n	8000b9c <HAL_GPIO_Init+0x244>
 8000b96:	2301      	movs	r3, #1
 8000b98:	e000      	b.n	8000b9c <HAL_GPIO_Init+0x244>
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	f002 0203 	and.w	r2, r2, #3
 8000ba2:	0092      	lsls	r2, r2, #2
 8000ba4:	4093      	lsls	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bac:	4937      	ldr	r1, [pc, #220]	@ (8000c8c <HAL_GPIO_Init+0x334>)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bba:	4b3b      	ldr	r3, [pc, #236]	@ (8000ca8 <HAL_GPIO_Init+0x350>)
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bde:	4a32      	ldr	r2, [pc, #200]	@ (8000ca8 <HAL_GPIO_Init+0x350>)
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000be4:	4b30      	ldr	r3, [pc, #192]	@ (8000ca8 <HAL_GPIO_Init+0x350>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c08:	4a27      	ldr	r2, [pc, #156]	@ (8000ca8 <HAL_GPIO_Init+0x350>)
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ca8 <HAL_GPIO_Init+0x350>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c32:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca8 <HAL_GPIO_Init+0x350>)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <HAL_GPIO_Init+0x350>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c5c:	4a12      	ldr	r2, [pc, #72]	@ (8000ca8 <HAL_GPIO_Init+0x350>)
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	3301      	adds	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f47f ae78 	bne.w	8000968 <HAL_GPIO_Init+0x10>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	371c      	adds	r7, #28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010000 	.word	0x40010000
 8000c90:	48000400 	.word	0x48000400
 8000c94:	48000800 	.word	0x48000800
 8000c98:	48000c00 	.word	0x48000c00
 8000c9c:	48001000 	.word	0x48001000
 8000ca0:	48001400 	.word	0x48001400
 8000ca4:	48001800 	.word	0x48001800
 8000ca8:	40010400 	.word	0x40010400

08000cac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cbe:	887a      	ldrh	r2, [r7, #2]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	041a      	lsls	r2, r3, #16
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	43d9      	mvns	r1, r3
 8000cca:	887b      	ldrh	r3, [r7, #2]
 8000ccc:	400b      	ands	r3, r1
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	619a      	str	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	@ 0x24
 8000ce4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cee:	4b3e      	ldr	r3, [pc, #248]	@ (8000de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
 8000cf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cf8:	4b3b      	ldr	r3, [pc, #236]	@ (8000de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d005      	beq.n	8000d14 <HAL_RCC_GetSysClockFreq+0x34>
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	2b0c      	cmp	r3, #12
 8000d0c:	d121      	bne.n	8000d52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d11e      	bne.n	8000d52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000d14:	4b34      	ldr	r3, [pc, #208]	@ (8000de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0308 	and.w	r3, r3, #8
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d107      	bne.n	8000d30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000d20:	4b31      	ldr	r3, [pc, #196]	@ (8000de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8000d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d26:	0a1b      	lsrs	r3, r3, #8
 8000d28:	f003 030f 	and.w	r3, r3, #15
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	e005      	b.n	8000d3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000d30:	4b2d      	ldr	r3, [pc, #180]	@ (8000de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	091b      	lsrs	r3, r3, #4
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8000dec <HAL_RCC_GetSysClockFreq+0x10c>)
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d10d      	bne.n	8000d68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d50:	e00a      	b.n	8000d68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d102      	bne.n	8000d5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000d58:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <HAL_RCC_GetSysClockFreq+0x110>)
 8000d5a:	61bb      	str	r3, [r7, #24]
 8000d5c:	e004      	b.n	8000d68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	2b08      	cmp	r3, #8
 8000d62:	d101      	bne.n	8000d68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000d64:	4b23      	ldr	r3, [pc, #140]	@ (8000df4 <HAL_RCC_GetSysClockFreq+0x114>)
 8000d66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	2b0c      	cmp	r3, #12
 8000d6c:	d134      	bne.n	8000dd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d003      	beq.n	8000d86 <HAL_RCC_GetSysClockFreq+0xa6>
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	d003      	beq.n	8000d8c <HAL_RCC_GetSysClockFreq+0xac>
 8000d84:	e005      	b.n	8000d92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <HAL_RCC_GetSysClockFreq+0x110>)
 8000d88:	617b      	str	r3, [r7, #20]
      break;
 8000d8a:	e005      	b.n	8000d98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8000d8c:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <HAL_RCC_GetSysClockFreq+0x114>)
 8000d8e:	617b      	str	r3, [r7, #20]
      break;
 8000d90:	e002      	b.n	8000d98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	617b      	str	r3, [r7, #20]
      break;
 8000d96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000d98:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	3301      	adds	r3, #1
 8000da4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000da6:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	0a1b      	lsrs	r3, r3, #8
 8000dac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	fb03 f202 	mul.w	r2, r3, r2
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	0e5b      	lsrs	r3, r3, #25
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	3301      	adds	r3, #1
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8000dd8:	69bb      	ldr	r3, [r7, #24]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	@ 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000
 8000dec:	080029dc 	.word	0x080029dc
 8000df0:	00f42400 	.word	0x00f42400
 8000df4:	007a1200 	.word	0x007a1200

08000df8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	@ (8000e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000014 	.word	0x20000014

08000e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8000e14:	f7ff fff0 	bl	8000df8 <HAL_RCC_GetHCLKFreq>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	0a1b      	lsrs	r3, r3, #8
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	4904      	ldr	r1, [pc, #16]	@ (8000e38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000e26:	5ccb      	ldrb	r3, [r1, r3]
 8000e28:	f003 031f 	and.w	r3, r3, #31
 8000e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40021000 	.word	0x40021000
 8000e38:	080029d4 	.word	0x080029d4

08000e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8000e40:	f7ff ffda 	bl	8000df8 <HAL_RCC_GetHCLKFreq>
 8000e44:	4602      	mov	r2, r0
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	0adb      	lsrs	r3, r3, #11
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	4904      	ldr	r1, [pc, #16]	@ (8000e64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000e52:	5ccb      	ldrb	r3, [r1, r3]
 8000e54:	f003 031f 	and.w	r3, r3, #31
 8000e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40021000 	.word	0x40021000
 8000e64:	080029d4 	.word	0x080029d4

08000e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e040      	b.n	8000efc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d106      	bne.n	8000e90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 f83a 	bl	8000f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2224      	movs	r2, #36	@ 0x24
 8000e94:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0201 	bic.w	r2, r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d002      	beq.n	8000eb4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 fe94 	bl	8001bdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 fbd9 	bl	800166c <UART_SetConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d101      	bne.n	8000ec4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e01b      	b.n	8000efc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 0201 	orr.w	r2, r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 ff13 	bl	8001d20 <UART_CheckIdleState>
 8000efa:	4603      	mov	r3, r0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b08b      	sub	sp, #44	@ 0x2c
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	4613      	mov	r3, r2
 8000f24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000f2a:	2b20      	cmp	r3, #32
 8000f2c:	d147      	bne.n	8000fbe <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <HAL_UART_Transmit_IT+0x22>
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e040      	b.n	8000fc0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	88fa      	ldrh	r2, [r7, #6]
 8000f48:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	88fa      	ldrh	r2, [r7, #6]
 8000f50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2200      	movs	r2, #0
 8000f58:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2221      	movs	r2, #33	@ 0x21
 8000f66:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f70:	d107      	bne.n	8000f82 <HAL_UART_Transmit_IT+0x6a>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d103      	bne.n	8000f82 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4a13      	ldr	r2, [pc, #76]	@ (8000fcc <HAL_UART_Transmit_IT+0xb4>)
 8000f7e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000f80:	e002      	b.n	8000f88 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4a12      	ldr	r2, [pc, #72]	@ (8000fd0 <HAL_UART_Transmit_IT+0xb8>)
 8000f86:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	e853 3f00 	ldrex	r3, [r3]
 8000f94:	613b      	str	r3, [r7, #16]
   return(result);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa6:	623b      	str	r3, [r7, #32]
 8000fa8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000faa:	69f9      	ldr	r1, [r7, #28]
 8000fac:	6a3a      	ldr	r2, [r7, #32]
 8000fae:	e841 2300 	strex	r3, r2, [r1]
 8000fb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1e6      	bne.n	8000f88 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8000fbe:	2302      	movs	r3, #2
  }
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	372c      	adds	r7, #44	@ 0x2c
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	08002277 	.word	0x08002277
 8000fd0:	080021c1 	.word	0x080021c1

08000fd4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	@ 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe8:	2b20      	cmp	r3, #32
 8000fea:	d137      	bne.n	800105c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <HAL_UART_Receive_IT+0x24>
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e030      	b.n	800105e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2200      	movs	r2, #0
 8001000:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a18      	ldr	r2, [pc, #96]	@ (8001068 <HAL_UART_Receive_IT+0x94>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d01f      	beq.n	800104c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d018      	beq.n	800104c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	e853 3f00 	ldrex	r3, [r3]
 8001026:	613b      	str	r3, [r7, #16]
   return(result);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	623b      	str	r3, [r7, #32]
 800103a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800103c:	69f9      	ldr	r1, [r7, #28]
 800103e:	6a3a      	ldr	r2, [r7, #32]
 8001040:	e841 2300 	strex	r3, r2, [r1]
 8001044:	61bb      	str	r3, [r7, #24]
   return(result);
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1e6      	bne.n	800101a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	461a      	mov	r2, r3
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f000 ff74 	bl	8001f40 <UART_Start_Receive_IT>
 8001058:	4603      	mov	r3, r0
 800105a:	e000      	b.n	800105e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800105c:	2302      	movs	r3, #2
  }
}
 800105e:	4618      	mov	r0, r3
 8001060:	3728      	adds	r7, #40	@ 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40008000 	.word	0x40008000

0800106c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0ba      	sub	sp, #232	@ 0xe8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001092:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001096:	f640 030f 	movw	r3, #2063	@ 0x80f
 800109a:	4013      	ands	r3, r2
 800109c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80010a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d115      	bne.n	80010d4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80010a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80010ac:	f003 0320 	and.w	r3, r3, #32
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00f      	beq.n	80010d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80010b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80010b8:	f003 0320 	and.w	r3, r3, #32
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d009      	beq.n	80010d4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 82ae 	beq.w	8001626 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	4798      	blx	r3
      }
      return;
 80010d2:	e2a8      	b.n	8001626 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80010d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 8117 	beq.w	800130c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80010de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d106      	bne.n	80010f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80010ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80010ee:	4b85      	ldr	r3, [pc, #532]	@ (8001304 <HAL_UART_IRQHandler+0x298>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 810a 	beq.w	800130c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80010f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d011      	beq.n	8001128 <HAL_UART_IRQHandler+0xbc>
 8001104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00b      	beq.n	8001128 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2201      	movs	r2, #1
 8001116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800111e:	f043 0201 	orr.w	r2, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d011      	beq.n	8001158 <HAL_UART_IRQHandler+0xec>
 8001134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d00b      	beq.n	8001158 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2202      	movs	r2, #2
 8001146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800114e:	f043 0204 	orr.w	r2, r3, #4
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d011      	beq.n	8001188 <HAL_UART_IRQHandler+0x11c>
 8001164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00b      	beq.n	8001188 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2204      	movs	r2, #4
 8001176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800117e:	f043 0202 	orr.w	r2, r3, #2
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800118c:	f003 0308 	and.w	r3, r3, #8
 8001190:	2b00      	cmp	r3, #0
 8001192:	d017      	beq.n	80011c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80011a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80011a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00b      	beq.n	80011c4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2208      	movs	r2, #8
 80011b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011ba:	f043 0208 	orr.w	r2, r3, #8
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80011c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80011c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d012      	beq.n	80011f6 <HAL_UART_IRQHandler+0x18a>
 80011d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80011d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00c      	beq.n	80011f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011ec:	f043 0220 	orr.w	r2, r3, #32
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 8214 	beq.w	800162a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001206:	f003 0320 	and.w	r3, r3, #32
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00d      	beq.n	800122a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800120e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001212:	f003 0320 	and.w	r3, r3, #32
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001230:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800123e:	2b40      	cmp	r3, #64	@ 0x40
 8001240:	d005      	beq.n	800124e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001246:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800124a:	2b00      	cmp	r3, #0
 800124c:	d04f      	beq.n	80012ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 ff3c 	bl	80020cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800125e:	2b40      	cmp	r3, #64	@ 0x40
 8001260:	d141      	bne.n	80012e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	3308      	adds	r3, #8
 8001268:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800126c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001270:	e853 3f00 	ldrex	r3, [r3]
 8001274:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001278:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800127c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3308      	adds	r3, #8
 800128a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800128e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001292:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800129a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800129e:	e841 2300 	strex	r3, r2, [r1]
 80012a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80012a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1d9      	bne.n	8001262 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d013      	beq.n	80012de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012ba:	4a13      	ldr	r2, [pc, #76]	@ (8001308 <HAL_UART_IRQHandler+0x29c>)
 80012bc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fb07 	bl	80008d6 <HAL_DMA_Abort_IT>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d017      	beq.n	80012fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80012d8:	4610      	mov	r0, r2
 80012da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012dc:	e00f      	b.n	80012fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f9ae 	bl	8001640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012e4:	e00b      	b.n	80012fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f9aa 	bl	8001640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012ec:	e007      	b.n	80012fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f9a6 	bl	8001640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80012fc:	e195      	b.n	800162a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012fe:	bf00      	nop
    return;
 8001300:	e193      	b.n	800162a <HAL_UART_IRQHandler+0x5be>
 8001302:	bf00      	nop
 8001304:	04000120 	.word	0x04000120
 8001308:	08002195 	.word	0x08002195

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001310:	2b01      	cmp	r3, #1
 8001312:	f040 814e 	bne.w	80015b2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8147 	beq.w	80015b2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8140 	beq.w	80015b2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2210      	movs	r2, #16
 8001338:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001344:	2b40      	cmp	r3, #64	@ 0x40
 8001346:	f040 80b8 	bne.w	80014ba <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001356:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 8167 	beq.w	800162e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8001366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800136a:	429a      	cmp	r2, r3
 800136c:	f080 815f 	bcs.w	800162e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001376:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0320 	and.w	r3, r3, #32
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 8086 	bne.w	8001498 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001394:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001398:	e853 3f00 	ldrex	r3, [r3]
 800139c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80013a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80013b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80013c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80013c6:	e841 2300 	strex	r3, r2, [r1]
 80013ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80013ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1da      	bne.n	800138c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3308      	adds	r3, #8
 80013dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80013e0:	e853 3f00 	ldrex	r3, [r3]
 80013e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80013e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3308      	adds	r3, #8
 80013f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80013fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80013fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001400:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001402:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001406:	e841 2300 	strex	r3, r2, [r1]
 800140a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800140c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1e1      	bne.n	80013d6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	3308      	adds	r3, #8
 8001418:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800141a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800141c:	e853 3f00 	ldrex	r3, [r3]
 8001420:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001422:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001424:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001428:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3308      	adds	r3, #8
 8001432:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001436:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001438:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800143a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800143c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800143e:	e841 2300 	strex	r3, r2, [r1]
 8001442:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001444:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1e3      	bne.n	8001412 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2220      	movs	r2, #32
 800144e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800145e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001460:	e853 3f00 	ldrex	r3, [r3]
 8001464:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001468:	f023 0310 	bic.w	r3, r3, #16
 800146c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800147a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800147c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800147e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001480:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001482:	e841 2300 	strex	r3, r2, [r1]
 8001486:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001488:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1e4      	bne.n	8001458 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f9e1 	bl	800085a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2202      	movs	r2, #2
 800149c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f8ce 	bl	8001654 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80014b8:	e0b9      	b.n	800162e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80ab 	beq.w	8001632 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80014dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80a6 	beq.w	8001632 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014ee:	e853 3f00 	ldrex	r3, [r3]
 80014f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80014f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80014fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001508:	647b      	str	r3, [r7, #68]	@ 0x44
 800150a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800150c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800150e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001510:	e841 2300 	strex	r3, r2, [r1]
 8001514:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1e4      	bne.n	80014e6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3308      	adds	r3, #8
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	e853 3f00 	ldrex	r3, [r3]
 800152a:	623b      	str	r3, [r7, #32]
   return(result);
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	3308      	adds	r3, #8
 800153c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001540:	633a      	str	r2, [r7, #48]	@ 0x30
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001544:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001548:	e841 2300 	strex	r3, r2, [r1]
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800154e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e3      	bne.n	800151c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2220      	movs	r2, #32
 8001558:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	e853 3f00 	ldrex	r3, [r3]
 8001574:	60fb      	str	r3, [r7, #12]
   return(result);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f023 0310 	bic.w	r3, r3, #16
 800157c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800158a:	61fb      	str	r3, [r7, #28]
 800158c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800158e:	69b9      	ldr	r1, [r7, #24]
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	e841 2300 	strex	r3, r2, [r1]
 8001596:	617b      	str	r3, [r7, #20]
   return(result);
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1e4      	bne.n	8001568 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2202      	movs	r2, #2
 80015a2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80015a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80015a8:	4619      	mov	r1, r3
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f852 	bl	8001654 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80015b0:	e03f      	b.n	8001632 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80015b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80015b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00e      	beq.n	80015dc <HAL_UART_IRQHandler+0x570>
 80015be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80015c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80015d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f001 f895 	bl	8002704 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80015da:	e02d      	b.n	8001638 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80015dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80015e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00e      	beq.n	8001606 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80015e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80015ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d008      	beq.n	8001606 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d01c      	beq.n	8001636 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	4798      	blx	r3
    }
    return;
 8001604:	e017      	b.n	8001636 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800160a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800160e:	2b00      	cmp	r3, #0
 8001610:	d012      	beq.n	8001638 <HAL_UART_IRQHandler+0x5cc>
 8001612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00c      	beq.n	8001638 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 fe89 	bl	8002336 <UART_EndTransmit_IT>
    return;
 8001624:	e008      	b.n	8001638 <HAL_UART_IRQHandler+0x5cc>
      return;
 8001626:	bf00      	nop
 8001628:	e006      	b.n	8001638 <HAL_UART_IRQHandler+0x5cc>
    return;
 800162a:	bf00      	nop
 800162c:	e004      	b.n	8001638 <HAL_UART_IRQHandler+0x5cc>
      return;
 800162e:	bf00      	nop
 8001630:	e002      	b.n	8001638 <HAL_UART_IRQHandler+0x5cc>
      return;
 8001632:	bf00      	nop
 8001634:	e000      	b.n	8001638 <HAL_UART_IRQHandler+0x5cc>
    return;
 8001636:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8001638:	37e8      	adds	r7, #232	@ 0xe8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop

08001640 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800166c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001670:	b08a      	sub	sp, #40	@ 0x28
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	431a      	orrs	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	431a      	orrs	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	4313      	orrs	r3, r2
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4ba4      	ldr	r3, [pc, #656]	@ (800192c <UART_SetConfig+0x2c0>)
 800169c:	4013      	ands	r3, r2
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016a4:	430b      	orrs	r3, r1
 80016a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a99      	ldr	r2, [pc, #612]	@ (8001930 <UART_SetConfig+0x2c4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d004      	beq.n	80016d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d4:	4313      	orrs	r3, r2
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016e8:	430a      	orrs	r2, r1
 80016ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a90      	ldr	r2, [pc, #576]	@ (8001934 <UART_SetConfig+0x2c8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d126      	bne.n	8001744 <UART_SetConfig+0xd8>
 80016f6:	4b90      	ldr	r3, [pc, #576]	@ (8001938 <UART_SetConfig+0x2cc>)
 80016f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b03      	cmp	r3, #3
 8001702:	d81b      	bhi.n	800173c <UART_SetConfig+0xd0>
 8001704:	a201      	add	r2, pc, #4	@ (adr r2, 800170c <UART_SetConfig+0xa0>)
 8001706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170a:	bf00      	nop
 800170c:	0800171d 	.word	0x0800171d
 8001710:	0800172d 	.word	0x0800172d
 8001714:	08001725 	.word	0x08001725
 8001718:	08001735 	.word	0x08001735
 800171c:	2301      	movs	r3, #1
 800171e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001722:	e116      	b.n	8001952 <UART_SetConfig+0x2e6>
 8001724:	2302      	movs	r3, #2
 8001726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800172a:	e112      	b.n	8001952 <UART_SetConfig+0x2e6>
 800172c:	2304      	movs	r3, #4
 800172e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001732:	e10e      	b.n	8001952 <UART_SetConfig+0x2e6>
 8001734:	2308      	movs	r3, #8
 8001736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800173a:	e10a      	b.n	8001952 <UART_SetConfig+0x2e6>
 800173c:	2310      	movs	r3, #16
 800173e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001742:	e106      	b.n	8001952 <UART_SetConfig+0x2e6>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a7c      	ldr	r2, [pc, #496]	@ (800193c <UART_SetConfig+0x2d0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d138      	bne.n	80017c0 <UART_SetConfig+0x154>
 800174e:	4b7a      	ldr	r3, [pc, #488]	@ (8001938 <UART_SetConfig+0x2cc>)
 8001750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b0c      	cmp	r3, #12
 800175a:	d82d      	bhi.n	80017b8 <UART_SetConfig+0x14c>
 800175c:	a201      	add	r2, pc, #4	@ (adr r2, 8001764 <UART_SetConfig+0xf8>)
 800175e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001762:	bf00      	nop
 8001764:	08001799 	.word	0x08001799
 8001768:	080017b9 	.word	0x080017b9
 800176c:	080017b9 	.word	0x080017b9
 8001770:	080017b9 	.word	0x080017b9
 8001774:	080017a9 	.word	0x080017a9
 8001778:	080017b9 	.word	0x080017b9
 800177c:	080017b9 	.word	0x080017b9
 8001780:	080017b9 	.word	0x080017b9
 8001784:	080017a1 	.word	0x080017a1
 8001788:	080017b9 	.word	0x080017b9
 800178c:	080017b9 	.word	0x080017b9
 8001790:	080017b9 	.word	0x080017b9
 8001794:	080017b1 	.word	0x080017b1
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800179e:	e0d8      	b.n	8001952 <UART_SetConfig+0x2e6>
 80017a0:	2302      	movs	r3, #2
 80017a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80017a6:	e0d4      	b.n	8001952 <UART_SetConfig+0x2e6>
 80017a8:	2304      	movs	r3, #4
 80017aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80017ae:	e0d0      	b.n	8001952 <UART_SetConfig+0x2e6>
 80017b0:	2308      	movs	r3, #8
 80017b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80017b6:	e0cc      	b.n	8001952 <UART_SetConfig+0x2e6>
 80017b8:	2310      	movs	r3, #16
 80017ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80017be:	e0c8      	b.n	8001952 <UART_SetConfig+0x2e6>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a5e      	ldr	r2, [pc, #376]	@ (8001940 <UART_SetConfig+0x2d4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d125      	bne.n	8001816 <UART_SetConfig+0x1aa>
 80017ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001938 <UART_SetConfig+0x2cc>)
 80017cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80017d4:	2b30      	cmp	r3, #48	@ 0x30
 80017d6:	d016      	beq.n	8001806 <UART_SetConfig+0x19a>
 80017d8:	2b30      	cmp	r3, #48	@ 0x30
 80017da:	d818      	bhi.n	800180e <UART_SetConfig+0x1a2>
 80017dc:	2b20      	cmp	r3, #32
 80017de:	d00a      	beq.n	80017f6 <UART_SetConfig+0x18a>
 80017e0:	2b20      	cmp	r3, #32
 80017e2:	d814      	bhi.n	800180e <UART_SetConfig+0x1a2>
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <UART_SetConfig+0x182>
 80017e8:	2b10      	cmp	r3, #16
 80017ea:	d008      	beq.n	80017fe <UART_SetConfig+0x192>
 80017ec:	e00f      	b.n	800180e <UART_SetConfig+0x1a2>
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80017f4:	e0ad      	b.n	8001952 <UART_SetConfig+0x2e6>
 80017f6:	2302      	movs	r3, #2
 80017f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80017fc:	e0a9      	b.n	8001952 <UART_SetConfig+0x2e6>
 80017fe:	2304      	movs	r3, #4
 8001800:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001804:	e0a5      	b.n	8001952 <UART_SetConfig+0x2e6>
 8001806:	2308      	movs	r3, #8
 8001808:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800180c:	e0a1      	b.n	8001952 <UART_SetConfig+0x2e6>
 800180e:	2310      	movs	r3, #16
 8001810:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001814:	e09d      	b.n	8001952 <UART_SetConfig+0x2e6>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a4a      	ldr	r2, [pc, #296]	@ (8001944 <UART_SetConfig+0x2d8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d125      	bne.n	800186c <UART_SetConfig+0x200>
 8001820:	4b45      	ldr	r3, [pc, #276]	@ (8001938 <UART_SetConfig+0x2cc>)
 8001822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001826:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800182a:	2bc0      	cmp	r3, #192	@ 0xc0
 800182c:	d016      	beq.n	800185c <UART_SetConfig+0x1f0>
 800182e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001830:	d818      	bhi.n	8001864 <UART_SetConfig+0x1f8>
 8001832:	2b80      	cmp	r3, #128	@ 0x80
 8001834:	d00a      	beq.n	800184c <UART_SetConfig+0x1e0>
 8001836:	2b80      	cmp	r3, #128	@ 0x80
 8001838:	d814      	bhi.n	8001864 <UART_SetConfig+0x1f8>
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <UART_SetConfig+0x1d8>
 800183e:	2b40      	cmp	r3, #64	@ 0x40
 8001840:	d008      	beq.n	8001854 <UART_SetConfig+0x1e8>
 8001842:	e00f      	b.n	8001864 <UART_SetConfig+0x1f8>
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800184a:	e082      	b.n	8001952 <UART_SetConfig+0x2e6>
 800184c:	2302      	movs	r3, #2
 800184e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001852:	e07e      	b.n	8001952 <UART_SetConfig+0x2e6>
 8001854:	2304      	movs	r3, #4
 8001856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800185a:	e07a      	b.n	8001952 <UART_SetConfig+0x2e6>
 800185c:	2308      	movs	r3, #8
 800185e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001862:	e076      	b.n	8001952 <UART_SetConfig+0x2e6>
 8001864:	2310      	movs	r3, #16
 8001866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800186a:	e072      	b.n	8001952 <UART_SetConfig+0x2e6>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a35      	ldr	r2, [pc, #212]	@ (8001948 <UART_SetConfig+0x2dc>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d12a      	bne.n	80018cc <UART_SetConfig+0x260>
 8001876:	4b30      	ldr	r3, [pc, #192]	@ (8001938 <UART_SetConfig+0x2cc>)
 8001878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800187c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001880:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001884:	d01a      	beq.n	80018bc <UART_SetConfig+0x250>
 8001886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800188a:	d81b      	bhi.n	80018c4 <UART_SetConfig+0x258>
 800188c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001890:	d00c      	beq.n	80018ac <UART_SetConfig+0x240>
 8001892:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001896:	d815      	bhi.n	80018c4 <UART_SetConfig+0x258>
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <UART_SetConfig+0x238>
 800189c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018a0:	d008      	beq.n	80018b4 <UART_SetConfig+0x248>
 80018a2:	e00f      	b.n	80018c4 <UART_SetConfig+0x258>
 80018a4:	2300      	movs	r3, #0
 80018a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80018aa:	e052      	b.n	8001952 <UART_SetConfig+0x2e6>
 80018ac:	2302      	movs	r3, #2
 80018ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80018b2:	e04e      	b.n	8001952 <UART_SetConfig+0x2e6>
 80018b4:	2304      	movs	r3, #4
 80018b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80018ba:	e04a      	b.n	8001952 <UART_SetConfig+0x2e6>
 80018bc:	2308      	movs	r3, #8
 80018be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80018c2:	e046      	b.n	8001952 <UART_SetConfig+0x2e6>
 80018c4:	2310      	movs	r3, #16
 80018c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80018ca:	e042      	b.n	8001952 <UART_SetConfig+0x2e6>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a17      	ldr	r2, [pc, #92]	@ (8001930 <UART_SetConfig+0x2c4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d13a      	bne.n	800194c <UART_SetConfig+0x2e0>
 80018d6:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <UART_SetConfig+0x2cc>)
 80018d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80018e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80018e4:	d01a      	beq.n	800191c <UART_SetConfig+0x2b0>
 80018e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80018ea:	d81b      	bhi.n	8001924 <UART_SetConfig+0x2b8>
 80018ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018f0:	d00c      	beq.n	800190c <UART_SetConfig+0x2a0>
 80018f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018f6:	d815      	bhi.n	8001924 <UART_SetConfig+0x2b8>
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <UART_SetConfig+0x298>
 80018fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001900:	d008      	beq.n	8001914 <UART_SetConfig+0x2a8>
 8001902:	e00f      	b.n	8001924 <UART_SetConfig+0x2b8>
 8001904:	2300      	movs	r3, #0
 8001906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800190a:	e022      	b.n	8001952 <UART_SetConfig+0x2e6>
 800190c:	2302      	movs	r3, #2
 800190e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001912:	e01e      	b.n	8001952 <UART_SetConfig+0x2e6>
 8001914:	2304      	movs	r3, #4
 8001916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800191a:	e01a      	b.n	8001952 <UART_SetConfig+0x2e6>
 800191c:	2308      	movs	r3, #8
 800191e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001922:	e016      	b.n	8001952 <UART_SetConfig+0x2e6>
 8001924:	2310      	movs	r3, #16
 8001926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800192a:	e012      	b.n	8001952 <UART_SetConfig+0x2e6>
 800192c:	efff69f3 	.word	0xefff69f3
 8001930:	40008000 	.word	0x40008000
 8001934:	40013800 	.word	0x40013800
 8001938:	40021000 	.word	0x40021000
 800193c:	40004400 	.word	0x40004400
 8001940:	40004800 	.word	0x40004800
 8001944:	40004c00 	.word	0x40004c00
 8001948:	40005000 	.word	0x40005000
 800194c:	2310      	movs	r3, #16
 800194e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a9f      	ldr	r2, [pc, #636]	@ (8001bd4 <UART_SetConfig+0x568>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d17a      	bne.n	8001a52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800195c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001960:	2b08      	cmp	r3, #8
 8001962:	d824      	bhi.n	80019ae <UART_SetConfig+0x342>
 8001964:	a201      	add	r2, pc, #4	@ (adr r2, 800196c <UART_SetConfig+0x300>)
 8001966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196a:	bf00      	nop
 800196c:	08001991 	.word	0x08001991
 8001970:	080019af 	.word	0x080019af
 8001974:	08001999 	.word	0x08001999
 8001978:	080019af 	.word	0x080019af
 800197c:	0800199f 	.word	0x0800199f
 8001980:	080019af 	.word	0x080019af
 8001984:	080019af 	.word	0x080019af
 8001988:	080019af 	.word	0x080019af
 800198c:	080019a7 	.word	0x080019a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001990:	f7ff fa3e 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
 8001994:	61f8      	str	r0, [r7, #28]
        break;
 8001996:	e010      	b.n	80019ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001998:	4b8f      	ldr	r3, [pc, #572]	@ (8001bd8 <UART_SetConfig+0x56c>)
 800199a:	61fb      	str	r3, [r7, #28]
        break;
 800199c:	e00d      	b.n	80019ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800199e:	f7ff f99f 	bl	8000ce0 <HAL_RCC_GetSysClockFreq>
 80019a2:	61f8      	str	r0, [r7, #28]
        break;
 80019a4:	e009      	b.n	80019ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80019a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019aa:	61fb      	str	r3, [r7, #28]
        break;
 80019ac:	e005      	b.n	80019ba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80019b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80fb 	beq.w	8001bb8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d305      	bcc.n	80019de <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d903      	bls.n	80019e6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80019e4:	e0e8      	b.n	8001bb8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2200      	movs	r2, #0
 80019ea:	461c      	mov	r4, r3
 80019ec:	4615      	mov	r5, r2
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	022b      	lsls	r3, r5, #8
 80019f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80019fc:	0222      	lsls	r2, r4, #8
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	6849      	ldr	r1, [r1, #4]
 8001a02:	0849      	lsrs	r1, r1, #1
 8001a04:	2000      	movs	r0, #0
 8001a06:	4688      	mov	r8, r1
 8001a08:	4681      	mov	r9, r0
 8001a0a:	eb12 0a08 	adds.w	sl, r2, r8
 8001a0e:	eb43 0b09 	adc.w	fp, r3, r9
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	607a      	str	r2, [r7, #4]
 8001a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a20:	4650      	mov	r0, sl
 8001a22:	4659      	mov	r1, fp
 8001a24:	f7fe fbd2 	bl	80001cc <__aeabi_uldivmod>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001a36:	d308      	bcc.n	8001a4a <UART_SetConfig+0x3de>
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a3e:	d204      	bcs.n	8001a4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	e0b6      	b.n	8001bb8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001a50:	e0b2      	b.n	8001bb8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a5a:	d15e      	bne.n	8001b1a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8001a5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d828      	bhi.n	8001ab6 <UART_SetConfig+0x44a>
 8001a64:	a201      	add	r2, pc, #4	@ (adr r2, 8001a6c <UART_SetConfig+0x400>)
 8001a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6a:	bf00      	nop
 8001a6c:	08001a91 	.word	0x08001a91
 8001a70:	08001a99 	.word	0x08001a99
 8001a74:	08001aa1 	.word	0x08001aa1
 8001a78:	08001ab7 	.word	0x08001ab7
 8001a7c:	08001aa7 	.word	0x08001aa7
 8001a80:	08001ab7 	.word	0x08001ab7
 8001a84:	08001ab7 	.word	0x08001ab7
 8001a88:	08001ab7 	.word	0x08001ab7
 8001a8c:	08001aaf 	.word	0x08001aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a90:	f7ff f9be 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
 8001a94:	61f8      	str	r0, [r7, #28]
        break;
 8001a96:	e014      	b.n	8001ac2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001a98:	f7ff f9d0 	bl	8000e3c <HAL_RCC_GetPCLK2Freq>
 8001a9c:	61f8      	str	r0, [r7, #28]
        break;
 8001a9e:	e010      	b.n	8001ac2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001aa0:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd8 <UART_SetConfig+0x56c>)
 8001aa2:	61fb      	str	r3, [r7, #28]
        break;
 8001aa4:	e00d      	b.n	8001ac2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001aa6:	f7ff f91b 	bl	8000ce0 <HAL_RCC_GetSysClockFreq>
 8001aaa:	61f8      	str	r0, [r7, #28]
        break;
 8001aac:	e009      	b.n	8001ac2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001aae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ab2:	61fb      	str	r3, [r7, #28]
        break;
 8001ab4:	e005      	b.n	8001ac2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8001ac0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d077      	beq.n	8001bb8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005a      	lsls	r2, r3, #1
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	441a      	add	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d916      	bls.n	8001b12 <UART_SetConfig+0x4a6>
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aea:	d212      	bcs.n	8001b12 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	f023 030f 	bic.w	r3, r3, #15
 8001af4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	085b      	lsrs	r3, r3, #1
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	8afb      	ldrh	r3, [r7, #22]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	8afa      	ldrh	r2, [r7, #22]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	e052      	b.n	8001bb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001b18:	e04e      	b.n	8001bb8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d827      	bhi.n	8001b72 <UART_SetConfig+0x506>
 8001b22:	a201      	add	r2, pc, #4	@ (adr r2, 8001b28 <UART_SetConfig+0x4bc>)
 8001b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b28:	08001b4d 	.word	0x08001b4d
 8001b2c:	08001b55 	.word	0x08001b55
 8001b30:	08001b5d 	.word	0x08001b5d
 8001b34:	08001b73 	.word	0x08001b73
 8001b38:	08001b63 	.word	0x08001b63
 8001b3c:	08001b73 	.word	0x08001b73
 8001b40:	08001b73 	.word	0x08001b73
 8001b44:	08001b73 	.word	0x08001b73
 8001b48:	08001b6b 	.word	0x08001b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b4c:	f7ff f960 	bl	8000e10 <HAL_RCC_GetPCLK1Freq>
 8001b50:	61f8      	str	r0, [r7, #28]
        break;
 8001b52:	e014      	b.n	8001b7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001b54:	f7ff f972 	bl	8000e3c <HAL_RCC_GetPCLK2Freq>
 8001b58:	61f8      	str	r0, [r7, #28]
        break;
 8001b5a:	e010      	b.n	8001b7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd8 <UART_SetConfig+0x56c>)
 8001b5e:	61fb      	str	r3, [r7, #28]
        break;
 8001b60:	e00d      	b.n	8001b7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001b62:	f7ff f8bd 	bl	8000ce0 <HAL_RCC_GetSysClockFreq>
 8001b66:	61f8      	str	r0, [r7, #28]
        break;
 8001b68:	e009      	b.n	8001b7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b6e:	61fb      	str	r3, [r7, #28]
        break;
 8001b70:	e005      	b.n	8001b7e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8001b7c:	bf00      	nop
    }

    if (pclk != 0U)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d019      	beq.n	8001bb8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	085a      	lsrs	r2, r3, #1
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	441a      	add	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2b0f      	cmp	r3, #15
 8001b9c:	d909      	bls.n	8001bb2 <UART_SetConfig+0x546>
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba4:	d205      	bcs.n	8001bb2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	e002      	b.n	8001bb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8001bc4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3728      	adds	r7, #40	@ 0x28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40008000 	.word	0x40008000
 8001bd8:	00f42400 	.word	0x00f42400

08001bdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00a      	beq.n	8001c06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00a      	beq.n	8001c28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00a      	beq.n	8001c4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00a      	beq.n	8001c6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00a      	beq.n	8001c8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00a      	beq.n	8001cb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01a      	beq.n	8001cf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cda:	d10a      	bne.n	8001cf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00a      	beq.n	8001d14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	605a      	str	r2, [r3, #4]
  }
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b098      	sub	sp, #96	@ 0x60
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001d30:	f7fe fc52 	bl	80005d8 <HAL_GetTick>
 8001d34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d12e      	bne.n	8001da2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f88c 	bl	8001e70 <UART_WaitOnFlagUntilTimeout>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d021      	beq.n	8001da2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d66:	e853 3f00 	ldrex	r3, [r3]
 8001d6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d72:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001d82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d84:	e841 2300 	strex	r3, r2, [r1]
 8001d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1e6      	bne.n	8001d5e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2220      	movs	r2, #32
 8001d94:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e062      	b.n	8001e68 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d149      	bne.n	8001e44 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001db0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001db8:	2200      	movs	r2, #0
 8001dba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f856 	bl	8001e70 <UART_WaitOnFlagUntilTimeout>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d03c      	beq.n	8001e44 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd2:	e853 3f00 	ldrex	r3, [r3]
 8001dd6:	623b      	str	r3, [r7, #32]
   return(result);
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001de8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001df0:	e841 2300 	strex	r3, r2, [r1]
 8001df4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e6      	bne.n	8001dca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	3308      	adds	r3, #8
 8001e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	e853 3f00 	ldrex	r3, [r3]
 8001e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f023 0301 	bic.w	r3, r3, #1
 8001e12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	3308      	adds	r3, #8
 8001e1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e1c:	61fa      	str	r2, [r7, #28]
 8001e1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e20:	69b9      	ldr	r1, [r7, #24]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	e841 2300 	strex	r3, r2, [r1]
 8001e28:	617b      	str	r3, [r7, #20]
   return(result);
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1e5      	bne.n	8001dfc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e011      	b.n	8001e68 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3758      	adds	r7, #88	@ 0x58
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e80:	e049      	b.n	8001f16 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d045      	beq.n	8001f16 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e8a:	f7fe fba5 	bl	80005d8 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d302      	bcc.n	8001ea0 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e048      	b.n	8001f36 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d031      	beq.n	8001f16 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d110      	bne.n	8001ee2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f8ff 	bl	80020cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e029      	b.n	8001f36 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ef0:	d111      	bne.n	8001f16 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001efa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 f8e5 	bl	80020cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e00f      	b.n	8001f36 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	69da      	ldr	r2, [r3, #28]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	bf0c      	ite	eq
 8001f26:	2301      	moveq	r3, #1
 8001f28:	2300      	movne	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d0a6      	beq.n	8001e82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b097      	sub	sp, #92	@ 0x5c
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	88fa      	ldrh	r2, [r7, #6]
 8001f58:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	88fa      	ldrh	r2, [r7, #6]
 8001f60:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f72:	d10e      	bne.n	8001f92 <UART_Start_Receive_IT+0x52>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <UART_Start_Receive_IT+0x48>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001f82:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8001f86:	e02d      	b.n	8001fe4 <UART_Start_Receive_IT+0xa4>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	22ff      	movs	r2, #255	@ 0xff
 8001f8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8001f90:	e028      	b.n	8001fe4 <UART_Start_Receive_IT+0xa4>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10d      	bne.n	8001fb6 <UART_Start_Receive_IT+0x76>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d104      	bne.n	8001fac <UART_Start_Receive_IT+0x6c>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	22ff      	movs	r2, #255	@ 0xff
 8001fa6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8001faa:	e01b      	b.n	8001fe4 <UART_Start_Receive_IT+0xa4>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	227f      	movs	r2, #127	@ 0x7f
 8001fb0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8001fb4:	e016      	b.n	8001fe4 <UART_Start_Receive_IT+0xa4>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fbe:	d10d      	bne.n	8001fdc <UART_Start_Receive_IT+0x9c>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d104      	bne.n	8001fd2 <UART_Start_Receive_IT+0x92>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	227f      	movs	r2, #127	@ 0x7f
 8001fcc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8001fd0:	e008      	b.n	8001fe4 <UART_Start_Receive_IT+0xa4>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	223f      	movs	r2, #63	@ 0x3f
 8001fd6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8001fda:	e003      	b.n	8001fe4 <UART_Start_Receive_IT+0xa4>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2222      	movs	r2, #34	@ 0x22
 8001ff0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3308      	adds	r3, #8
 8001ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ffe:	e853 3f00 	ldrex	r3, [r3]
 8002002:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	657b      	str	r3, [r7, #84]	@ 0x54
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	3308      	adds	r3, #8
 8002012:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002014:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002016:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002018:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800201a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800201c:	e841 2300 	strex	r3, r2, [r1]
 8002020:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8002022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e5      	bne.n	8001ff4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002030:	d107      	bne.n	8002042 <UART_Start_Receive_IT+0x102>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d103      	bne.n	8002042 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4a21      	ldr	r2, [pc, #132]	@ (80020c4 <UART_Start_Receive_IT+0x184>)
 800203e:	669a      	str	r2, [r3, #104]	@ 0x68
 8002040:	e002      	b.n	8002048 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4a20      	ldr	r2, [pc, #128]	@ (80020c8 <UART_Start_Receive_IT+0x188>)
 8002046:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d019      	beq.n	8002084 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002058:	e853 3f00 	ldrex	r3, [r3]
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8002064:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800206e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002070:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002072:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002074:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002076:	e841 2300 	strex	r3, r2, [r1]
 800207a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800207c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1e6      	bne.n	8002050 <UART_Start_Receive_IT+0x110>
 8002082:	e018      	b.n	80020b6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	e853 3f00 	ldrex	r3, [r3]
 8002090:	613b      	str	r3, [r7, #16]
   return(result);
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	f043 0320 	orr.w	r3, r3, #32
 8002098:	653b      	str	r3, [r7, #80]	@ 0x50
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020a2:	623b      	str	r3, [r7, #32]
 80020a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020a6:	69f9      	ldr	r1, [r7, #28]
 80020a8:	6a3a      	ldr	r2, [r7, #32]
 80020aa:	e841 2300 	strex	r3, r2, [r1]
 80020ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1e6      	bne.n	8002084 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	375c      	adds	r7, #92	@ 0x5c
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	08002549 	.word	0x08002549
 80020c8:	0800238d 	.word	0x0800238d

080020cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b095      	sub	sp, #84	@ 0x54
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020dc:	e853 3f00 	ldrex	r3, [r3]
 80020e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80020e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80020e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80020f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80020f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80020fa:	e841 2300 	strex	r3, r2, [r1]
 80020fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1e6      	bne.n	80020d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3308      	adds	r3, #8
 800210c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	e853 3f00 	ldrex	r3, [r3]
 8002114:	61fb      	str	r3, [r7, #28]
   return(result);
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3308      	adds	r3, #8
 8002124:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002126:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002128:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800212a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800212c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800212e:	e841 2300 	strex	r3, r2, [r1]
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1e5      	bne.n	8002106 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800213e:	2b01      	cmp	r3, #1
 8002140:	d118      	bne.n	8002174 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	e853 3f00 	ldrex	r3, [r3]
 800214e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f023 0310 	bic.w	r3, r3, #16
 8002156:	647b      	str	r3, [r7, #68]	@ 0x44
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002164:	6979      	ldr	r1, [r7, #20]
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	e841 2300 	strex	r3, r2, [r1]
 800216c:	613b      	str	r3, [r7, #16]
   return(result);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1e6      	bne.n	8002142 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002188:	bf00      	nop
 800218a:	3754      	adds	r7, #84	@ 0x54
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f7ff fa44 	bl	8001640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021b8:	bf00      	nop
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b08f      	sub	sp, #60	@ 0x3c
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021cc:	2b21      	cmp	r3, #33	@ 0x21
 80021ce:	d14c      	bne.n	800226a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d132      	bne.n	8002242 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	e853 3f00 	ldrex	r3, [r3]
 80021e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021fc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002202:	e841 2300 	strex	r3, r2, [r1]
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1e6      	bne.n	80021dc <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	e853 3f00 	ldrex	r3, [r3]
 800221a:	60bb      	str	r3, [r7, #8]
   return(result);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002222:	633b      	str	r3, [r7, #48]	@ 0x30
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002230:	6979      	ldr	r1, [r7, #20]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	e841 2300 	strex	r3, r2, [r1]
 8002238:	613b      	str	r3, [r7, #16]
   return(result);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1e6      	bne.n	800220e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002240:	e013      	b.n	800226a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800226a:	bf00      	nop
 800226c:	373c      	adds	r7, #60	@ 0x3c
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002276:	b480      	push	{r7}
 8002278:	b091      	sub	sp, #68	@ 0x44
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002282:	2b21      	cmp	r3, #33	@ 0x21
 8002284:	d151      	bne.n	800232a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d132      	bne.n	80022f8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229a:	e853 3f00 	ldrex	r3, [r3]
 800229e:	623b      	str	r3, [r7, #32]
   return(result);
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80022b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80022b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022b8:	e841 2300 	strex	r3, r2, [r1]
 80022bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80022be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1e6      	bne.n	8002292 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	e853 3f00 	ldrex	r3, [r3]
 80022d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e6:	69b9      	ldr	r1, [r7, #24]
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	e841 2300 	strex	r3, r2, [r1]
 80022ee:	617b      	str	r3, [r7, #20]
   return(result);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1e6      	bne.n	80022c4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80022f6:	e018      	b.n	800232a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80022fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002300:	881a      	ldrh	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800230a:	b292      	uxth	r2, r2
 800230c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002312:	1c9a      	adds	r2, r3, #2
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800232a:	bf00      	nop
 800232c:	3744      	adds	r7, #68	@ 0x44
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b088      	sub	sp, #32
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	e853 3f00 	ldrex	r3, [r3]
 800234a:	60bb      	str	r3, [r7, #8]
   return(result);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002360:	6979      	ldr	r1, [r7, #20]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	e841 2300 	strex	r3, r2, [r1]
 8002368:	613b      	str	r3, [r7, #16]
   return(result);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1e6      	bne.n	800233e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2220      	movs	r2, #32
 8002374:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f9cb 	bl	8002718 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002382:	bf00      	nop
 8002384:	3720      	adds	r7, #32
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b09c      	sub	sp, #112	@ 0x70
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800239a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023a4:	2b22      	cmp	r3, #34	@ 0x22
 80023a6:	f040 80be 	bne.w	8002526 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80023b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80023b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80023b8:	b2d9      	uxtb	r1, r3
 80023ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c4:	400a      	ands	r2, r1
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f040 80a3 	bne.w	800253a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023fc:	e853 3f00 	ldrex	r3, [r3]
 8002400:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002408:	66bb      	str	r3, [r7, #104]	@ 0x68
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002412:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002414:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002416:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002418:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800241a:	e841 2300 	strex	r3, r2, [r1]
 800241e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1e6      	bne.n	80023f4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3308      	adds	r3, #8
 800242c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002430:	e853 3f00 	ldrex	r3, [r3]
 8002434:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002438:	f023 0301 	bic.w	r3, r3, #1
 800243c:	667b      	str	r3, [r7, #100]	@ 0x64
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3308      	adds	r3, #8
 8002444:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002446:	647a      	str	r2, [r7, #68]	@ 0x44
 8002448:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800244c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800244e:	e841 2300 	strex	r3, r2, [r1]
 8002452:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1e5      	bne.n	8002426 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2220      	movs	r2, #32
 800245e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a34      	ldr	r2, [pc, #208]	@ (8002544 <UART_RxISR_8BIT+0x1b8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d01f      	beq.n	80024b8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d018      	beq.n	80024b8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	e853 3f00 	ldrex	r3, [r3]
 8002492:	623b      	str	r3, [r7, #32]
   return(result);
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800249a:	663b      	str	r3, [r7, #96]	@ 0x60
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80024a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024ac:	e841 2300 	strex	r3, r2, [r1]
 80024b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80024b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1e6      	bne.n	8002486 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d12e      	bne.n	800251e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	e853 3f00 	ldrex	r3, [r3]
 80024d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0310 	bic.w	r3, r3, #16
 80024da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e8:	69b9      	ldr	r1, [r7, #24]
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	e841 2300 	strex	r3, r2, [r1]
 80024f0:	617b      	str	r3, [r7, #20]
   return(result);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e6      	bne.n	80024c6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b10      	cmp	r3, #16
 8002504:	d103      	bne.n	800250e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2210      	movs	r2, #16
 800250c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002514:	4619      	mov	r1, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff f89c 	bl	8001654 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800251c:	e00d      	b.n	800253a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f90c 	bl	800273c <HAL_UART_RxCpltCallback>
}
 8002524:	e009      	b.n	800253a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	8b1b      	ldrh	r3, [r3, #24]
 800252c:	b29a      	uxth	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0208 	orr.w	r2, r2, #8
 8002536:	b292      	uxth	r2, r2
 8002538:	831a      	strh	r2, [r3, #24]
}
 800253a:	bf00      	nop
 800253c:	3770      	adds	r7, #112	@ 0x70
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40008000 	.word	0x40008000

08002548 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b09c      	sub	sp, #112	@ 0x70
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002556:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002560:	2b22      	cmp	r3, #34	@ 0x22
 8002562:	f040 80be 	bne.w	80026e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800256c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002574:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8002576:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800257a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800257e:	4013      	ands	r3, r2
 8002580:	b29a      	uxth	r2, r3
 8002582:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002584:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258a:	1c9a      	adds	r2, r3, #2
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 80a3 	bne.w	80026f6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025b8:	e853 3f00 	ldrex	r3, [r3]
 80025bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80025be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80025d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80025d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80025d6:	e841 2300 	strex	r3, r2, [r1]
 80025da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80025dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1e6      	bne.n	80025b0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3308      	adds	r3, #8
 80025e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ec:	e853 3f00 	ldrex	r3, [r3]
 80025f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3308      	adds	r3, #8
 8002600:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002602:	643a      	str	r2, [r7, #64]	@ 0x40
 8002604:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002606:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002608:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800260a:	e841 2300 	strex	r3, r2, [r1]
 800260e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1e5      	bne.n	80025e2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a34      	ldr	r2, [pc, #208]	@ (8002700 <UART_RxISR_16BIT+0x1b8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d01f      	beq.n	8002674 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d018      	beq.n	8002674 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	e853 3f00 	ldrex	r3, [r3]
 800264e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002656:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002662:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002664:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002668:	e841 2300 	strex	r3, r2, [r1]
 800266c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e6      	bne.n	8002642 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002678:	2b01      	cmp	r3, #1
 800267a:	d12e      	bne.n	80026da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	e853 3f00 	ldrex	r3, [r3]
 800268e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f023 0310 	bic.w	r3, r3, #16
 8002696:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a4:	6979      	ldr	r1, [r7, #20]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	e841 2300 	strex	r3, r2, [r1]
 80026ac:	613b      	str	r3, [r7, #16]
   return(result);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1e6      	bne.n	8002682 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	2b10      	cmp	r3, #16
 80026c0:	d103      	bne.n	80026ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2210      	movs	r2, #16
 80026c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80026d0:	4619      	mov	r1, r3
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fe ffbe 	bl	8001654 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80026d8:	e00d      	b.n	80026f6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f82e 	bl	800273c <HAL_UART_RxCpltCallback>
}
 80026e0:	e009      	b.n	80026f6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	8b1b      	ldrh	r3, [r3, #24]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0208 	orr.w	r2, r2, #8
 80026f2:	b292      	uxth	r2, r2
 80026f4:	831a      	strh	r2, [r3, #24]
}
 80026f6:	bf00      	nop
 80026f8:	3770      	adds	r7, #112	@ 0x70
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40008000 	.word	0x40008000

08002704 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_UART_TxCpltCallback>:
void uart_init(void);
void led_init(void);
void Error_Handler(void);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *husart)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	tx_count++;
 8002720:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <HAL_UART_TxCpltCallback+0x20>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	4a04      	ldr	r2, [pc, #16]	@ (8002738 <HAL_UART_TxCpltCallback+0x20>)
 8002728:	6013      	str	r3, [r2, #0]

}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	200000d0 	.word	0x200000d0

0800273c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *husart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	rx_count++;
 8002744:	4b09      	ldr	r3, [pc, #36]	@ (800276c <HAL_UART_RxCpltCallback+0x30>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	4a08      	ldr	r2, [pc, #32]	@ (800276c <HAL_UART_RxCpltCallback+0x30>)
 800274c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800274e:	2120      	movs	r1, #32
 8002750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002754:	f7fe faaa 	bl	8000cac <HAL_GPIO_TogglePin>

	HAL_UART_Receive_IT(&huart1, rx_buffer, 10);
 8002758:	220a      	movs	r2, #10
 800275a:	4905      	ldr	r1, [pc, #20]	@ (8002770 <HAL_UART_RxCpltCallback+0x34>)
 800275c:	4805      	ldr	r0, [pc, #20]	@ (8002774 <HAL_UART_RxCpltCallback+0x38>)
 800275e:	f7fe fc39 	bl	8000fd4 <HAL_UART_Receive_IT>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200000cc 	.word	0x200000cc
 8002770:	200000c0 	.word	0x200000c0
 8002774:	20000038 	.word	0x20000038

08002778 <main>:

int main()
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
	HAL_Init();
 800277c:	f7fd febc 	bl	80004f8 <HAL_Init>
	uart_init();
 8002780:	f000 f81e 	bl	80027c0 <uart_init>
	led_init();
 8002784:	f000 f88a 	bl	800289c <led_init>

	HAL_UART_Transmit_IT(&huart1, tx_buiffer, 10);
 8002788:	220a      	movs	r2, #10
 800278a:	490a      	ldr	r1, [pc, #40]	@ (80027b4 <main+0x3c>)
 800278c:	480a      	ldr	r0, [pc, #40]	@ (80027b8 <main+0x40>)
 800278e:	f7fe fbc3 	bl	8000f18 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, rx_buffer, 10);
 8002792:	220a      	movs	r2, #10
 8002794:	4909      	ldr	r1, [pc, #36]	@ (80027bc <main+0x44>)
 8002796:	4808      	ldr	r0, [pc, #32]	@ (80027b8 <main+0x40>)
 8002798:	f7fe fc1c 	bl	8000fd4 <HAL_UART_Receive_IT>
	while(1)
	{
		//tx_count++;
		HAL_UART_Transmit_IT(&huart1, tx_buiffer, 10);
 800279c:	220a      	movs	r2, #10
 800279e:	4905      	ldr	r1, [pc, #20]	@ (80027b4 <main+0x3c>)
 80027a0:	4805      	ldr	r0, [pc, #20]	@ (80027b8 <main+0x40>)
 80027a2:	f7fe fbb9 	bl	8000f18 <HAL_UART_Transmit_IT>
		HAL_Delay(1000);
 80027a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027aa:	f7fd ff21 	bl	80005f0 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart1, tx_buiffer, 10);
 80027ae:	bf00      	nop
 80027b0:	e7f4      	b.n	800279c <main+0x24>
 80027b2:	bf00      	nop
 80027b4:	20000008 	.word	0x20000008
 80027b8:	20000038 	.word	0x20000038
 80027bc:	200000c0 	.word	0x200000c0

080027c0 <uart_init>:
	}
}

void uart_init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c6:	f107 030c 	add.w	r3, r7, #12
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]
 80027d4:	611a      	str	r2, [r3, #16]
	//Enable clock for UART pins
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002890 <uart_init+0xd0>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027da:	4a2d      	ldr	r2, [pc, #180]	@ (8002890 <uart_init+0xd0>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002890 <uart_init+0xd0>)
 80027e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]

	//Enable UART module clock access
	__HAL_RCC_USART1_CLK_ENABLE();
 80027ee:	4b28      	ldr	r3, [pc, #160]	@ (8002890 <uart_init+0xd0>)
 80027f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f2:	4a27      	ldr	r2, [pc, #156]	@ (8002890 <uart_init+0xd0>)
 80027f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80027fa:	4b25      	ldr	r3, [pc, #148]	@ (8002890 <uart_init+0xd0>)
 80027fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]

	//Configure GPIO pins as alternate functionality pins for UART2
	GPIO_InitStruct.Pin   = GPIO_PIN_9 | GPIO_PIN_10;
 8002806:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800280a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002814:	2303      	movs	r3, #3
 8002816:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002818:	2307      	movs	r3, #7
 800281a:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281c:	f107 030c 	add.w	r3, r7, #12
 8002820:	4619      	mov	r1, r3
 8002822:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002826:	f7fe f897 	bl	8000958 <HAL_GPIO_Init>

	  huart1.Instance = USART1;
 800282a:	4b1a      	ldr	r3, [pc, #104]	@ (8002894 <uart_init+0xd4>)
 800282c:	4a1a      	ldr	r2, [pc, #104]	@ (8002898 <uart_init+0xd8>)
 800282e:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate = 115200;
 8002830:	4b18      	ldr	r3, [pc, #96]	@ (8002894 <uart_init+0xd4>)
 8002832:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002836:	605a      	str	r2, [r3, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002838:	4b16      	ldr	r3, [pc, #88]	@ (8002894 <uart_init+0xd4>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 800283e:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <uart_init+0xd4>)
 8002840:	2200      	movs	r2, #0
 8002842:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 8002844:	4b13      	ldr	r3, [pc, #76]	@ (8002894 <uart_init+0xd4>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 800284a:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <uart_init+0xd4>)
 800284c:	220c      	movs	r2, #12
 800284e:	615a      	str	r2, [r3, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002850:	4b10      	ldr	r3, [pc, #64]	@ (8002894 <uart_init+0xd4>)
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002856:	4b0f      	ldr	r3, [pc, #60]	@ (8002894 <uart_init+0xd4>)
 8002858:	2200      	movs	r2, #0
 800285a:	61da      	str	r2, [r3, #28]
	  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800285c:	4b0d      	ldr	r3, [pc, #52]	@ (8002894 <uart_init+0xd4>)
 800285e:	2200      	movs	r2, #0
 8002860:	621a      	str	r2, [r3, #32]
	  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002862:	4b0c      	ldr	r3, [pc, #48]	@ (8002894 <uart_init+0xd4>)
 8002864:	2200      	movs	r2, #0
 8002866:	625a      	str	r2, [r3, #36]	@ 0x24
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002868:	480a      	ldr	r0, [pc, #40]	@ (8002894 <uart_init+0xd4>)
 800286a:	f7fe fafd 	bl	8000e68 <HAL_UART_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <uart_init+0xb8>
	  {
	    Error_Handler();
 8002874:	f000 f84c 	bl	8002910 <Error_Handler>
	  }

	  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002878:	2200      	movs	r2, #0
 800287a:	2100      	movs	r1, #0
 800287c:	2025      	movs	r0, #37	@ 0x25
 800287e:	f7fd ffb6 	bl	80007ee <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002882:	2025      	movs	r0, #37	@ 0x25
 8002884:	f7fd ffcf 	bl	8000826 <HAL_NVIC_EnableIRQ>

}
 8002888:	bf00      	nop
 800288a:	3720      	adds	r7, #32
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	20000038 	.word	0x20000038
 8002898:	40013800 	.word	0x40013800

0800289c <led_init>:
void led_init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
	//1. Configure PA5 as GPIO output for LED
	//Enable Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80028b0:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <led_init+0x50>)
 80028b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b4:	4a0d      	ldr	r2, [pc, #52]	@ (80028ec <led_init+0x50>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028bc:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <led_init+0x50>)
 80028be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	603b      	str	r3, [r7, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = LED_PIN;
 80028c8:	2320      	movs	r3, #32
 80028ca:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028cc:	2301      	movs	r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	2300      	movs	r3, #0
 80028d6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028e0:	f7fe f83a 	bl	8000958 <HAL_GPIO_Init>
}
 80028e4:	bf00      	nop
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000

080028f0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 80028f4:	4802      	ldr	r0, [pc, #8]	@ (8002900 <USART1_IRQHandler+0x10>)
 80028f6:	f7fe fbb9 	bl	800106c <HAL_UART_IRQHandler>
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000038 	.word	0x20000038

08002904 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002908:	f7fd fe52 	bl	80005b0 <HAL_IncTick>
}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}

08002910 <Error_Handler>:
void Error_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0

}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002920:	480d      	ldr	r0, [pc, #52]	@ (8002958 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002922:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002924:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002928:	480c      	ldr	r0, [pc, #48]	@ (800295c <LoopForever+0x6>)
  ldr r1, =_edata
 800292a:	490d      	ldr	r1, [pc, #52]	@ (8002960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800292c:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <LoopForever+0xe>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002930:	e002      	b.n	8002938 <LoopCopyDataInit>

08002932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002936:	3304      	adds	r3, #4

08002938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800293c:	d3f9      	bcc.n	8002932 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002940:	4c0a      	ldr	r4, [pc, #40]	@ (800296c <LoopForever+0x16>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002944:	e001      	b.n	800294a <LoopFillZerobss>

08002946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002948:	3204      	adds	r2, #4

0800294a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800294c:	d3fb      	bcc.n	8002946 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800294e:	f000 f811 	bl	8002974 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8002952:	f7ff ff11 	bl	8002778 <main>

08002956 <LoopForever>:

LoopForever:
  b LoopForever
 8002956:	e7fe      	b.n	8002956 <LoopForever>
  ldr   r0, =_estack
 8002958:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800295c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002960:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002964:	08002a1c 	.word	0x08002a1c
  ldr r2, =_sbss
 8002968:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800296c:	200000d4 	.word	0x200000d4

08002970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002970:	e7fe      	b.n	8002970 <ADC1_2_IRQHandler>
	...

08002974 <__libc_init_array>:
 8002974:	b570      	push	{r4, r5, r6, lr}
 8002976:	4d0d      	ldr	r5, [pc, #52]	@ (80029ac <__libc_init_array+0x38>)
 8002978:	4c0d      	ldr	r4, [pc, #52]	@ (80029b0 <__libc_init_array+0x3c>)
 800297a:	1b64      	subs	r4, r4, r5
 800297c:	10a4      	asrs	r4, r4, #2
 800297e:	2600      	movs	r6, #0
 8002980:	42a6      	cmp	r6, r4
 8002982:	d109      	bne.n	8002998 <__libc_init_array+0x24>
 8002984:	4d0b      	ldr	r5, [pc, #44]	@ (80029b4 <__libc_init_array+0x40>)
 8002986:	4c0c      	ldr	r4, [pc, #48]	@ (80029b8 <__libc_init_array+0x44>)
 8002988:	f000 f818 	bl	80029bc <_init>
 800298c:	1b64      	subs	r4, r4, r5
 800298e:	10a4      	asrs	r4, r4, #2
 8002990:	2600      	movs	r6, #0
 8002992:	42a6      	cmp	r6, r4
 8002994:	d105      	bne.n	80029a2 <__libc_init_array+0x2e>
 8002996:	bd70      	pop	{r4, r5, r6, pc}
 8002998:	f855 3b04 	ldr.w	r3, [r5], #4
 800299c:	4798      	blx	r3
 800299e:	3601      	adds	r6, #1
 80029a0:	e7ee      	b.n	8002980 <__libc_init_array+0xc>
 80029a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a6:	4798      	blx	r3
 80029a8:	3601      	adds	r6, #1
 80029aa:	e7f2      	b.n	8002992 <__libc_init_array+0x1e>
 80029ac:	08002a14 	.word	0x08002a14
 80029b0:	08002a14 	.word	0x08002a14
 80029b4:	08002a14 	.word	0x08002a14
 80029b8:	08002a18 	.word	0x08002a18

080029bc <_init>:
 80029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029be:	bf00      	nop
 80029c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c2:	bc08      	pop	{r3}
 80029c4:	469e      	mov	lr, r3
 80029c6:	4770      	bx	lr

080029c8 <_fini>:
 80029c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ca:	bf00      	nop
 80029cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ce:	bc08      	pop	{r3}
 80029d0:	469e      	mov	lr, r3
 80029d2:	4770      	bx	lr
