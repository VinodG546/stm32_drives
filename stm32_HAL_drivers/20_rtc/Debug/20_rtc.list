
20_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002928  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002ab8  08002ab8  00003ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b3c  08002b3c  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002b3c  08002b3c  00003b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b44  08002b44  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b44  08002b44  00003b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b48  08002b48  00003b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002b4c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          000001b0  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000020c  2000020c  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006976  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000143d  00000000  00000000  0000aa02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c0  00000000  00000000  0000be40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c0  00000000  00000000  0000c600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001dbf  00000000  00000000  0000cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008acf  00000000  00000000  0000e97f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eef7f  00000000  00000000  0001744e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001063cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023ac  00000000  00000000  00106410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001087bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002aa0 	.word	0x08002aa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08002aa0 	.word	0x08002aa0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000276:	2300      	movs	r3, #0
 8000278:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800027a:	2003      	movs	r0, #3
 800027c:	f000 f926 	bl	80004cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000280:	200f      	movs	r0, #15
 8000282:	f000 f815 	bl	80002b0 <HAL_InitTick>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d002      	beq.n	8000292 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800028c:	2301      	movs	r3, #1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	e001      	b.n	8000296 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000292:	f000 f805 	bl	80002a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000296:	79fb      	ldrb	r3, [r7, #7]
}
 8000298:	4618      	mov	r0, r3
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
	...

080002b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80002b8:	2300      	movs	r3, #0
 80002ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80002bc:	4b17      	ldr	r3, [pc, #92]	@ (800031c <HAL_InitTick+0x6c>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d023      	beq.n	800030c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80002c4:	4b16      	ldr	r3, [pc, #88]	@ (8000320 <HAL_InitTick+0x70>)
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	4b14      	ldr	r3, [pc, #80]	@ (800031c <HAL_InitTick+0x6c>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	4619      	mov	r1, r3
 80002ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 f91d 	bl	800051a <HAL_SYSTICK_Config>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d10f      	bne.n	8000306 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2b0f      	cmp	r3, #15
 80002ea:	d809      	bhi.n	8000300 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002ec:	2200      	movs	r2, #0
 80002ee:	6879      	ldr	r1, [r7, #4]
 80002f0:	f04f 30ff 	mov.w	r0, #4294967295
 80002f4:	f000 f8f5 	bl	80004e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80002f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000324 <HAL_InitTick+0x74>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	6013      	str	r3, [r2, #0]
 80002fe:	e007      	b.n	8000310 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000300:	2301      	movs	r3, #1
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e004      	b.n	8000310 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000306:	2301      	movs	r3, #1
 8000308:	73fb      	strb	r3, [r7, #15]
 800030a:	e001      	b.n	8000310 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800030c:	2301      	movs	r3, #1
 800030e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000310:	7bfb      	ldrb	r3, [r7, #15]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000004 	.word	0x20000004
 8000320:	20000008 	.word	0x20000008
 8000324:	20000000 	.word	0x20000000

08000328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800032c:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <HAL_IncTick+0x20>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	461a      	mov	r2, r3
 8000332:	4b06      	ldr	r3, [pc, #24]	@ (800034c <HAL_IncTick+0x24>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4413      	add	r3, r2
 8000338:	4a04      	ldr	r2, [pc, #16]	@ (800034c <HAL_IncTick+0x24>)
 800033a:	6013      	str	r3, [r2, #0]
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	20000004 	.word	0x20000004
 800034c:	20000078 	.word	0x20000078

08000350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  return uwTick;
 8000354:	4b03      	ldr	r3, [pc, #12]	@ (8000364 <HAL_GetTick+0x14>)
 8000356:	681b      	ldr	r3, [r3, #0]
}
 8000358:	4618      	mov	r0, r3
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20000078 	.word	0x20000078

08000368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	f003 0307 	and.w	r3, r3, #7
 8000376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000378:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <__NVIC_SetPriorityGrouping+0x44>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800037e:	68ba      	ldr	r2, [r7, #8]
 8000380:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000384:	4013      	ands	r3, r2
 8000386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000390:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800039a:	4a04      	ldr	r2, [pc, #16]	@ (80003ac <__NVIC_SetPriorityGrouping+0x44>)
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	60d3      	str	r3, [r2, #12]
}
 80003a0:	bf00      	nop
 80003a2:	3714      	adds	r7, #20
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003b4:	4b04      	ldr	r3, [pc, #16]	@ (80003c8 <__NVIC_GetPriorityGrouping+0x18>)
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	0a1b      	lsrs	r3, r3, #8
 80003ba:	f003 0307 	and.w	r3, r3, #7
}
 80003be:	4618      	mov	r0, r3
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	e000ed00 	.word	0xe000ed00

080003cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	6039      	str	r1, [r7, #0]
 80003d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	db0a      	blt.n	80003f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	490c      	ldr	r1, [pc, #48]	@ (8000418 <__NVIC_SetPriority+0x4c>)
 80003e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ea:	0112      	lsls	r2, r2, #4
 80003ec:	b2d2      	uxtb	r2, r2
 80003ee:	440b      	add	r3, r1
 80003f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003f4:	e00a      	b.n	800040c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4908      	ldr	r1, [pc, #32]	@ (800041c <__NVIC_SetPriority+0x50>)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f003 030f 	and.w	r3, r3, #15
 8000402:	3b04      	subs	r3, #4
 8000404:	0112      	lsls	r2, r2, #4
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	440b      	add	r3, r1
 800040a:	761a      	strb	r2, [r3, #24]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	e000e100 	.word	0xe000e100
 800041c:	e000ed00 	.word	0xe000ed00

08000420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000420:	b480      	push	{r7}
 8000422:	b089      	sub	sp, #36	@ 0x24
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f003 0307 	and.w	r3, r3, #7
 8000432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000434:	69fb      	ldr	r3, [r7, #28]
 8000436:	f1c3 0307 	rsb	r3, r3, #7
 800043a:	2b04      	cmp	r3, #4
 800043c:	bf28      	it	cs
 800043e:	2304      	movcs	r3, #4
 8000440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000442:	69fb      	ldr	r3, [r7, #28]
 8000444:	3304      	adds	r3, #4
 8000446:	2b06      	cmp	r3, #6
 8000448:	d902      	bls.n	8000450 <NVIC_EncodePriority+0x30>
 800044a:	69fb      	ldr	r3, [r7, #28]
 800044c:	3b03      	subs	r3, #3
 800044e:	e000      	b.n	8000452 <NVIC_EncodePriority+0x32>
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000454:	f04f 32ff 	mov.w	r2, #4294967295
 8000458:	69bb      	ldr	r3, [r7, #24]
 800045a:	fa02 f303 	lsl.w	r3, r2, r3
 800045e:	43da      	mvns	r2, r3
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	401a      	ands	r2, r3
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000468:	f04f 31ff 	mov.w	r1, #4294967295
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	fa01 f303 	lsl.w	r3, r1, r3
 8000472:	43d9      	mvns	r1, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000478:	4313      	orrs	r3, r2
         );
}
 800047a:	4618      	mov	r0, r3
 800047c:	3724      	adds	r7, #36	@ 0x24
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
	...

08000488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3b01      	subs	r3, #1
 8000494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000498:	d301      	bcc.n	800049e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800049a:	2301      	movs	r3, #1
 800049c:	e00f      	b.n	80004be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800049e:	4a0a      	ldr	r2, [pc, #40]	@ (80004c8 <SysTick_Config+0x40>)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004a6:	210f      	movs	r1, #15
 80004a8:	f04f 30ff 	mov.w	r0, #4294967295
 80004ac:	f7ff ff8e 	bl	80003cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004b0:	4b05      	ldr	r3, [pc, #20]	@ (80004c8 <SysTick_Config+0x40>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004b6:	4b04      	ldr	r3, [pc, #16]	@ (80004c8 <SysTick_Config+0x40>)
 80004b8:	2207      	movs	r2, #7
 80004ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	e000e010 	.word	0xe000e010

080004cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f7ff ff47 	bl	8000368 <__NVIC_SetPriorityGrouping>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b086      	sub	sp, #24
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	60b9      	str	r1, [r7, #8]
 80004ec:	607a      	str	r2, [r7, #4]
 80004ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004f4:	f7ff ff5c 	bl	80003b0 <__NVIC_GetPriorityGrouping>
 80004f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	68b9      	ldr	r1, [r7, #8]
 80004fe:	6978      	ldr	r0, [r7, #20]
 8000500:	f7ff ff8e 	bl	8000420 <NVIC_EncodePriority>
 8000504:	4602      	mov	r2, r0
 8000506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800050a:	4611      	mov	r1, r2
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff5d 	bl	80003cc <__NVIC_SetPriority>
}
 8000512:	bf00      	nop
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f7ff ffb0 	bl	8000488 <SysTick_Config>
 8000528:	4603      	mov	r3, r0
}
 800052a:	4618      	mov	r0, r3
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000538:	4b04      	ldr	r3, [pc, #16]	@ (800054c <HAL_PWREx_GetVoltageRange+0x18>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000540:	4618      	mov	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40007000 	.word	0x40007000

08000550 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d101      	bne.n	8000562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	e3ca      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000562:	4b97      	ldr	r3, [pc, #604]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	f003 030c 	and.w	r3, r3, #12
 800056a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800056c:	4b94      	ldr	r3, [pc, #592]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	f003 0303 	and.w	r3, r3, #3
 8000574:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f003 0310 	and.w	r3, r3, #16
 800057e:	2b00      	cmp	r3, #0
 8000580:	f000 80e4 	beq.w	800074c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000584:	69bb      	ldr	r3, [r7, #24]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d007      	beq.n	800059a <HAL_RCC_OscConfig+0x4a>
 800058a:	69bb      	ldr	r3, [r7, #24]
 800058c:	2b0c      	cmp	r3, #12
 800058e:	f040 808b 	bne.w	80006a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	2b01      	cmp	r3, #1
 8000596:	f040 8087 	bne.w	80006a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800059a:	4b89      	ldr	r3, [pc, #548]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d005      	beq.n	80005b2 <HAL_RCC_OscConfig+0x62>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	e3a2      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6a1a      	ldr	r2, [r3, #32]
 80005b6:	4b82      	ldr	r3, [pc, #520]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f003 0308 	and.w	r3, r3, #8
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d004      	beq.n	80005cc <HAL_RCC_OscConfig+0x7c>
 80005c2:	4b7f      	ldr	r3, [pc, #508]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80005ca:	e005      	b.n	80005d8 <HAL_RCC_OscConfig+0x88>
 80005cc:	4b7c      	ldr	r3, [pc, #496]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80005ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005d2:	091b      	lsrs	r3, r3, #4
 80005d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80005d8:	4293      	cmp	r3, r2
 80005da:	d223      	bcs.n	8000624 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6a1b      	ldr	r3, [r3, #32]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fc1d 	bl	8000e20 <RCC_SetFlashLatencyFromMSIRange>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80005ec:	2301      	movs	r3, #1
 80005ee:	e383      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80005f0:	4b73      	ldr	r3, [pc, #460]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a72      	ldr	r2, [pc, #456]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80005f6:	f043 0308 	orr.w	r3, r3, #8
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b70      	ldr	r3, [pc, #448]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6a1b      	ldr	r3, [r3, #32]
 8000608:	496d      	ldr	r1, [pc, #436]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 800060a:	4313      	orrs	r3, r2
 800060c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800060e:	4b6c      	ldr	r3, [pc, #432]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	021b      	lsls	r3, r3, #8
 800061c:	4968      	ldr	r1, [pc, #416]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 800061e:	4313      	orrs	r3, r2
 8000620:	604b      	str	r3, [r1, #4]
 8000622:	e025      	b.n	8000670 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000624:	4b66      	ldr	r3, [pc, #408]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a65      	ldr	r2, [pc, #404]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 800062a:	f043 0308 	orr.w	r3, r3, #8
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b63      	ldr	r3, [pc, #396]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6a1b      	ldr	r3, [r3, #32]
 800063c:	4960      	ldr	r1, [pc, #384]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 800063e:	4313      	orrs	r3, r2
 8000640:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000642:	4b5f      	ldr	r3, [pc, #380]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	021b      	lsls	r3, r3, #8
 8000650:	495b      	ldr	r1, [pc, #364]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 8000652:	4313      	orrs	r3, r2
 8000654:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d109      	bne.n	8000670 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6a1b      	ldr	r3, [r3, #32]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fbdd 	bl	8000e20 <RCC_SetFlashLatencyFromMSIRange>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800066c:	2301      	movs	r3, #1
 800066e:	e343      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000670:	f000 fb4a 	bl	8000d08 <HAL_RCC_GetSysClockFreq>
 8000674:	4602      	mov	r2, r0
 8000676:	4b52      	ldr	r3, [pc, #328]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	091b      	lsrs	r3, r3, #4
 800067c:	f003 030f 	and.w	r3, r3, #15
 8000680:	4950      	ldr	r1, [pc, #320]	@ (80007c4 <HAL_RCC_OscConfig+0x274>)
 8000682:	5ccb      	ldrb	r3, [r1, r3]
 8000684:	f003 031f 	and.w	r3, r3, #31
 8000688:	fa22 f303 	lsr.w	r3, r2, r3
 800068c:	4a4e      	ldr	r2, [pc, #312]	@ (80007c8 <HAL_RCC_OscConfig+0x278>)
 800068e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000690:	4b4e      	ldr	r3, [pc, #312]	@ (80007cc <HAL_RCC_OscConfig+0x27c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fe0b 	bl	80002b0 <HAL_InitTick>
 800069a:	4603      	mov	r3, r0
 800069c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d052      	beq.n	800074a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	e327      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d032      	beq.n	8000716 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80006b0:	4b43      	ldr	r3, [pc, #268]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a42      	ldr	r2, [pc, #264]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80006bc:	f7ff fe48 	bl	8000350 <HAL_GetTick>
 80006c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80006c2:	e008      	b.n	80006d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80006c4:	f7ff fe44 	bl	8000350 <HAL_GetTick>
 80006c8:	4602      	mov	r2, r0
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d901      	bls.n	80006d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80006d2:	2303      	movs	r3, #3
 80006d4:	e310      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80006d6:	4b3a      	ldr	r3, [pc, #232]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d0f0      	beq.n	80006c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80006e2:	4b37      	ldr	r3, [pc, #220]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a36      	ldr	r2, [pc, #216]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80006e8:	f043 0308 	orr.w	r3, r3, #8
 80006ec:	6013      	str	r3, [r2, #0]
 80006ee:	4b34      	ldr	r3, [pc, #208]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6a1b      	ldr	r3, [r3, #32]
 80006fa:	4931      	ldr	r1, [pc, #196]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80006fc:	4313      	orrs	r3, r2
 80006fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000700:	4b2f      	ldr	r3, [pc, #188]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	69db      	ldr	r3, [r3, #28]
 800070c:	021b      	lsls	r3, r3, #8
 800070e:	492c      	ldr	r1, [pc, #176]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 8000710:	4313      	orrs	r3, r2
 8000712:	604b      	str	r3, [r1, #4]
 8000714:	e01a      	b.n	800074c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000716:	4b2a      	ldr	r3, [pc, #168]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a29      	ldr	r2, [pc, #164]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 800071c:	f023 0301 	bic.w	r3, r3, #1
 8000720:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000722:	f7ff fe15 	bl	8000350 <HAL_GetTick>
 8000726:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000728:	e008      	b.n	800073c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800072a:	f7ff fe11 	bl	8000350 <HAL_GetTick>
 800072e:	4602      	mov	r2, r0
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	2b02      	cmp	r3, #2
 8000736:	d901      	bls.n	800073c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000738:	2303      	movs	r3, #3
 800073a:	e2dd      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800073c:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f003 0302 	and.w	r3, r3, #2
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f0      	bne.n	800072a <HAL_RCC_OscConfig+0x1da>
 8000748:	e000      	b.n	800074c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800074a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	2b00      	cmp	r3, #0
 8000756:	d074      	beq.n	8000842 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	2b08      	cmp	r3, #8
 800075c:	d005      	beq.n	800076a <HAL_RCC_OscConfig+0x21a>
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	2b0c      	cmp	r3, #12
 8000762:	d10e      	bne.n	8000782 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d10b      	bne.n	8000782 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d064      	beq.n	8000840 <HAL_RCC_OscConfig+0x2f0>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d160      	bne.n	8000840 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e2ba      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800078a:	d106      	bne.n	800079a <HAL_RCC_OscConfig+0x24a>
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a0b      	ldr	r2, [pc, #44]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 8000792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	e026      	b.n	80007e8 <HAL_RCC_OscConfig+0x298>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80007a2:	d115      	bne.n	80007d0 <HAL_RCC_OscConfig+0x280>
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a05      	ldr	r2, [pc, #20]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80007aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b03      	ldr	r3, [pc, #12]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a02      	ldr	r2, [pc, #8]	@ (80007c0 <HAL_RCC_OscConfig+0x270>)
 80007b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	e014      	b.n	80007e8 <HAL_RCC_OscConfig+0x298>
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000
 80007c4:	08002ac8 	.word	0x08002ac8
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000000 	.word	0x20000000
 80007d0:	4ba0      	ldr	r3, [pc, #640]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a9f      	ldr	r2, [pc, #636]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 80007d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b9d      	ldr	r3, [pc, #628]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a9c      	ldr	r2, [pc, #624]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 80007e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d013      	beq.n	8000818 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007f0:	f7ff fdae 	bl	8000350 <HAL_GetTick>
 80007f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80007f6:	e008      	b.n	800080a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007f8:	f7ff fdaa 	bl	8000350 <HAL_GetTick>
 80007fc:	4602      	mov	r2, r0
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	2b64      	cmp	r3, #100	@ 0x64
 8000804:	d901      	bls.n	800080a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000806:	2303      	movs	r3, #3
 8000808:	e276      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800080a:	4b92      	ldr	r3, [pc, #584]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0f0      	beq.n	80007f8 <HAL_RCC_OscConfig+0x2a8>
 8000816:	e014      	b.n	8000842 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000818:	f7ff fd9a 	bl	8000350 <HAL_GetTick>
 800081c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800081e:	e008      	b.n	8000832 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000820:	f7ff fd96 	bl	8000350 <HAL_GetTick>
 8000824:	4602      	mov	r2, r0
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	2b64      	cmp	r3, #100	@ 0x64
 800082c:	d901      	bls.n	8000832 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800082e:	2303      	movs	r3, #3
 8000830:	e262      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000832:	4b88      	ldr	r3, [pc, #544]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1f0      	bne.n	8000820 <HAL_RCC_OscConfig+0x2d0>
 800083e:	e000      	b.n	8000842 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	2b00      	cmp	r3, #0
 800084c:	d060      	beq.n	8000910 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	2b04      	cmp	r3, #4
 8000852:	d005      	beq.n	8000860 <HAL_RCC_OscConfig+0x310>
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	2b0c      	cmp	r3, #12
 8000858:	d119      	bne.n	800088e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d116      	bne.n	800088e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000860:	4b7c      	ldr	r3, [pc, #496]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000868:	2b00      	cmp	r3, #0
 800086a:	d005      	beq.n	8000878 <HAL_RCC_OscConfig+0x328>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d101      	bne.n	8000878 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	e23f      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000878:	4b76      	ldr	r3, [pc, #472]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	691b      	ldr	r3, [r3, #16]
 8000884:	061b      	lsls	r3, r3, #24
 8000886:	4973      	ldr	r1, [pc, #460]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 8000888:	4313      	orrs	r3, r2
 800088a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800088c:	e040      	b.n	8000910 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d023      	beq.n	80008de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000896:	4b6f      	ldr	r3, [pc, #444]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a6e      	ldr	r2, [pc, #440]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 800089c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008a2:	f7ff fd55 	bl	8000350 <HAL_GetTick>
 80008a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80008a8:	e008      	b.n	80008bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008aa:	f7ff fd51 	bl	8000350 <HAL_GetTick>
 80008ae:	4602      	mov	r2, r0
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d901      	bls.n	80008bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80008b8:	2303      	movs	r3, #3
 80008ba:	e21d      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80008bc:	4b65      	ldr	r3, [pc, #404]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d0f0      	beq.n	80008aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008c8:	4b62      	ldr	r3, [pc, #392]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	061b      	lsls	r3, r3, #24
 80008d6:	495f      	ldr	r1, [pc, #380]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 80008d8:	4313      	orrs	r3, r2
 80008da:	604b      	str	r3, [r1, #4]
 80008dc:	e018      	b.n	8000910 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008de:	4b5d      	ldr	r3, [pc, #372]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a5c      	ldr	r2, [pc, #368]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 80008e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80008e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008ea:	f7ff fd31 	bl	8000350 <HAL_GetTick>
 80008ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80008f0:	e008      	b.n	8000904 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008f2:	f7ff fd2d 	bl	8000350 <HAL_GetTick>
 80008f6:	4602      	mov	r2, r0
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d901      	bls.n	8000904 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000900:	2303      	movs	r3, #3
 8000902:	e1f9      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000904:	4b53      	ldr	r3, [pc, #332]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800090c:	2b00      	cmp	r3, #0
 800090e:	d1f0      	bne.n	80008f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 0308 	and.w	r3, r3, #8
 8000918:	2b00      	cmp	r3, #0
 800091a:	d03c      	beq.n	8000996 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d01c      	beq.n	800095e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000924:	4b4b      	ldr	r3, [pc, #300]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 8000926:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800092a:	4a4a      	ldr	r2, [pc, #296]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000934:	f7ff fd0c 	bl	8000350 <HAL_GetTick>
 8000938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800093a:	e008      	b.n	800094e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800093c:	f7ff fd08 	bl	8000350 <HAL_GetTick>
 8000940:	4602      	mov	r2, r0
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	2b02      	cmp	r3, #2
 8000948:	d901      	bls.n	800094e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800094a:	2303      	movs	r3, #3
 800094c:	e1d4      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800094e:	4b41      	ldr	r3, [pc, #260]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 8000950:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000954:	f003 0302 	and.w	r3, r3, #2
 8000958:	2b00      	cmp	r3, #0
 800095a:	d0ef      	beq.n	800093c <HAL_RCC_OscConfig+0x3ec>
 800095c:	e01b      	b.n	8000996 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800095e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 8000960:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000964:	4a3b      	ldr	r2, [pc, #236]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 8000966:	f023 0301 	bic.w	r3, r3, #1
 800096a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800096e:	f7ff fcef 	bl	8000350 <HAL_GetTick>
 8000972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000974:	e008      	b.n	8000988 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000976:	f7ff fceb 	bl	8000350 <HAL_GetTick>
 800097a:	4602      	mov	r2, r0
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	2b02      	cmp	r3, #2
 8000982:	d901      	bls.n	8000988 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000984:	2303      	movs	r3, #3
 8000986:	e1b7      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000988:	4b32      	ldr	r3, [pc, #200]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 800098a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1ef      	bne.n	8000976 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f000 80a6 	beq.w	8000af0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80009a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 80009aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10d      	bne.n	80009d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009b4:	4b27      	ldr	r3, [pc, #156]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 80009b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b8:	4a26      	ldr	r2, [pc, #152]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 80009ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009be:	6593      	str	r3, [r2, #88]	@ 0x58
 80009c0:	4b24      	ldr	r3, [pc, #144]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 80009c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80009cc:	2301      	movs	r3, #1
 80009ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80009d0:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <HAL_RCC_OscConfig+0x508>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d118      	bne.n	8000a0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80009dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a58 <HAL_RCC_OscConfig+0x508>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a58 <HAL_RCC_OscConfig+0x508>)
 80009e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009e8:	f7ff fcb2 	bl	8000350 <HAL_GetTick>
 80009ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80009ee:	e008      	b.n	8000a02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009f0:	f7ff fcae 	bl	8000350 <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d901      	bls.n	8000a02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80009fe:	2303      	movs	r3, #3
 8000a00:	e17a      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <HAL_RCC_OscConfig+0x508>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0f0      	beq.n	80009f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d108      	bne.n	8000a28 <HAL_RCC_OscConfig+0x4d8>
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 8000a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000a26:	e029      	b.n	8000a7c <HAL_RCC_OscConfig+0x52c>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	2b05      	cmp	r3, #5
 8000a2e:	d115      	bne.n	8000a5c <HAL_RCC_OscConfig+0x50c>
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 8000a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000a36:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 8000a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000a46:	4a03      	ldr	r2, [pc, #12]	@ (8000a54 <HAL_RCC_OscConfig+0x504>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000a50:	e014      	b.n	8000a7c <HAL_RCC_OscConfig+0x52c>
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40007000 	.word	0x40007000
 8000a5c:	4b9c      	ldr	r3, [pc, #624]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000a62:	4a9b      	ldr	r2, [pc, #620]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000a64:	f023 0301 	bic.w	r3, r3, #1
 8000a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000a6c:	4b98      	ldr	r3, [pc, #608]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000a72:	4a97      	ldr	r2, [pc, #604]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000a74:	f023 0304 	bic.w	r3, r3, #4
 8000a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d016      	beq.n	8000ab2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a84:	f7ff fc64 	bl	8000350 <HAL_GetTick>
 8000a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000a8a:	e00a      	b.n	8000aa2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a8c:	f7ff fc60 	bl	8000350 <HAL_GetTick>
 8000a90:	4602      	mov	r2, r0
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d901      	bls.n	8000aa2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	e12a      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000aa2:	4b8b      	ldr	r3, [pc, #556]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0ed      	beq.n	8000a8c <HAL_RCC_OscConfig+0x53c>
 8000ab0:	e015      	b.n	8000ade <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ab2:	f7ff fc4d 	bl	8000350 <HAL_GetTick>
 8000ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ab8:	e00a      	b.n	8000ad0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000aba:	f7ff fc49 	bl	8000350 <HAL_GetTick>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d901      	bls.n	8000ad0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000acc:	2303      	movs	r3, #3
 8000ace:	e113      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ad0:	4b7f      	ldr	r3, [pc, #508]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1ed      	bne.n	8000aba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ade:	7ffb      	ldrb	r3, [r7, #31]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d105      	bne.n	8000af0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ae4:	4b7a      	ldr	r3, [pc, #488]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae8:	4a79      	ldr	r2, [pc, #484]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000aea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000aee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	f000 80fe 	beq.w	8000cf6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	f040 80d0 	bne.w	8000ca4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000b04:	4b72      	ldr	r3, [pc, #456]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	f003 0203 	and.w	r2, r3, #3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d130      	bne.n	8000b7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	3b01      	subs	r3, #1
 8000b24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d127      	bne.n	8000b7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d11f      	bne.n	8000b7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000b44:	2a07      	cmp	r2, #7
 8000b46:	bf14      	ite	ne
 8000b48:	2201      	movne	r2, #1
 8000b4a:	2200      	moveq	r2, #0
 8000b4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d113      	bne.n	8000b7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b5c:	085b      	lsrs	r3, r3, #1
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d109      	bne.n	8000b7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	085b      	lsrs	r3, r3, #1
 8000b72:	3b01      	subs	r3, #1
 8000b74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d06e      	beq.n	8000c58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	2b0c      	cmp	r3, #12
 8000b7e:	d069      	beq.n	8000c54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000b80:	4b53      	ldr	r3, [pc, #332]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d105      	bne.n	8000b98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000b8c:	4b50      	ldr	r3, [pc, #320]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e0ad      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000b9c:	4b4c      	ldr	r3, [pc, #304]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a4b      	ldr	r2, [pc, #300]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000ba2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000ba6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000ba8:	f7ff fbd2 	bl	8000350 <HAL_GetTick>
 8000bac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000bae:	e008      	b.n	8000bc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bb0:	f7ff fbce 	bl	8000350 <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d901      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	e09a      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000bc2:	4b43      	ldr	r3, [pc, #268]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1f0      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bce:	4b40      	ldr	r3, [pc, #256]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	4b40      	ldr	r3, [pc, #256]	@ (8000cd4 <HAL_RCC_OscConfig+0x784>)
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000bde:	3a01      	subs	r2, #1
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	4311      	orrs	r1, r2
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000be8:	0212      	lsls	r2, r2, #8
 8000bea:	4311      	orrs	r1, r2
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8000bf0:	0852      	lsrs	r2, r2, #1
 8000bf2:	3a01      	subs	r2, #1
 8000bf4:	0552      	lsls	r2, r2, #21
 8000bf6:	4311      	orrs	r1, r2
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000bfc:	0852      	lsrs	r2, r2, #1
 8000bfe:	3a01      	subs	r2, #1
 8000c00:	0652      	lsls	r2, r2, #25
 8000c02:	4311      	orrs	r1, r2
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000c08:	0912      	lsrs	r2, r2, #4
 8000c0a:	0452      	lsls	r2, r2, #17
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	4930      	ldr	r1, [pc, #192]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000c10:	4313      	orrs	r3, r2
 8000c12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8000c14:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a2d      	ldr	r2, [pc, #180]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000c1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000c20:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	4a2a      	ldr	r2, [pc, #168]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000c26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000c2c:	f7ff fb90 	bl	8000350 <HAL_GetTick>
 8000c30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c32:	e008      	b.n	8000c46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c34:	f7ff fb8c 	bl	8000350 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d901      	bls.n	8000c46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e058      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c46:	4b22      	ldr	r3, [pc, #136]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0f0      	beq.n	8000c34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000c52:	e050      	b.n	8000cf6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e04f      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d148      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8000c64:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a19      	ldr	r2, [pc, #100]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000c70:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	4a16      	ldr	r2, [pc, #88]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000c7c:	f7ff fb68 	bl	8000350 <HAL_GetTick>
 8000c80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c82:	e008      	b.n	8000c96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c84:	f7ff fb64 	bl	8000350 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d901      	bls.n	8000c96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e030      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0f0      	beq.n	8000c84 <HAL_RCC_OscConfig+0x734>
 8000ca2:	e028      	b.n	8000cf6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	2b0c      	cmp	r3, #12
 8000ca8:	d023      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a08      	ldr	r2, [pc, #32]	@ (8000cd0 <HAL_RCC_OscConfig+0x780>)
 8000cb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb6:	f7ff fb4b 	bl	8000350 <HAL_GetTick>
 8000cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000cbc:	e00c      	b.n	8000cd8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cbe:	f7ff fb47 	bl	8000350 <HAL_GetTick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d905      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	e013      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000cd8:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <HAL_RCC_OscConfig+0x7b0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1ec      	bne.n	8000cbe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_RCC_OscConfig+0x7b0>)
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	4905      	ldr	r1, [pc, #20]	@ (8000d00 <HAL_RCC_OscConfig+0x7b0>)
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_RCC_OscConfig+0x7b4>)
 8000cec:	4013      	ands	r3, r2
 8000cee:	60cb      	str	r3, [r1, #12]
 8000cf0:	e001      	b.n	8000cf6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e000      	b.n	8000cf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40021000 	.word	0x40021000
 8000d04:	feeefffc 	.word	0xfeeefffc

08000d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d16:	4b3e      	ldr	r3, [pc, #248]	@ (8000e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
 8000d1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d20:	4b3b      	ldr	r3, [pc, #236]	@ (8000e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d005      	beq.n	8000d3c <HAL_RCC_GetSysClockFreq+0x34>
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	2b0c      	cmp	r3, #12
 8000d34:	d121      	bne.n	8000d7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d11e      	bne.n	8000d7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000d3c:	4b34      	ldr	r3, [pc, #208]	@ (8000e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d107      	bne.n	8000d58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000d48:	4b31      	ldr	r3, [pc, #196]	@ (8000e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8000d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d4e:	0a1b      	lsrs	r3, r3, #8
 8000d50:	f003 030f 	and.w	r3, r3, #15
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	e005      	b.n	8000d64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000d58:	4b2d      	ldr	r3, [pc, #180]	@ (8000e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	091b      	lsrs	r3, r3, #4
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000d64:	4a2b      	ldr	r2, [pc, #172]	@ (8000e14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10d      	bne.n	8000d90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d78:	e00a      	b.n	8000d90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d102      	bne.n	8000d86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000d80:	4b25      	ldr	r3, [pc, #148]	@ (8000e18 <HAL_RCC_GetSysClockFreq+0x110>)
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	e004      	b.n	8000d90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	2b08      	cmp	r3, #8
 8000d8a:	d101      	bne.n	8000d90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000d8c:	4b23      	ldr	r3, [pc, #140]	@ (8000e1c <HAL_RCC_GetSysClockFreq+0x114>)
 8000d8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	2b0c      	cmp	r3, #12
 8000d94:	d134      	bne.n	8000e00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000d96:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d003      	beq.n	8000dae <HAL_RCC_GetSysClockFreq+0xa6>
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d003      	beq.n	8000db4 <HAL_RCC_GetSysClockFreq+0xac>
 8000dac:	e005      	b.n	8000dba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <HAL_RCC_GetSysClockFreq+0x110>)
 8000db0:	617b      	str	r3, [r7, #20]
      break;
 8000db2:	e005      	b.n	8000dc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8000db4:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <HAL_RCC_GetSysClockFreq+0x114>)
 8000db6:	617b      	str	r3, [r7, #20]
      break;
 8000db8:	e002      	b.n	8000dc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	617b      	str	r3, [r7, #20]
      break;
 8000dbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000dc0:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	3301      	adds	r3, #1
 8000dcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	0a1b      	lsrs	r3, r3, #8
 8000dd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	fb03 f202 	mul.w	r2, r3, r2
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	0e5b      	lsrs	r3, r3, #25
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	3301      	adds	r3, #1
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8000e00:	69bb      	ldr	r3, [r7, #24]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	@ 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000
 8000e14:	08002ad8 	.word	0x08002ad8
 8000e18:	00f42400 	.word	0x00f42400
 8000e1c:	007a1200 	.word	0x007a1200

08000e20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8000e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000e38:	f7ff fb7c 	bl	8000534 <HAL_PWREx_GetVoltageRange>
 8000e3c:	6178      	str	r0, [r7, #20]
 8000e3e:	e014      	b.n	8000e6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e40:	4b25      	ldr	r3, [pc, #148]	@ (8000ed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8000e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e44:	4a24      	ldr	r2, [pc, #144]	@ (8000ed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8000e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8000e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8000e58:	f7ff fb6c 	bl	8000534 <HAL_PWREx_GetVoltageRange>
 8000e5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e62:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8000e64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e68:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e70:	d10b      	bne.n	8000e8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b80      	cmp	r3, #128	@ 0x80
 8000e76:	d919      	bls.n	8000eac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2ba0      	cmp	r3, #160	@ 0xa0
 8000e7c:	d902      	bls.n	8000e84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000e7e:	2302      	movs	r3, #2
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	e013      	b.n	8000eac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000e84:	2301      	movs	r3, #1
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	e010      	b.n	8000eac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b80      	cmp	r3, #128	@ 0x80
 8000e8e:	d902      	bls.n	8000e96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8000e90:	2303      	movs	r3, #3
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	e00a      	b.n	8000eac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b80      	cmp	r3, #128	@ 0x80
 8000e9a:	d102      	bne.n	8000ea2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	e004      	b.n	8000eac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b70      	cmp	r3, #112	@ 0x70
 8000ea6:	d101      	bne.n	8000eac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000eac:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f023 0207 	bic.w	r2, r3, #7
 8000eb4:	4909      	ldr	r1, [pc, #36]	@ (8000edc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000ebc:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d001      	beq.n	8000ece <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e000      	b.n	8000ed0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40022000 	.word	0x40022000

08000ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8000ee8:	2300      	movs	r3, #0
 8000eea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8000eec:	2300      	movs	r3, #0
 8000eee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d041      	beq.n	8000f80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000f00:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8000f04:	d02a      	beq.n	8000f5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8000f06:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8000f0a:	d824      	bhi.n	8000f56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8000f0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000f10:	d008      	beq.n	8000f24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8000f12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000f16:	d81e      	bhi.n	8000f56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00a      	beq.n	8000f32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8000f1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f20:	d010      	beq.n	8000f44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8000f22:	e018      	b.n	8000f56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8000f24:	4b86      	ldr	r3, [pc, #536]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	4a85      	ldr	r2, [pc, #532]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8000f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f2e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8000f30:	e015      	b.n	8000f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 fabb 	bl	80014b4 <RCCEx_PLLSAI1_Config>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8000f42:	e00c      	b.n	8000f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3320      	adds	r3, #32
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fba6 	bl	800169c <RCCEx_PLLSAI2_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8000f54:	e003      	b.n	8000f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	74fb      	strb	r3, [r7, #19]
      break;
 8000f5a:	e000      	b.n	8000f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8000f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8000f5e:	7cfb      	ldrb	r3, [r7, #19]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d10b      	bne.n	8000f7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000f64:	4b76      	ldr	r3, [pc, #472]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000f72:	4973      	ldr	r1, [pc, #460]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8000f74:	4313      	orrs	r3, r2
 8000f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8000f7a:	e001      	b.n	8000f80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8000f7c:	7cfb      	ldrb	r3, [r7, #19]
 8000f7e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d041      	beq.n	8001010 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000f90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8000f94:	d02a      	beq.n	8000fec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8000f96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8000f9a:	d824      	bhi.n	8000fe6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8000f9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000fa0:	d008      	beq.n	8000fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8000fa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000fa6:	d81e      	bhi.n	8000fe6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d00a      	beq.n	8000fc2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fb0:	d010      	beq.n	8000fd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8000fb2:	e018      	b.n	8000fe6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8000fb4:	4b62      	ldr	r3, [pc, #392]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	4a61      	ldr	r2, [pc, #388]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8000fba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fbe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8000fc0:	e015      	b.n	8000fee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fa73 	bl	80014b4 <RCCEx_PLLSAI1_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8000fd2:	e00c      	b.n	8000fee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3320      	adds	r3, #32
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fb5e 	bl	800169c <RCCEx_PLLSAI2_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8000fe4:	e003      	b.n	8000fee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	74fb      	strb	r3, [r7, #19]
      break;
 8000fea:	e000      	b.n	8000fee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8000fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8000fee:	7cfb      	ldrb	r3, [r7, #19]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10b      	bne.n	800100c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000ff4:	4b52      	ldr	r3, [pc, #328]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ffa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001002:	494f      	ldr	r1, [pc, #316]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001004:	4313      	orrs	r3, r2
 8001006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800100a:	e001      	b.n	8001010 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800100c:	7cfb      	ldrb	r3, [r7, #19]
 800100e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80a0 	beq.w	800115e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001022:	4b47      	ldr	r3, [pc, #284]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001032:	2300      	movs	r3, #0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d00d      	beq.n	8001054 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001038:	4b41      	ldr	r3, [pc, #260]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800103a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103c:	4a40      	ldr	r2, [pc, #256]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800103e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001042:	6593      	str	r3, [r2, #88]	@ 0x58
 8001044:	4b3e      	ldr	r3, [pc, #248]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001050:	2301      	movs	r3, #1
 8001052:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001054:	4b3b      	ldr	r3, [pc, #236]	@ (8001144 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a3a      	ldr	r2, [pc, #232]	@ (8001144 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800105a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001060:	f7ff f976 	bl	8000350 <HAL_GetTick>
 8001064:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001066:	e009      	b.n	800107c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001068:	f7ff f972 	bl	8000350 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d902      	bls.n	800107c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	74fb      	strb	r3, [r7, #19]
        break;
 800107a:	e005      	b.n	8001088 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800107c:	4b31      	ldr	r3, [pc, #196]	@ (8001144 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0ef      	beq.n	8001068 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001088:	7cfb      	ldrb	r3, [r7, #19]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d15c      	bne.n	8001148 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800108e:	4b2c      	ldr	r3, [pc, #176]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001094:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001098:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d01f      	beq.n	80010e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d019      	beq.n	80010e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80010ac:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80010ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80010b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80010b8:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80010ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010be:	4a20      	ldr	r2, [pc, #128]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80010c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80010ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80010d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80010d8:	4a19      	ldr	r2, [pc, #100]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d016      	beq.n	8001118 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ea:	f7ff f931 	bl	8000350 <HAL_GetTick>
 80010ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010f0:	e00b      	b.n	800110a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f2:	f7ff f92d 	bl	8000350 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001100:	4293      	cmp	r3, r2
 8001102:	d902      	bls.n	800110a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	74fb      	strb	r3, [r7, #19]
            break;
 8001108:	e006      	b.n	8001118 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800110a:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800110c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0ec      	beq.n	80010f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001118:	7cfb      	ldrb	r3, [r7, #19]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10c      	bne.n	8001138 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001124:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800112e:	4904      	ldr	r1, [pc, #16]	@ (8001140 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001130:	4313      	orrs	r3, r2
 8001132:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001136:	e009      	b.n	800114c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001138:	7cfb      	ldrb	r3, [r7, #19]
 800113a:	74bb      	strb	r3, [r7, #18]
 800113c:	e006      	b.n	800114c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000
 8001144:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001148:	7cfb      	ldrb	r3, [r7, #19]
 800114a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800114c:	7c7b      	ldrb	r3, [r7, #17]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d105      	bne.n	800115e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001152:	4b9e      	ldr	r3, [pc, #632]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001156:	4a9d      	ldr	r2, [pc, #628]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001158:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800115c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00a      	beq.n	8001180 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800116a:	4b98      	ldr	r3, [pc, #608]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800116c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001170:	f023 0203 	bic.w	r2, r3, #3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001178:	4994      	ldr	r1, [pc, #592]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800117a:	4313      	orrs	r3, r2
 800117c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00a      	beq.n	80011a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800118c:	4b8f      	ldr	r3, [pc, #572]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001192:	f023 020c 	bic.w	r2, r3, #12
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800119a:	498c      	ldr	r1, [pc, #560]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800119c:	4313      	orrs	r3, r2
 800119e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00a      	beq.n	80011c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80011ae:	4b87      	ldr	r3, [pc, #540]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80011b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	4983      	ldr	r1, [pc, #524]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00a      	beq.n	80011e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80011d0:	4b7e      	ldr	r3, [pc, #504]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	497b      	ldr	r1, [pc, #492]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0310 	and.w	r3, r3, #16
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00a      	beq.n	8001208 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80011f2:	4b76      	ldr	r3, [pc, #472]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80011f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001200:	4972      	ldr	r1, [pc, #456]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001202:	4313      	orrs	r3, r2
 8001204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0320 	and.w	r3, r3, #32
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00a      	beq.n	800122a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001214:	4b6d      	ldr	r3, [pc, #436]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800121a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001222:	496a      	ldr	r1, [pc, #424]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001224:	4313      	orrs	r3, r2
 8001226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00a      	beq.n	800124c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001236:	4b65      	ldr	r3, [pc, #404]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800123c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001244:	4961      	ldr	r1, [pc, #388]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001246:	4313      	orrs	r3, r2
 8001248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00a      	beq.n	800126e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001258:	4b5c      	ldr	r3, [pc, #368]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800125e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001266:	4959      	ldr	r1, [pc, #356]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001268:	4313      	orrs	r3, r2
 800126a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00a      	beq.n	8001290 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800127a:	4b54      	ldr	r3, [pc, #336]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800127c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001280:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001288:	4950      	ldr	r1, [pc, #320]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800128a:	4313      	orrs	r3, r2
 800128c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00a      	beq.n	80012b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800129c:	4b4b      	ldr	r3, [pc, #300]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800129e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012aa:	4948      	ldr	r1, [pc, #288]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00a      	beq.n	80012d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80012be:	4b43      	ldr	r3, [pc, #268]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80012c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012cc:	493f      	ldr	r1, [pc, #252]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d028      	beq.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80012e0:	4b3a      	ldr	r3, [pc, #232]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80012ee:	4937      	ldr	r1, [pc, #220]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80012fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80012fe:	d106      	bne.n	800130e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001300:	4b32      	ldr	r3, [pc, #200]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	4a31      	ldr	r2, [pc, #196]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800130a:	60d3      	str	r3, [r2, #12]
 800130c:	e011      	b.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001312:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001316:	d10c      	bne.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3304      	adds	r3, #4
 800131c:	2101      	movs	r1, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f8c8 	bl	80014b4 <RCCEx_PLLSAI1_Config>
 8001324:	4603      	mov	r3, r0
 8001326:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001328:	7cfb      	ldrb	r3, [r7, #19]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800132e:	7cfb      	ldrb	r3, [r7, #19]
 8001330:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d028      	beq.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800133e:	4b23      	ldr	r3, [pc, #140]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001344:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800134c:	491f      	ldr	r1, [pc, #124]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800134e:	4313      	orrs	r3, r2
 8001350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001358:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800135c:	d106      	bne.n	800136c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800135e:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	4a1a      	ldr	r2, [pc, #104]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001364:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001368:	60d3      	str	r3, [r2, #12]
 800136a:	e011      	b.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001370:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001374:	d10c      	bne.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3304      	adds	r3, #4
 800137a:	2101      	movs	r1, #1
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f899 	bl	80014b4 <RCCEx_PLLSAI1_Config>
 8001382:	4603      	mov	r3, r0
 8001384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001386:	7cfb      	ldrb	r3, [r7, #19]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800138c:	7cfb      	ldrb	r3, [r7, #19]
 800138e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d02b      	beq.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800139c:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800139e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013aa:	4908      	ldr	r1, [pc, #32]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80013ba:	d109      	bne.n	80013d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80013bc:	4b03      	ldr	r3, [pc, #12]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4a02      	ldr	r2, [pc, #8]	@ (80013cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80013c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013c6:	60d3      	str	r3, [r2, #12]
 80013c8:	e014      	b.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3304      	adds	r3, #4
 80013de:	2101      	movs	r1, #1
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f867 	bl	80014b4 <RCCEx_PLLSAI1_Config>
 80013e6:	4603      	mov	r3, r0
 80013e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80013ea:	7cfb      	ldrb	r3, [r7, #19]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80013f0:	7cfb      	ldrb	r3, [r7, #19]
 80013f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d02f      	beq.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001400:	4b2b      	ldr	r3, [pc, #172]	@ (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001406:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800140e:	4928      	ldr	r1, [pc, #160]	@ (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001410:	4313      	orrs	r3, r2
 8001412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800141a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800141e:	d10d      	bne.n	800143c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3304      	adds	r3, #4
 8001424:	2102      	movs	r1, #2
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f844 	bl	80014b4 <RCCEx_PLLSAI1_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001430:	7cfb      	ldrb	r3, [r7, #19]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d014      	beq.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001436:	7cfb      	ldrb	r3, [r7, #19]
 8001438:	74bb      	strb	r3, [r7, #18]
 800143a:	e011      	b.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001444:	d10c      	bne.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3320      	adds	r3, #32
 800144a:	2102      	movs	r1, #2
 800144c:	4618      	mov	r0, r3
 800144e:	f000 f925 	bl	800169c <RCCEx_PLLSAI2_Config>
 8001452:	4603      	mov	r3, r0
 8001454:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001456:	7cfb      	ldrb	r3, [r7, #19]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800145c:	7cfb      	ldrb	r3, [r7, #19]
 800145e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00a      	beq.n	8001482 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800146c:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800146e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001472:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800147a:	490d      	ldr	r1, [pc, #52]	@ (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800147c:	4313      	orrs	r3, r2
 800147e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00b      	beq.n	80014a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800148e:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001494:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800149e:	4904      	ldr	r1, [pc, #16]	@ (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80014a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000

080014b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80014c2:	4b75      	ldr	r3, [pc, #468]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d018      	beq.n	8001500 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80014ce:	4b72      	ldr	r3, [pc, #456]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f003 0203 	and.w	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d10d      	bne.n	80014fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
       ||
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d009      	beq.n	80014fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80014e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
       ||
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d047      	beq.n	800158a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	e044      	b.n	800158a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b03      	cmp	r3, #3
 8001506:	d018      	beq.n	800153a <RCCEx_PLLSAI1_Config+0x86>
 8001508:	2b03      	cmp	r3, #3
 800150a:	d825      	bhi.n	8001558 <RCCEx_PLLSAI1_Config+0xa4>
 800150c:	2b01      	cmp	r3, #1
 800150e:	d002      	beq.n	8001516 <RCCEx_PLLSAI1_Config+0x62>
 8001510:	2b02      	cmp	r3, #2
 8001512:	d009      	beq.n	8001528 <RCCEx_PLLSAI1_Config+0x74>
 8001514:	e020      	b.n	8001558 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001516:	4b60      	ldr	r3, [pc, #384]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d11d      	bne.n	800155e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001526:	e01a      	b.n	800155e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001528:	4b5b      	ldr	r3, [pc, #364]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001530:	2b00      	cmp	r3, #0
 8001532:	d116      	bne.n	8001562 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001538:	e013      	b.n	8001562 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800153a:	4b57      	ldr	r3, [pc, #348]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10f      	bne.n	8001566 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001546:	4b54      	ldr	r3, [pc, #336]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d109      	bne.n	8001566 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001556:	e006      	b.n	8001566 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
      break;
 800155c:	e004      	b.n	8001568 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800155e:	bf00      	nop
 8001560:	e002      	b.n	8001568 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001562:	bf00      	nop
 8001564:	e000      	b.n	8001568 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001566:	bf00      	nop
    }

    if(status == HAL_OK)
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10d      	bne.n	800158a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800156e:	4b4a      	ldr	r3, [pc, #296]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6819      	ldr	r1, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	430b      	orrs	r3, r1
 8001584:	4944      	ldr	r1, [pc, #272]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001586:	4313      	orrs	r3, r2
 8001588:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d17d      	bne.n	800168c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001590:	4b41      	ldr	r3, [pc, #260]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a40      	ldr	r2, [pc, #256]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001596:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800159a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800159c:	f7fe fed8 	bl	8000350 <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80015a2:	e009      	b.n	80015b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80015a4:	f7fe fed4 	bl	8000350 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d902      	bls.n	80015b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	73fb      	strb	r3, [r7, #15]
        break;
 80015b6:	e005      	b.n	80015c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80015b8:	4b37      	ldr	r3, [pc, #220]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1ef      	bne.n	80015a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d160      	bne.n	800168c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d111      	bne.n	80015f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80015d0:	4b31      	ldr	r3, [pc, #196]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80015d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6892      	ldr	r2, [r2, #8]
 80015e0:	0211      	lsls	r1, r2, #8
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68d2      	ldr	r2, [r2, #12]
 80015e6:	0912      	lsrs	r2, r2, #4
 80015e8:	0452      	lsls	r2, r2, #17
 80015ea:	430a      	orrs	r2, r1
 80015ec:	492a      	ldr	r1, [pc, #168]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	610b      	str	r3, [r1, #16]
 80015f2:	e027      	b.n	8001644 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d112      	bne.n	8001620 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80015fa:	4b27      	ldr	r3, [pc, #156]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8001602:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6892      	ldr	r2, [r2, #8]
 800160a:	0211      	lsls	r1, r2, #8
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6912      	ldr	r2, [r2, #16]
 8001610:	0852      	lsrs	r2, r2, #1
 8001612:	3a01      	subs	r2, #1
 8001614:	0552      	lsls	r2, r2, #21
 8001616:	430a      	orrs	r2, r1
 8001618:	491f      	ldr	r1, [pc, #124]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800161a:	4313      	orrs	r3, r2
 800161c:	610b      	str	r3, [r1, #16]
 800161e:	e011      	b.n	8001644 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001620:	4b1d      	ldr	r3, [pc, #116]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8001628:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6892      	ldr	r2, [r2, #8]
 8001630:	0211      	lsls	r1, r2, #8
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6952      	ldr	r2, [r2, #20]
 8001636:	0852      	lsrs	r2, r2, #1
 8001638:	3a01      	subs	r2, #1
 800163a:	0652      	lsls	r2, r2, #25
 800163c:	430a      	orrs	r2, r1
 800163e:	4916      	ldr	r1, [pc, #88]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001640:	4313      	orrs	r3, r2
 8001642:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001644:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a13      	ldr	r2, [pc, #76]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800164a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800164e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001650:	f7fe fe7e 	bl	8000350 <HAL_GetTick>
 8001654:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001656:	e009      	b.n	800166c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001658:	f7fe fe7a 	bl	8000350 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d902      	bls.n	800166c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	73fb      	strb	r3, [r7, #15]
          break;
 800166a:	e005      	b.n	8001678 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0ef      	beq.n	8001658 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d106      	bne.n	800168c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001680:	691a      	ldr	r2, [r3, #16]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	4904      	ldr	r1, [pc, #16]	@ (8001698 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001688:	4313      	orrs	r3, r2
 800168a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000

0800169c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80016aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d018      	beq.n	80016e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80016b6:	4b67      	ldr	r3, [pc, #412]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	f003 0203 	and.w	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d10d      	bne.n	80016e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
       ||
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80016ce:	4b61      	ldr	r3, [pc, #388]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	091b      	lsrs	r3, r3, #4
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
       ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d047      	beq.n	8001772 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e044      	b.n	8001772 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d018      	beq.n	8001722 <RCCEx_PLLSAI2_Config+0x86>
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d825      	bhi.n	8001740 <RCCEx_PLLSAI2_Config+0xa4>
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d002      	beq.n	80016fe <RCCEx_PLLSAI2_Config+0x62>
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d009      	beq.n	8001710 <RCCEx_PLLSAI2_Config+0x74>
 80016fc:	e020      	b.n	8001740 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80016fe:	4b55      	ldr	r3, [pc, #340]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d11d      	bne.n	8001746 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800170e:	e01a      	b.n	8001746 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001710:	4b50      	ldr	r3, [pc, #320]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001718:	2b00      	cmp	r3, #0
 800171a:	d116      	bne.n	800174a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001720:	e013      	b.n	800174a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001722:	4b4c      	ldr	r3, [pc, #304]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10f      	bne.n	800174e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800172e:	4b49      	ldr	r3, [pc, #292]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d109      	bne.n	800174e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800173e:	e006      	b.n	800174e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
      break;
 8001744:	e004      	b.n	8001750 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8001746:	bf00      	nop
 8001748:	e002      	b.n	8001750 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800174a:	bf00      	nop
 800174c:	e000      	b.n	8001750 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800174e:	bf00      	nop
    }

    if(status == HAL_OK)
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10d      	bne.n	8001772 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001756:	4b3f      	ldr	r3, [pc, #252]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6819      	ldr	r1, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	430b      	orrs	r3, r1
 800176c:	4939      	ldr	r1, [pc, #228]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800176e:	4313      	orrs	r3, r2
 8001770:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d167      	bne.n	8001848 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001778:	4b36      	ldr	r3, [pc, #216]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a35      	ldr	r2, [pc, #212]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800177e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001784:	f7fe fde4 	bl	8000350 <HAL_GetTick>
 8001788:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800178a:	e009      	b.n	80017a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800178c:	f7fe fde0 	bl	8000350 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d902      	bls.n	80017a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	73fb      	strb	r3, [r7, #15]
        break;
 800179e:	e005      	b.n	80017ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80017a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1ef      	bne.n	800178c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d14a      	bne.n	8001848 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d111      	bne.n	80017dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80017b8:	4b26      	ldr	r3, [pc, #152]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80017c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6892      	ldr	r2, [r2, #8]
 80017c8:	0211      	lsls	r1, r2, #8
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68d2      	ldr	r2, [r2, #12]
 80017ce:	0912      	lsrs	r2, r2, #4
 80017d0:	0452      	lsls	r2, r2, #17
 80017d2:	430a      	orrs	r2, r1
 80017d4:	491f      	ldr	r1, [pc, #124]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	614b      	str	r3, [r1, #20]
 80017da:	e011      	b.n	8001800 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80017dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80017e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6892      	ldr	r2, [r2, #8]
 80017ec:	0211      	lsls	r1, r2, #8
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6912      	ldr	r2, [r2, #16]
 80017f2:	0852      	lsrs	r2, r2, #1
 80017f4:	3a01      	subs	r2, #1
 80017f6:	0652      	lsls	r2, r2, #25
 80017f8:	430a      	orrs	r2, r1
 80017fa:	4916      	ldr	r1, [pc, #88]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001800:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a13      	ldr	r2, [pc, #76]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800180a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7fe fda0 	bl	8000350 <HAL_GetTick>
 8001810:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001812:	e009      	b.n	8001828 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001814:	f7fe fd9c 	bl	8000350 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d902      	bls.n	8001828 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	73fb      	strb	r3, [r7, #15]
          break;
 8001826:	e005      	b.n	8001834 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001828:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0ef      	beq.n	8001814 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d106      	bne.n	8001848 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	4904      	ldr	r1, [pc, #16]	@ (8001854 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001844:	4313      	orrs	r3, r2
 8001846:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000

08001858 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d079      	beq.n	800195e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f872 	bl	8001968 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2202      	movs	r2, #2
 8001888:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	2b10      	cmp	r3, #16
 8001898:	d058      	beq.n	800194c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	22ca      	movs	r2, #202	@ 0xca
 80018a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2253      	movs	r2, #83	@ 0x53
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 fa58 	bl	8001d60 <RTC_EnterInitMode>
 80018b0:	4603      	mov	r3, r0
 80018b2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d127      	bne.n	800190a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80018c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80018cc:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6899      	ldr	r1, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	68d2      	ldr	r2, [r2, #12]
 80018f4:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6919      	ldr	r1, [r3, #16]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	041a      	lsls	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 fa5c 	bl	8001dc8 <RTC_ExitInitMode>
 8001910:	4603      	mov	r3, r0
 8001912:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d113      	bne.n	8001942 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0203 	bic.w	r2, r2, #3
 8001928:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69da      	ldr	r2, [r3, #28]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	22ff      	movs	r2, #255	@ 0xff
 8001948:	625a      	str	r2, [r3, #36]	@ 0x24
 800194a:	e001      	b.n	8001950 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d103      	bne.n	800195e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_RTC_SetTime+0x1a>
 8001992:	2302      	movs	r3, #2
 8001994:	e08b      	b.n	8001aae <HAL_RTC_SetTime+0x132>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2202      	movs	r2, #2
 80019a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	22ca      	movs	r2, #202	@ 0xca
 80019ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2253      	movs	r2, #83	@ 0x53
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f9d2 	bl	8001d60 <RTC_EnterInitMode>
 80019bc:	4603      	mov	r3, r0
 80019be:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80019c0:	7cfb      	ldrb	r3, [r7, #19]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d163      	bne.n	8001a8e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d126      	bne.n	8001a1a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2200      	movs	r2, #0
 80019de:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fa2d 	bl	8001e44 <RTC_ByteToBcd2>
 80019ea:	4603      	mov	r3, r0
 80019ec:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	785b      	ldrb	r3, [r3, #1]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fa26 	bl	8001e44 <RTC_ByteToBcd2>
 80019f8:	4603      	mov	r3, r0
 80019fa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80019fc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	789b      	ldrb	r3, [r3, #2]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fa1e 	bl	8001e44 <RTC_ByteToBcd2>
 8001a08:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001a0a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	78db      	ldrb	r3, [r3, #3]
 8001a12:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a14:	4313      	orrs	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	e018      	b.n	8001a4c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a3a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001a40:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	78db      	ldrb	r3, [r3, #3]
 8001a46:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8001a56:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001a5a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001a6a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6899      	ldr	r1, [r3, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 f99f 	bl	8001dc8 <RTC_ExitInitMode>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	22ff      	movs	r2, #255	@ 0xff
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8001a96:	7cfb      	ldrb	r3, [r7, #19]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d103      	bne.n	8001aa4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8001aac:	7cfb      	ldrb	r3, [r7, #19]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	371c      	adds	r7, #28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd90      	pop	{r4, r7, pc}

08001ab6 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8001ae4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001ae8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	0c1b      	lsrs	r3, r3, #16
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	0d9b      	lsrs	r3, r3, #22
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d11a      	bne.n	8001b64 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f9a6 	bl	8001e84 <RTC_Bcd2ToByte>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	785b      	ldrb	r3, [r3, #1]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 f99d 	bl	8001e84 <RTC_Bcd2ToByte>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	789b      	ldrb	r3, [r3, #2]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f994 	bl	8001e84 <RTC_Bcd2ToByte>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001b6e:	b590      	push	{r4, r7, lr}
 8001b70:	b087      	sub	sp, #28
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_RTC_SetDate+0x1a>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e075      	b.n	8001c74 <HAL_RTC_SetDate+0x106>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10e      	bne.n	8001bbc <HAL_RTC_SetDate+0x4e>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	785b      	ldrb	r3, [r3, #1]
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d008      	beq.n	8001bbc <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	785b      	ldrb	r3, [r3, #1]
 8001bae:	f023 0310 	bic.w	r3, r3, #16
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	330a      	adds	r3, #10
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d11c      	bne.n	8001bfc <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	78db      	ldrb	r3, [r3, #3]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 f93c 	bl	8001e44 <RTC_ByteToBcd2>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	785b      	ldrb	r3, [r3, #1]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 f935 	bl	8001e44 <RTC_ByteToBcd2>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8001bde:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	789b      	ldrb	r3, [r3, #2]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 f92d 	bl	8001e44 <RTC_ByteToBcd2>
 8001bea:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001bec:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e00e      	b.n	8001c1a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	78db      	ldrb	r3, [r3, #3]
 8001c00:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001c08:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8001c0e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001c16:	4313      	orrs	r3, r2
 8001c18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	22ca      	movs	r2, #202	@ 0xca
 8001c20:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2253      	movs	r2, #83	@ 0x53
 8001c28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f898 	bl	8001d60 <RTC_EnterInitMode>
 8001c30:	4603      	mov	r3, r0
 8001c32:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8001c34:	7cfb      	ldrb	r3, [r7, #19]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10c      	bne.n	8001c54 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001c44:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001c48:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 f8bc 	bl	8001dc8 <RTC_ExitInitMode>
 8001c50:	4603      	mov	r3, r0
 8001c52:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	22ff      	movs	r2, #255	@ 0xff
 8001c5a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8001c5c:	7cfb      	ldrb	r3, [r7, #19]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d103      	bne.n	8001c6a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8001c72:	7cfb      	ldrb	r3, [r7, #19]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	371c      	adds	r7, #28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd90      	pop	{r4, r7, pc}

08001c7c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001c92:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001c96:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	0c1b      	lsrs	r3, r3, #16
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	0b5b      	lsrs	r3, r3, #13
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d11a      	bne.n	8001d0c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	78db      	ldrb	r3, [r3, #3]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f8d2 	bl	8001e84 <RTC_Bcd2ToByte>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	785b      	ldrb	r3, [r3, #1]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 f8c9 	bl	8001e84 <RTC_Bcd2ToByte>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	789b      	ldrb	r3, [r3, #2]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 f8c0 	bl	8001e84 <RTC_Bcd2ToByte>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <HAL_RTC_WaitForSynchro+0x44>)
 8001d26:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8001d28:	f7fe fb12 	bl	8000350 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001d2e:	e009      	b.n	8001d44 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001d30:	f7fe fb0e 	bl	8000350 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d3e:	d901      	bls.n	8001d44 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e007      	b.n	8001d54 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0ee      	beq.n	8001d30 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	0003ff5f 	.word	0x0003ff5f

08001d60 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d120      	bne.n	8001dbc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d82:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001d84:	f7fe fae4 	bl	8000350 <HAL_GetTick>
 8001d88:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001d8a:	e00d      	b.n	8001da8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001d8c:	f7fe fae0 	bl	8000350 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d9a:	d905      	bls.n	8001da8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2203      	movs	r2, #3
 8001da4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d102      	bne.n	8001dbc <RTC_EnterInitMode+0x5c>
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d1e7      	bne.n	8001d8c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <RTC_ExitInitMode+0x78>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4a19      	ldr	r2, [pc, #100]	@ (8001e40 <RTC_ExitInitMode+0x78>)
 8001dda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001dde:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8001de0:	4b17      	ldr	r3, [pc, #92]	@ (8001e40 <RTC_ExitInitMode+0x78>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10c      	bne.n	8001e06 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff93 	bl	8001d18 <HAL_RTC_WaitForSynchro>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01e      	beq.n	8001e36 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e017      	b.n	8001e36 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001e06:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <RTC_ExitInitMode+0x78>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <RTC_ExitInitMode+0x78>)
 8001e0c:	f023 0320 	bic.w	r3, r3, #32
 8001e10:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ff80 	bl	8001d18 <HAL_RTC_WaitForSynchro>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2203      	movs	r2, #3
 8001e22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001e2a:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <RTC_ExitInitMode+0x78>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	4a04      	ldr	r2, [pc, #16]	@ (8001e40 <RTC_ExitInitMode+0x78>)
 8001e30:	f043 0320 	orr.w	r3, r3, #32
 8001e34:	6093      	str	r3, [r2, #8]
  }

  return status;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40002800 	.word	0x40002800

08001e44 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8001e56:	e005      	b.n	8001e64 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8001e5e:	7afb      	ldrb	r3, [r7, #11]
 8001e60:	3b0a      	subs	r3, #10
 8001e62:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8001e64:	7afb      	ldrb	r3, [r7, #11]
 8001e66:	2b09      	cmp	r3, #9
 8001e68:	d8f6      	bhi.n	8001e58 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	7afb      	ldrb	r3, [r7, #11]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	b2db      	uxtb	r3, r3
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	0092      	lsls	r2, r2, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	b2db      	uxtb	r3, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3350      	adds	r3, #80	@ 0x50
 8001eca:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	009a      	lsls	r2, r3, #2
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6013      	str	r3, [r2, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b085      	sub	sp, #20
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3350      	adds	r3, #80	@ 0x50
 8001efa:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4413      	add	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <main>:


RTC_HandleTypeDef rtc_handle;

int main(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
    HAL_Init();
 8001f1c:	f7fe f9a8 	bl	8000270 <HAL_Init>
    __HAL_RTC_RESET_HANDLE_STATE(&rtc_handle);
 8001f20:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <main+0x34>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    rtc_init();
 8001f28:	f000 f816 	bl	8001f58 <rtc_init>
    if(HAL_RTCEx_BKUPRead(&rtc_handle,RTC_BKP_DR0)!=BKP_FLAG)
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4807      	ldr	r0, [pc, #28]	@ (8001f4c <main+0x34>)
 8001f30:	f7ff ffdb 	bl	8001eea <HAL_RTCEx_BKUPRead>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f648 0288 	movw	r2, #34952	@ 0x8888
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d001      	beq.n	8001f42 <main+0x2a>
    {
    	rtc_calender_config();
 8001f3e:	f000 f84b 	bl	8001fd8 <rtc_calender_config>
    }
    while (1)
    {
    	rtc_calender_show(time,date);
 8001f42:	4903      	ldr	r1, [pc, #12]	@ (8001f50 <main+0x38>)
 8001f44:	4803      	ldr	r0, [pc, #12]	@ (8001f54 <main+0x3c>)
 8001f46:	f000 f877 	bl	8002038 <rtc_calender_show>
 8001f4a:	e7fa      	b.n	8001f42 <main+0x2a>
 8001f4c:	2000009c 	.word	0x2000009c
 8001f50:	2000008c 	.word	0x2000008c
 8001f54:	2000007c 	.word	0x2000007c

08001f58 <rtc_init>:
    }
}

void rtc_init(){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b0b4      	sub	sp, #208	@ 0xd0
 8001f5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_Oscinit;
	RCC_PeriphCLKInitTypeDef RCC_pclk;

	RCC_Oscinit.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 8001f5e:	230c      	movs	r3, #12
 8001f60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	RCC_Oscinit.LSEState = RCC_LSE_OFF;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	RCC_Oscinit.LSIState =RCC_LSI_ON;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	HAL_RCC_OscConfig(&RCC_Oscinit);
 8001f70:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe faeb 	bl	8000550 <HAL_RCC_OscConfig>

	RCC_pclk.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f7e:	607b      	str	r3, [r7, #4]
	RCC_pclk.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	HAL_RCCEx_PeriphCLKConfig(&RCC_pclk);
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe ffa8 	bl	8000ee0 <HAL_RCCEx_PeriphCLKConfig>

	__HAL_RCC_RTC_ENABLE();
 8001f90:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <rtc_init+0x74>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f96:	4a0d      	ldr	r2, [pc, #52]	@ (8001fcc <rtc_init+0x74>)
 8001f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

	rtc_handle.Instance = RTC;
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <rtc_init+0x78>)
 8001fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd4 <rtc_init+0x7c>)
 8001fa4:	601a      	str	r2, [r3, #0]
	rtc_handle.Init.HourFormat = RTC_HOURFORMAT_24;
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <rtc_init+0x78>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	605a      	str	r2, [r3, #4]
	rtc_handle.Init.AsynchPrediv = 0x7F;	//127
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <rtc_init+0x78>)
 8001fae:	227f      	movs	r2, #127	@ 0x7f
 8001fb0:	609a      	str	r2, [r3, #8]
	rtc_handle.Init.SynchPrediv = 0xF9;		//249
 8001fb2:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <rtc_init+0x78>)
 8001fb4:	22f9      	movs	r2, #249	@ 0xf9
 8001fb6:	60da      	str	r2, [r3, #12]
	rtc_handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <rtc_init+0x78>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]

	HAL_RTC_Init(&rtc_handle);
 8001fbe:	4804      	ldr	r0, [pc, #16]	@ (8001fd0 <rtc_init+0x78>)
 8001fc0:	f7ff fc4a 	bl	8001858 <HAL_RTC_Init>

}
 8001fc4:	bf00      	nop
 8001fc6:	37d0      	adds	r7, #208	@ 0xd0
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	2000009c 	.word	0x2000009c
 8001fd4:	40002800 	.word	0x40002800

08001fd8 <rtc_calender_config>:


void rtc_calender_config(){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
	RTC_DateTypeDef datestruct;
	RTC_TimeTypeDef timestrcut;

	datestruct.Year = 0x25;
 8001fde:	2325      	movs	r3, #37	@ 0x25
 8001fe0:	75fb      	strb	r3, [r7, #23]
	datestruct.Month = RTC_MONTH_AUGUST;
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	757b      	strb	r3, [r7, #21]
	datestruct.Date = 0x19;
 8001fe6:	2319      	movs	r3, #25
 8001fe8:	75bb      	strb	r3, [r7, #22]
	datestruct.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001fea:	2302      	movs	r3, #2
 8001fec:	753b      	strb	r3, [r7, #20]

	HAL_RTC_SetDate(&rtc_handle, &datestruct, RTC_FORMAT_BCD);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	480f      	ldr	r0, [pc, #60]	@ (8002034 <rtc_calender_config+0x5c>)
 8001ff8:	f7ff fdb9 	bl	8001b6e <HAL_RTC_SetDate>

	timestrcut.Hours = 9;
 8001ffc:	2309      	movs	r3, #9
 8001ffe:	703b      	strb	r3, [r7, #0]
	timestrcut.Minutes = 0x00;
 8002000:	2300      	movs	r3, #0
 8002002:	707b      	strb	r3, [r7, #1]
	timestrcut.Seconds = 0x00;
 8002004:	2300      	movs	r3, #0
 8002006:	70bb      	strb	r3, [r7, #2]
	timestrcut.TimeFormat = RTC_HOURFORMAT12_AM;
 8002008:	2300      	movs	r3, #0
 800200a:	70fb      	strb	r3, [r7, #3]
	timestrcut.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
	timestrcut.StoreOperation = RTC_STOREOPERATION_RESET;
 8002010:	2300      	movs	r3, #0
 8002012:	613b      	str	r3, [r7, #16]

	HAL_RTC_SetTime(&rtc_handle, &timestrcut, RTC_FORMAT_BCD);
 8002014:	463b      	mov	r3, r7
 8002016:	2201      	movs	r2, #1
 8002018:	4619      	mov	r1, r3
 800201a:	4806      	ldr	r0, [pc, #24]	@ (8002034 <rtc_calender_config+0x5c>)
 800201c:	f7ff fcae 	bl	800197c <HAL_RTC_SetTime>

	//Write to Backup Register
	HAL_RTCEx_BKUPWrite(&rtc_handle, RTC_BKP_DR0, BKP_FLAG);
 8002020:	f648 0288 	movw	r2, #34952	@ 0x8888
 8002024:	2100      	movs	r1, #0
 8002026:	4803      	ldr	r0, [pc, #12]	@ (8002034 <rtc_calender_config+0x5c>)
 8002028:	f7ff ff46 	bl	8001eb8 <HAL_RTCEx_BKUPWrite>

}
 800202c:	bf00      	nop
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	2000009c 	.word	0x2000009c

08002038 <rtc_calender_show>:

void rtc_calender_show(uint8_t *showtime,uint8_t *showdate){
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	@ 0x28
 800203c:	af02      	add	r7, sp, #8
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef datestruct;
	RTC_TimeTypeDef timestrcut;

	HAL_RTC_GetDate(&rtc_handle, &datestruct, RTC_FORMAT_BIN);
 8002042:	f107 031c 	add.w	r3, r7, #28
 8002046:	2200      	movs	r2, #0
 8002048:	4619      	mov	r1, r3
 800204a:	4812      	ldr	r0, [pc, #72]	@ (8002094 <rtc_calender_show+0x5c>)
 800204c:	f7ff fe16 	bl	8001c7c <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&rtc_handle, &timestrcut, RTC_FORMAT_BIN);
 8002050:	f107 0308 	add.w	r3, r7, #8
 8002054:	2200      	movs	r2, #0
 8002056:	4619      	mov	r1, r3
 8002058:	480e      	ldr	r0, [pc, #56]	@ (8002094 <rtc_calender_show+0x5c>)
 800205a:	f7ff fd2c 	bl	8001ab6 <HAL_RTC_GetTime>

	sprintf((char*)time,"%02d:%02d:%02d",timestrcut.Hours,timestrcut.Minutes,timestrcut.Seconds);
 800205e:	7a3b      	ldrb	r3, [r7, #8]
 8002060:	461a      	mov	r2, r3
 8002062:	7a7b      	ldrb	r3, [r7, #9]
 8002064:	4619      	mov	r1, r3
 8002066:	7abb      	ldrb	r3, [r7, #10]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	460b      	mov	r3, r1
 800206c:	490a      	ldr	r1, [pc, #40]	@ (8002098 <rtc_calender_show+0x60>)
 800206e:	480b      	ldr	r0, [pc, #44]	@ (800209c <rtc_calender_show+0x64>)
 8002070:	f000 f87e 	bl	8002170 <siprintf>
	sprintf((char*)date,"%02d:%02d:%02d",datestruct.Date,datestruct.Month,datestruct.Year);
 8002074:	7fbb      	ldrb	r3, [r7, #30]
 8002076:	461a      	mov	r2, r3
 8002078:	7f7b      	ldrb	r3, [r7, #29]
 800207a:	4619      	mov	r1, r3
 800207c:	7ffb      	ldrb	r3, [r7, #31]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	460b      	mov	r3, r1
 8002082:	4905      	ldr	r1, [pc, #20]	@ (8002098 <rtc_calender_show+0x60>)
 8002084:	4806      	ldr	r0, [pc, #24]	@ (80020a0 <rtc_calender_show+0x68>)
 8002086:	f000 f873 	bl	8002170 <siprintf>

}
 800208a:	bf00      	nop
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	2000009c 	.word	0x2000009c
 8002098:	08002ab8 	.word	0x08002ab8
 800209c:	2000007c 	.word	0x2000007c
 80020a0:	2000008c 	.word	0x2000008c

080020a4 <SysTick_Handler>:
void SysTick_Handler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80020a8:	f7fe f93e 	bl	8000328 <HAL_IncTick>
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b8:	4a14      	ldr	r2, [pc, #80]	@ (800210c <_sbrk+0x5c>)
 80020ba:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <_sbrk+0x60>)
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c4:	4b13      	ldr	r3, [pc, #76]	@ (8002114 <_sbrk+0x64>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020cc:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <_sbrk+0x64>)
 80020ce:	4a12      	ldr	r2, [pc, #72]	@ (8002118 <_sbrk+0x68>)
 80020d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d207      	bcs.n	80020f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e0:	f000 f868 	bl	80021b4 <__errno>
 80020e4:	4603      	mov	r3, r0
 80020e6:	220c      	movs	r2, #12
 80020e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	e009      	b.n	8002104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f0:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <_sbrk+0x64>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020f6:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <_sbrk+0x64>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	4a05      	ldr	r2, [pc, #20]	@ (8002114 <_sbrk+0x64>)
 8002100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002102:	68fb      	ldr	r3, [r7, #12]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20018000 	.word	0x20018000
 8002110:	00000400 	.word	0x00000400
 8002114:	200000c0 	.word	0x200000c0
 8002118:	20000210 	.word	0x20000210

0800211c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800211c:	480d      	ldr	r0, [pc, #52]	@ (8002154 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800211e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002120:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002124:	480c      	ldr	r0, [pc, #48]	@ (8002158 <LoopForever+0x6>)
  ldr r1, =_edata
 8002126:	490d      	ldr	r1, [pc, #52]	@ (800215c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002128:	4a0d      	ldr	r2, [pc, #52]	@ (8002160 <LoopForever+0xe>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800212c:	e002      	b.n	8002134 <LoopCopyDataInit>

0800212e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002132:	3304      	adds	r3, #4

08002134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002138:	d3f9      	bcc.n	800212e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213a:	4a0a      	ldr	r2, [pc, #40]	@ (8002164 <LoopForever+0x12>)
  ldr r4, =_ebss
 800213c:	4c0a      	ldr	r4, [pc, #40]	@ (8002168 <LoopForever+0x16>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002140:	e001      	b.n	8002146 <LoopFillZerobss>

08002142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002144:	3204      	adds	r2, #4

08002146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002148:	d3fb      	bcc.n	8002142 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800214a:	f000 f839 	bl	80021c0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800214e:	f7ff fee3 	bl	8001f18 <main>

08002152 <LoopForever>:

LoopForever:
  b LoopForever
 8002152:	e7fe      	b.n	8002152 <LoopForever>
  ldr   r0, =_estack
 8002154:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800215c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002160:	08002b4c 	.word	0x08002b4c
  ldr r2, =_sbss
 8002164:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002168:	2000020c 	.word	0x2000020c

0800216c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800216c:	e7fe      	b.n	800216c <ADC1_2_IRQHandler>
	...

08002170 <siprintf>:
 8002170:	b40e      	push	{r1, r2, r3}
 8002172:	b510      	push	{r4, lr}
 8002174:	b09d      	sub	sp, #116	@ 0x74
 8002176:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002178:	9002      	str	r0, [sp, #8]
 800217a:	9006      	str	r0, [sp, #24]
 800217c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002180:	480a      	ldr	r0, [pc, #40]	@ (80021ac <siprintf+0x3c>)
 8002182:	9107      	str	r1, [sp, #28]
 8002184:	9104      	str	r1, [sp, #16]
 8002186:	490a      	ldr	r1, [pc, #40]	@ (80021b0 <siprintf+0x40>)
 8002188:	f853 2b04 	ldr.w	r2, [r3], #4
 800218c:	9105      	str	r1, [sp, #20]
 800218e:	2400      	movs	r4, #0
 8002190:	a902      	add	r1, sp, #8
 8002192:	6800      	ldr	r0, [r0, #0]
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002198:	f000 f98c 	bl	80024b4 <_svfiprintf_r>
 800219c:	9b02      	ldr	r3, [sp, #8]
 800219e:	701c      	strb	r4, [r3, #0]
 80021a0:	b01d      	add	sp, #116	@ 0x74
 80021a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021a6:	b003      	add	sp, #12
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	2000000c 	.word	0x2000000c
 80021b0:	ffff0208 	.word	0xffff0208

080021b4 <__errno>:
 80021b4:	4b01      	ldr	r3, [pc, #4]	@ (80021bc <__errno+0x8>)
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	2000000c 	.word	0x2000000c

080021c0 <__libc_init_array>:
 80021c0:	b570      	push	{r4, r5, r6, lr}
 80021c2:	4d0d      	ldr	r5, [pc, #52]	@ (80021f8 <__libc_init_array+0x38>)
 80021c4:	4c0d      	ldr	r4, [pc, #52]	@ (80021fc <__libc_init_array+0x3c>)
 80021c6:	1b64      	subs	r4, r4, r5
 80021c8:	10a4      	asrs	r4, r4, #2
 80021ca:	2600      	movs	r6, #0
 80021cc:	42a6      	cmp	r6, r4
 80021ce:	d109      	bne.n	80021e4 <__libc_init_array+0x24>
 80021d0:	4d0b      	ldr	r5, [pc, #44]	@ (8002200 <__libc_init_array+0x40>)
 80021d2:	4c0c      	ldr	r4, [pc, #48]	@ (8002204 <__libc_init_array+0x44>)
 80021d4:	f000 fc64 	bl	8002aa0 <_init>
 80021d8:	1b64      	subs	r4, r4, r5
 80021da:	10a4      	asrs	r4, r4, #2
 80021dc:	2600      	movs	r6, #0
 80021de:	42a6      	cmp	r6, r4
 80021e0:	d105      	bne.n	80021ee <__libc_init_array+0x2e>
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
 80021e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021e8:	4798      	blx	r3
 80021ea:	3601      	adds	r6, #1
 80021ec:	e7ee      	b.n	80021cc <__libc_init_array+0xc>
 80021ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80021f2:	4798      	blx	r3
 80021f4:	3601      	adds	r6, #1
 80021f6:	e7f2      	b.n	80021de <__libc_init_array+0x1e>
 80021f8:	08002b44 	.word	0x08002b44
 80021fc:	08002b44 	.word	0x08002b44
 8002200:	08002b44 	.word	0x08002b44
 8002204:	08002b48 	.word	0x08002b48

08002208 <__retarget_lock_acquire_recursive>:
 8002208:	4770      	bx	lr

0800220a <__retarget_lock_release_recursive>:
 800220a:	4770      	bx	lr

0800220c <_free_r>:
 800220c:	b538      	push	{r3, r4, r5, lr}
 800220e:	4605      	mov	r5, r0
 8002210:	2900      	cmp	r1, #0
 8002212:	d041      	beq.n	8002298 <_free_r+0x8c>
 8002214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002218:	1f0c      	subs	r4, r1, #4
 800221a:	2b00      	cmp	r3, #0
 800221c:	bfb8      	it	lt
 800221e:	18e4      	addlt	r4, r4, r3
 8002220:	f000 f8e0 	bl	80023e4 <__malloc_lock>
 8002224:	4a1d      	ldr	r2, [pc, #116]	@ (800229c <_free_r+0x90>)
 8002226:	6813      	ldr	r3, [r2, #0]
 8002228:	b933      	cbnz	r3, 8002238 <_free_r+0x2c>
 800222a:	6063      	str	r3, [r4, #4]
 800222c:	6014      	str	r4, [r2, #0]
 800222e:	4628      	mov	r0, r5
 8002230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002234:	f000 b8dc 	b.w	80023f0 <__malloc_unlock>
 8002238:	42a3      	cmp	r3, r4
 800223a:	d908      	bls.n	800224e <_free_r+0x42>
 800223c:	6820      	ldr	r0, [r4, #0]
 800223e:	1821      	adds	r1, r4, r0
 8002240:	428b      	cmp	r3, r1
 8002242:	bf01      	itttt	eq
 8002244:	6819      	ldreq	r1, [r3, #0]
 8002246:	685b      	ldreq	r3, [r3, #4]
 8002248:	1809      	addeq	r1, r1, r0
 800224a:	6021      	streq	r1, [r4, #0]
 800224c:	e7ed      	b.n	800222a <_free_r+0x1e>
 800224e:	461a      	mov	r2, r3
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	b10b      	cbz	r3, 8002258 <_free_r+0x4c>
 8002254:	42a3      	cmp	r3, r4
 8002256:	d9fa      	bls.n	800224e <_free_r+0x42>
 8002258:	6811      	ldr	r1, [r2, #0]
 800225a:	1850      	adds	r0, r2, r1
 800225c:	42a0      	cmp	r0, r4
 800225e:	d10b      	bne.n	8002278 <_free_r+0x6c>
 8002260:	6820      	ldr	r0, [r4, #0]
 8002262:	4401      	add	r1, r0
 8002264:	1850      	adds	r0, r2, r1
 8002266:	4283      	cmp	r3, r0
 8002268:	6011      	str	r1, [r2, #0]
 800226a:	d1e0      	bne.n	800222e <_free_r+0x22>
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	6053      	str	r3, [r2, #4]
 8002272:	4408      	add	r0, r1
 8002274:	6010      	str	r0, [r2, #0]
 8002276:	e7da      	b.n	800222e <_free_r+0x22>
 8002278:	d902      	bls.n	8002280 <_free_r+0x74>
 800227a:	230c      	movs	r3, #12
 800227c:	602b      	str	r3, [r5, #0]
 800227e:	e7d6      	b.n	800222e <_free_r+0x22>
 8002280:	6820      	ldr	r0, [r4, #0]
 8002282:	1821      	adds	r1, r4, r0
 8002284:	428b      	cmp	r3, r1
 8002286:	bf04      	itt	eq
 8002288:	6819      	ldreq	r1, [r3, #0]
 800228a:	685b      	ldreq	r3, [r3, #4]
 800228c:	6063      	str	r3, [r4, #4]
 800228e:	bf04      	itt	eq
 8002290:	1809      	addeq	r1, r1, r0
 8002292:	6021      	streq	r1, [r4, #0]
 8002294:	6054      	str	r4, [r2, #4]
 8002296:	e7ca      	b.n	800222e <_free_r+0x22>
 8002298:	bd38      	pop	{r3, r4, r5, pc}
 800229a:	bf00      	nop
 800229c:	20000208 	.word	0x20000208

080022a0 <sbrk_aligned>:
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	4e0f      	ldr	r6, [pc, #60]	@ (80022e0 <sbrk_aligned+0x40>)
 80022a4:	460c      	mov	r4, r1
 80022a6:	6831      	ldr	r1, [r6, #0]
 80022a8:	4605      	mov	r5, r0
 80022aa:	b911      	cbnz	r1, 80022b2 <sbrk_aligned+0x12>
 80022ac:	f000 fba4 	bl	80029f8 <_sbrk_r>
 80022b0:	6030      	str	r0, [r6, #0]
 80022b2:	4621      	mov	r1, r4
 80022b4:	4628      	mov	r0, r5
 80022b6:	f000 fb9f 	bl	80029f8 <_sbrk_r>
 80022ba:	1c43      	adds	r3, r0, #1
 80022bc:	d103      	bne.n	80022c6 <sbrk_aligned+0x26>
 80022be:	f04f 34ff 	mov.w	r4, #4294967295
 80022c2:	4620      	mov	r0, r4
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
 80022c6:	1cc4      	adds	r4, r0, #3
 80022c8:	f024 0403 	bic.w	r4, r4, #3
 80022cc:	42a0      	cmp	r0, r4
 80022ce:	d0f8      	beq.n	80022c2 <sbrk_aligned+0x22>
 80022d0:	1a21      	subs	r1, r4, r0
 80022d2:	4628      	mov	r0, r5
 80022d4:	f000 fb90 	bl	80029f8 <_sbrk_r>
 80022d8:	3001      	adds	r0, #1
 80022da:	d1f2      	bne.n	80022c2 <sbrk_aligned+0x22>
 80022dc:	e7ef      	b.n	80022be <sbrk_aligned+0x1e>
 80022de:	bf00      	nop
 80022e0:	20000204 	.word	0x20000204

080022e4 <_malloc_r>:
 80022e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022e8:	1ccd      	adds	r5, r1, #3
 80022ea:	f025 0503 	bic.w	r5, r5, #3
 80022ee:	3508      	adds	r5, #8
 80022f0:	2d0c      	cmp	r5, #12
 80022f2:	bf38      	it	cc
 80022f4:	250c      	movcc	r5, #12
 80022f6:	2d00      	cmp	r5, #0
 80022f8:	4606      	mov	r6, r0
 80022fa:	db01      	blt.n	8002300 <_malloc_r+0x1c>
 80022fc:	42a9      	cmp	r1, r5
 80022fe:	d904      	bls.n	800230a <_malloc_r+0x26>
 8002300:	230c      	movs	r3, #12
 8002302:	6033      	str	r3, [r6, #0]
 8002304:	2000      	movs	r0, #0
 8002306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800230a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80023e0 <_malloc_r+0xfc>
 800230e:	f000 f869 	bl	80023e4 <__malloc_lock>
 8002312:	f8d8 3000 	ldr.w	r3, [r8]
 8002316:	461c      	mov	r4, r3
 8002318:	bb44      	cbnz	r4, 800236c <_malloc_r+0x88>
 800231a:	4629      	mov	r1, r5
 800231c:	4630      	mov	r0, r6
 800231e:	f7ff ffbf 	bl	80022a0 <sbrk_aligned>
 8002322:	1c43      	adds	r3, r0, #1
 8002324:	4604      	mov	r4, r0
 8002326:	d158      	bne.n	80023da <_malloc_r+0xf6>
 8002328:	f8d8 4000 	ldr.w	r4, [r8]
 800232c:	4627      	mov	r7, r4
 800232e:	2f00      	cmp	r7, #0
 8002330:	d143      	bne.n	80023ba <_malloc_r+0xd6>
 8002332:	2c00      	cmp	r4, #0
 8002334:	d04b      	beq.n	80023ce <_malloc_r+0xea>
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	4639      	mov	r1, r7
 800233a:	4630      	mov	r0, r6
 800233c:	eb04 0903 	add.w	r9, r4, r3
 8002340:	f000 fb5a 	bl	80029f8 <_sbrk_r>
 8002344:	4581      	cmp	r9, r0
 8002346:	d142      	bne.n	80023ce <_malloc_r+0xea>
 8002348:	6821      	ldr	r1, [r4, #0]
 800234a:	1a6d      	subs	r5, r5, r1
 800234c:	4629      	mov	r1, r5
 800234e:	4630      	mov	r0, r6
 8002350:	f7ff ffa6 	bl	80022a0 <sbrk_aligned>
 8002354:	3001      	adds	r0, #1
 8002356:	d03a      	beq.n	80023ce <_malloc_r+0xea>
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	442b      	add	r3, r5
 800235c:	6023      	str	r3, [r4, #0]
 800235e:	f8d8 3000 	ldr.w	r3, [r8]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	bb62      	cbnz	r2, 80023c0 <_malloc_r+0xdc>
 8002366:	f8c8 7000 	str.w	r7, [r8]
 800236a:	e00f      	b.n	800238c <_malloc_r+0xa8>
 800236c:	6822      	ldr	r2, [r4, #0]
 800236e:	1b52      	subs	r2, r2, r5
 8002370:	d420      	bmi.n	80023b4 <_malloc_r+0xd0>
 8002372:	2a0b      	cmp	r2, #11
 8002374:	d917      	bls.n	80023a6 <_malloc_r+0xc2>
 8002376:	1961      	adds	r1, r4, r5
 8002378:	42a3      	cmp	r3, r4
 800237a:	6025      	str	r5, [r4, #0]
 800237c:	bf18      	it	ne
 800237e:	6059      	strne	r1, [r3, #4]
 8002380:	6863      	ldr	r3, [r4, #4]
 8002382:	bf08      	it	eq
 8002384:	f8c8 1000 	streq.w	r1, [r8]
 8002388:	5162      	str	r2, [r4, r5]
 800238a:	604b      	str	r3, [r1, #4]
 800238c:	4630      	mov	r0, r6
 800238e:	f000 f82f 	bl	80023f0 <__malloc_unlock>
 8002392:	f104 000b 	add.w	r0, r4, #11
 8002396:	1d23      	adds	r3, r4, #4
 8002398:	f020 0007 	bic.w	r0, r0, #7
 800239c:	1ac2      	subs	r2, r0, r3
 800239e:	bf1c      	itt	ne
 80023a0:	1a1b      	subne	r3, r3, r0
 80023a2:	50a3      	strne	r3, [r4, r2]
 80023a4:	e7af      	b.n	8002306 <_malloc_r+0x22>
 80023a6:	6862      	ldr	r2, [r4, #4]
 80023a8:	42a3      	cmp	r3, r4
 80023aa:	bf0c      	ite	eq
 80023ac:	f8c8 2000 	streq.w	r2, [r8]
 80023b0:	605a      	strne	r2, [r3, #4]
 80023b2:	e7eb      	b.n	800238c <_malloc_r+0xa8>
 80023b4:	4623      	mov	r3, r4
 80023b6:	6864      	ldr	r4, [r4, #4]
 80023b8:	e7ae      	b.n	8002318 <_malloc_r+0x34>
 80023ba:	463c      	mov	r4, r7
 80023bc:	687f      	ldr	r7, [r7, #4]
 80023be:	e7b6      	b.n	800232e <_malloc_r+0x4a>
 80023c0:	461a      	mov	r2, r3
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	42a3      	cmp	r3, r4
 80023c6:	d1fb      	bne.n	80023c0 <_malloc_r+0xdc>
 80023c8:	2300      	movs	r3, #0
 80023ca:	6053      	str	r3, [r2, #4]
 80023cc:	e7de      	b.n	800238c <_malloc_r+0xa8>
 80023ce:	230c      	movs	r3, #12
 80023d0:	6033      	str	r3, [r6, #0]
 80023d2:	4630      	mov	r0, r6
 80023d4:	f000 f80c 	bl	80023f0 <__malloc_unlock>
 80023d8:	e794      	b.n	8002304 <_malloc_r+0x20>
 80023da:	6005      	str	r5, [r0, #0]
 80023dc:	e7d6      	b.n	800238c <_malloc_r+0xa8>
 80023de:	bf00      	nop
 80023e0:	20000208 	.word	0x20000208

080023e4 <__malloc_lock>:
 80023e4:	4801      	ldr	r0, [pc, #4]	@ (80023ec <__malloc_lock+0x8>)
 80023e6:	f7ff bf0f 	b.w	8002208 <__retarget_lock_acquire_recursive>
 80023ea:	bf00      	nop
 80023ec:	20000200 	.word	0x20000200

080023f0 <__malloc_unlock>:
 80023f0:	4801      	ldr	r0, [pc, #4]	@ (80023f8 <__malloc_unlock+0x8>)
 80023f2:	f7ff bf0a 	b.w	800220a <__retarget_lock_release_recursive>
 80023f6:	bf00      	nop
 80023f8:	20000200 	.word	0x20000200

080023fc <__ssputs_r>:
 80023fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002400:	688e      	ldr	r6, [r1, #8]
 8002402:	461f      	mov	r7, r3
 8002404:	42be      	cmp	r6, r7
 8002406:	680b      	ldr	r3, [r1, #0]
 8002408:	4682      	mov	sl, r0
 800240a:	460c      	mov	r4, r1
 800240c:	4690      	mov	r8, r2
 800240e:	d82d      	bhi.n	800246c <__ssputs_r+0x70>
 8002410:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002414:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002418:	d026      	beq.n	8002468 <__ssputs_r+0x6c>
 800241a:	6965      	ldr	r5, [r4, #20]
 800241c:	6909      	ldr	r1, [r1, #16]
 800241e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002422:	eba3 0901 	sub.w	r9, r3, r1
 8002426:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800242a:	1c7b      	adds	r3, r7, #1
 800242c:	444b      	add	r3, r9
 800242e:	106d      	asrs	r5, r5, #1
 8002430:	429d      	cmp	r5, r3
 8002432:	bf38      	it	cc
 8002434:	461d      	movcc	r5, r3
 8002436:	0553      	lsls	r3, r2, #21
 8002438:	d527      	bpl.n	800248a <__ssputs_r+0x8e>
 800243a:	4629      	mov	r1, r5
 800243c:	f7ff ff52 	bl	80022e4 <_malloc_r>
 8002440:	4606      	mov	r6, r0
 8002442:	b360      	cbz	r0, 800249e <__ssputs_r+0xa2>
 8002444:	6921      	ldr	r1, [r4, #16]
 8002446:	464a      	mov	r2, r9
 8002448:	f000 fae6 	bl	8002a18 <memcpy>
 800244c:	89a3      	ldrh	r3, [r4, #12]
 800244e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002456:	81a3      	strh	r3, [r4, #12]
 8002458:	6126      	str	r6, [r4, #16]
 800245a:	6165      	str	r5, [r4, #20]
 800245c:	444e      	add	r6, r9
 800245e:	eba5 0509 	sub.w	r5, r5, r9
 8002462:	6026      	str	r6, [r4, #0]
 8002464:	60a5      	str	r5, [r4, #8]
 8002466:	463e      	mov	r6, r7
 8002468:	42be      	cmp	r6, r7
 800246a:	d900      	bls.n	800246e <__ssputs_r+0x72>
 800246c:	463e      	mov	r6, r7
 800246e:	6820      	ldr	r0, [r4, #0]
 8002470:	4632      	mov	r2, r6
 8002472:	4641      	mov	r1, r8
 8002474:	f000 faa6 	bl	80029c4 <memmove>
 8002478:	68a3      	ldr	r3, [r4, #8]
 800247a:	1b9b      	subs	r3, r3, r6
 800247c:	60a3      	str	r3, [r4, #8]
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	4433      	add	r3, r6
 8002482:	6023      	str	r3, [r4, #0]
 8002484:	2000      	movs	r0, #0
 8002486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800248a:	462a      	mov	r2, r5
 800248c:	f000 fad2 	bl	8002a34 <_realloc_r>
 8002490:	4606      	mov	r6, r0
 8002492:	2800      	cmp	r0, #0
 8002494:	d1e0      	bne.n	8002458 <__ssputs_r+0x5c>
 8002496:	6921      	ldr	r1, [r4, #16]
 8002498:	4650      	mov	r0, sl
 800249a:	f7ff feb7 	bl	800220c <_free_r>
 800249e:	230c      	movs	r3, #12
 80024a0:	f8ca 3000 	str.w	r3, [sl]
 80024a4:	89a3      	ldrh	r3, [r4, #12]
 80024a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024aa:	81a3      	strh	r3, [r4, #12]
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	e7e9      	b.n	8002486 <__ssputs_r+0x8a>
	...

080024b4 <_svfiprintf_r>:
 80024b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b8:	4698      	mov	r8, r3
 80024ba:	898b      	ldrh	r3, [r1, #12]
 80024bc:	061b      	lsls	r3, r3, #24
 80024be:	b09d      	sub	sp, #116	@ 0x74
 80024c0:	4607      	mov	r7, r0
 80024c2:	460d      	mov	r5, r1
 80024c4:	4614      	mov	r4, r2
 80024c6:	d510      	bpl.n	80024ea <_svfiprintf_r+0x36>
 80024c8:	690b      	ldr	r3, [r1, #16]
 80024ca:	b973      	cbnz	r3, 80024ea <_svfiprintf_r+0x36>
 80024cc:	2140      	movs	r1, #64	@ 0x40
 80024ce:	f7ff ff09 	bl	80022e4 <_malloc_r>
 80024d2:	6028      	str	r0, [r5, #0]
 80024d4:	6128      	str	r0, [r5, #16]
 80024d6:	b930      	cbnz	r0, 80024e6 <_svfiprintf_r+0x32>
 80024d8:	230c      	movs	r3, #12
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	b01d      	add	sp, #116	@ 0x74
 80024e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024e6:	2340      	movs	r3, #64	@ 0x40
 80024e8:	616b      	str	r3, [r5, #20]
 80024ea:	2300      	movs	r3, #0
 80024ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80024ee:	2320      	movs	r3, #32
 80024f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80024f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80024f8:	2330      	movs	r3, #48	@ 0x30
 80024fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002698 <_svfiprintf_r+0x1e4>
 80024fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002502:	f04f 0901 	mov.w	r9, #1
 8002506:	4623      	mov	r3, r4
 8002508:	469a      	mov	sl, r3
 800250a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800250e:	b10a      	cbz	r2, 8002514 <_svfiprintf_r+0x60>
 8002510:	2a25      	cmp	r2, #37	@ 0x25
 8002512:	d1f9      	bne.n	8002508 <_svfiprintf_r+0x54>
 8002514:	ebba 0b04 	subs.w	fp, sl, r4
 8002518:	d00b      	beq.n	8002532 <_svfiprintf_r+0x7e>
 800251a:	465b      	mov	r3, fp
 800251c:	4622      	mov	r2, r4
 800251e:	4629      	mov	r1, r5
 8002520:	4638      	mov	r0, r7
 8002522:	f7ff ff6b 	bl	80023fc <__ssputs_r>
 8002526:	3001      	adds	r0, #1
 8002528:	f000 80a7 	beq.w	800267a <_svfiprintf_r+0x1c6>
 800252c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800252e:	445a      	add	r2, fp
 8002530:	9209      	str	r2, [sp, #36]	@ 0x24
 8002532:	f89a 3000 	ldrb.w	r3, [sl]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 809f 	beq.w	800267a <_svfiprintf_r+0x1c6>
 800253c:	2300      	movs	r3, #0
 800253e:	f04f 32ff 	mov.w	r2, #4294967295
 8002542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002546:	f10a 0a01 	add.w	sl, sl, #1
 800254a:	9304      	str	r3, [sp, #16]
 800254c:	9307      	str	r3, [sp, #28]
 800254e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002552:	931a      	str	r3, [sp, #104]	@ 0x68
 8002554:	4654      	mov	r4, sl
 8002556:	2205      	movs	r2, #5
 8002558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800255c:	484e      	ldr	r0, [pc, #312]	@ (8002698 <_svfiprintf_r+0x1e4>)
 800255e:	f7fd fe37 	bl	80001d0 <memchr>
 8002562:	9a04      	ldr	r2, [sp, #16]
 8002564:	b9d8      	cbnz	r0, 800259e <_svfiprintf_r+0xea>
 8002566:	06d0      	lsls	r0, r2, #27
 8002568:	bf44      	itt	mi
 800256a:	2320      	movmi	r3, #32
 800256c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002570:	0711      	lsls	r1, r2, #28
 8002572:	bf44      	itt	mi
 8002574:	232b      	movmi	r3, #43	@ 0x2b
 8002576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800257a:	f89a 3000 	ldrb.w	r3, [sl]
 800257e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002580:	d015      	beq.n	80025ae <_svfiprintf_r+0xfa>
 8002582:	9a07      	ldr	r2, [sp, #28]
 8002584:	4654      	mov	r4, sl
 8002586:	2000      	movs	r0, #0
 8002588:	f04f 0c0a 	mov.w	ip, #10
 800258c:	4621      	mov	r1, r4
 800258e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002592:	3b30      	subs	r3, #48	@ 0x30
 8002594:	2b09      	cmp	r3, #9
 8002596:	d94b      	bls.n	8002630 <_svfiprintf_r+0x17c>
 8002598:	b1b0      	cbz	r0, 80025c8 <_svfiprintf_r+0x114>
 800259a:	9207      	str	r2, [sp, #28]
 800259c:	e014      	b.n	80025c8 <_svfiprintf_r+0x114>
 800259e:	eba0 0308 	sub.w	r3, r0, r8
 80025a2:	fa09 f303 	lsl.w	r3, r9, r3
 80025a6:	4313      	orrs	r3, r2
 80025a8:	9304      	str	r3, [sp, #16]
 80025aa:	46a2      	mov	sl, r4
 80025ac:	e7d2      	b.n	8002554 <_svfiprintf_r+0xa0>
 80025ae:	9b03      	ldr	r3, [sp, #12]
 80025b0:	1d19      	adds	r1, r3, #4
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	9103      	str	r1, [sp, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bfbb      	ittet	lt
 80025ba:	425b      	neglt	r3, r3
 80025bc:	f042 0202 	orrlt.w	r2, r2, #2
 80025c0:	9307      	strge	r3, [sp, #28]
 80025c2:	9307      	strlt	r3, [sp, #28]
 80025c4:	bfb8      	it	lt
 80025c6:	9204      	strlt	r2, [sp, #16]
 80025c8:	7823      	ldrb	r3, [r4, #0]
 80025ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80025cc:	d10a      	bne.n	80025e4 <_svfiprintf_r+0x130>
 80025ce:	7863      	ldrb	r3, [r4, #1]
 80025d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80025d2:	d132      	bne.n	800263a <_svfiprintf_r+0x186>
 80025d4:	9b03      	ldr	r3, [sp, #12]
 80025d6:	1d1a      	adds	r2, r3, #4
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	9203      	str	r2, [sp, #12]
 80025dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80025e0:	3402      	adds	r4, #2
 80025e2:	9305      	str	r3, [sp, #20]
 80025e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80026a8 <_svfiprintf_r+0x1f4>
 80025e8:	7821      	ldrb	r1, [r4, #0]
 80025ea:	2203      	movs	r2, #3
 80025ec:	4650      	mov	r0, sl
 80025ee:	f7fd fdef 	bl	80001d0 <memchr>
 80025f2:	b138      	cbz	r0, 8002604 <_svfiprintf_r+0x150>
 80025f4:	9b04      	ldr	r3, [sp, #16]
 80025f6:	eba0 000a 	sub.w	r0, r0, sl
 80025fa:	2240      	movs	r2, #64	@ 0x40
 80025fc:	4082      	lsls	r2, r0
 80025fe:	4313      	orrs	r3, r2
 8002600:	3401      	adds	r4, #1
 8002602:	9304      	str	r3, [sp, #16]
 8002604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002608:	4824      	ldr	r0, [pc, #144]	@ (800269c <_svfiprintf_r+0x1e8>)
 800260a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800260e:	2206      	movs	r2, #6
 8002610:	f7fd fdde 	bl	80001d0 <memchr>
 8002614:	2800      	cmp	r0, #0
 8002616:	d036      	beq.n	8002686 <_svfiprintf_r+0x1d2>
 8002618:	4b21      	ldr	r3, [pc, #132]	@ (80026a0 <_svfiprintf_r+0x1ec>)
 800261a:	bb1b      	cbnz	r3, 8002664 <_svfiprintf_r+0x1b0>
 800261c:	9b03      	ldr	r3, [sp, #12]
 800261e:	3307      	adds	r3, #7
 8002620:	f023 0307 	bic.w	r3, r3, #7
 8002624:	3308      	adds	r3, #8
 8002626:	9303      	str	r3, [sp, #12]
 8002628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800262a:	4433      	add	r3, r6
 800262c:	9309      	str	r3, [sp, #36]	@ 0x24
 800262e:	e76a      	b.n	8002506 <_svfiprintf_r+0x52>
 8002630:	fb0c 3202 	mla	r2, ip, r2, r3
 8002634:	460c      	mov	r4, r1
 8002636:	2001      	movs	r0, #1
 8002638:	e7a8      	b.n	800258c <_svfiprintf_r+0xd8>
 800263a:	2300      	movs	r3, #0
 800263c:	3401      	adds	r4, #1
 800263e:	9305      	str	r3, [sp, #20]
 8002640:	4619      	mov	r1, r3
 8002642:	f04f 0c0a 	mov.w	ip, #10
 8002646:	4620      	mov	r0, r4
 8002648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800264c:	3a30      	subs	r2, #48	@ 0x30
 800264e:	2a09      	cmp	r2, #9
 8002650:	d903      	bls.n	800265a <_svfiprintf_r+0x1a6>
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0c6      	beq.n	80025e4 <_svfiprintf_r+0x130>
 8002656:	9105      	str	r1, [sp, #20]
 8002658:	e7c4      	b.n	80025e4 <_svfiprintf_r+0x130>
 800265a:	fb0c 2101 	mla	r1, ip, r1, r2
 800265e:	4604      	mov	r4, r0
 8002660:	2301      	movs	r3, #1
 8002662:	e7f0      	b.n	8002646 <_svfiprintf_r+0x192>
 8002664:	ab03      	add	r3, sp, #12
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	462a      	mov	r2, r5
 800266a:	4b0e      	ldr	r3, [pc, #56]	@ (80026a4 <_svfiprintf_r+0x1f0>)
 800266c:	a904      	add	r1, sp, #16
 800266e:	4638      	mov	r0, r7
 8002670:	f3af 8000 	nop.w
 8002674:	1c42      	adds	r2, r0, #1
 8002676:	4606      	mov	r6, r0
 8002678:	d1d6      	bne.n	8002628 <_svfiprintf_r+0x174>
 800267a:	89ab      	ldrh	r3, [r5, #12]
 800267c:	065b      	lsls	r3, r3, #25
 800267e:	f53f af2d 	bmi.w	80024dc <_svfiprintf_r+0x28>
 8002682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002684:	e72c      	b.n	80024e0 <_svfiprintf_r+0x2c>
 8002686:	ab03      	add	r3, sp, #12
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	462a      	mov	r2, r5
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <_svfiprintf_r+0x1f0>)
 800268e:	a904      	add	r1, sp, #16
 8002690:	4638      	mov	r0, r7
 8002692:	f000 f879 	bl	8002788 <_printf_i>
 8002696:	e7ed      	b.n	8002674 <_svfiprintf_r+0x1c0>
 8002698:	08002b08 	.word	0x08002b08
 800269c:	08002b12 	.word	0x08002b12
 80026a0:	00000000 	.word	0x00000000
 80026a4:	080023fd 	.word	0x080023fd
 80026a8:	08002b0e 	.word	0x08002b0e

080026ac <_printf_common>:
 80026ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026b0:	4616      	mov	r6, r2
 80026b2:	4698      	mov	r8, r3
 80026b4:	688a      	ldr	r2, [r1, #8]
 80026b6:	690b      	ldr	r3, [r1, #16]
 80026b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80026bc:	4293      	cmp	r3, r2
 80026be:	bfb8      	it	lt
 80026c0:	4613      	movlt	r3, r2
 80026c2:	6033      	str	r3, [r6, #0]
 80026c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80026c8:	4607      	mov	r7, r0
 80026ca:	460c      	mov	r4, r1
 80026cc:	b10a      	cbz	r2, 80026d2 <_printf_common+0x26>
 80026ce:	3301      	adds	r3, #1
 80026d0:	6033      	str	r3, [r6, #0]
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	0699      	lsls	r1, r3, #26
 80026d6:	bf42      	ittt	mi
 80026d8:	6833      	ldrmi	r3, [r6, #0]
 80026da:	3302      	addmi	r3, #2
 80026dc:	6033      	strmi	r3, [r6, #0]
 80026de:	6825      	ldr	r5, [r4, #0]
 80026e0:	f015 0506 	ands.w	r5, r5, #6
 80026e4:	d106      	bne.n	80026f4 <_printf_common+0x48>
 80026e6:	f104 0a19 	add.w	sl, r4, #25
 80026ea:	68e3      	ldr	r3, [r4, #12]
 80026ec:	6832      	ldr	r2, [r6, #0]
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	42ab      	cmp	r3, r5
 80026f2:	dc26      	bgt.n	8002742 <_printf_common+0x96>
 80026f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80026f8:	6822      	ldr	r2, [r4, #0]
 80026fa:	3b00      	subs	r3, #0
 80026fc:	bf18      	it	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	0692      	lsls	r2, r2, #26
 8002702:	d42b      	bmi.n	800275c <_printf_common+0xb0>
 8002704:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002708:	4641      	mov	r1, r8
 800270a:	4638      	mov	r0, r7
 800270c:	47c8      	blx	r9
 800270e:	3001      	adds	r0, #1
 8002710:	d01e      	beq.n	8002750 <_printf_common+0xa4>
 8002712:	6823      	ldr	r3, [r4, #0]
 8002714:	6922      	ldr	r2, [r4, #16]
 8002716:	f003 0306 	and.w	r3, r3, #6
 800271a:	2b04      	cmp	r3, #4
 800271c:	bf02      	ittt	eq
 800271e:	68e5      	ldreq	r5, [r4, #12]
 8002720:	6833      	ldreq	r3, [r6, #0]
 8002722:	1aed      	subeq	r5, r5, r3
 8002724:	68a3      	ldr	r3, [r4, #8]
 8002726:	bf0c      	ite	eq
 8002728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800272c:	2500      	movne	r5, #0
 800272e:	4293      	cmp	r3, r2
 8002730:	bfc4      	itt	gt
 8002732:	1a9b      	subgt	r3, r3, r2
 8002734:	18ed      	addgt	r5, r5, r3
 8002736:	2600      	movs	r6, #0
 8002738:	341a      	adds	r4, #26
 800273a:	42b5      	cmp	r5, r6
 800273c:	d11a      	bne.n	8002774 <_printf_common+0xc8>
 800273e:	2000      	movs	r0, #0
 8002740:	e008      	b.n	8002754 <_printf_common+0xa8>
 8002742:	2301      	movs	r3, #1
 8002744:	4652      	mov	r2, sl
 8002746:	4641      	mov	r1, r8
 8002748:	4638      	mov	r0, r7
 800274a:	47c8      	blx	r9
 800274c:	3001      	adds	r0, #1
 800274e:	d103      	bne.n	8002758 <_printf_common+0xac>
 8002750:	f04f 30ff 	mov.w	r0, #4294967295
 8002754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002758:	3501      	adds	r5, #1
 800275a:	e7c6      	b.n	80026ea <_printf_common+0x3e>
 800275c:	18e1      	adds	r1, r4, r3
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	2030      	movs	r0, #48	@ 0x30
 8002762:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002766:	4422      	add	r2, r4
 8002768:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800276c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002770:	3302      	adds	r3, #2
 8002772:	e7c7      	b.n	8002704 <_printf_common+0x58>
 8002774:	2301      	movs	r3, #1
 8002776:	4622      	mov	r2, r4
 8002778:	4641      	mov	r1, r8
 800277a:	4638      	mov	r0, r7
 800277c:	47c8      	blx	r9
 800277e:	3001      	adds	r0, #1
 8002780:	d0e6      	beq.n	8002750 <_printf_common+0xa4>
 8002782:	3601      	adds	r6, #1
 8002784:	e7d9      	b.n	800273a <_printf_common+0x8e>
	...

08002788 <_printf_i>:
 8002788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800278c:	7e0f      	ldrb	r7, [r1, #24]
 800278e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002790:	2f78      	cmp	r7, #120	@ 0x78
 8002792:	4691      	mov	r9, r2
 8002794:	4680      	mov	r8, r0
 8002796:	460c      	mov	r4, r1
 8002798:	469a      	mov	sl, r3
 800279a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800279e:	d807      	bhi.n	80027b0 <_printf_i+0x28>
 80027a0:	2f62      	cmp	r7, #98	@ 0x62
 80027a2:	d80a      	bhi.n	80027ba <_printf_i+0x32>
 80027a4:	2f00      	cmp	r7, #0
 80027a6:	f000 80d1 	beq.w	800294c <_printf_i+0x1c4>
 80027aa:	2f58      	cmp	r7, #88	@ 0x58
 80027ac:	f000 80b8 	beq.w	8002920 <_printf_i+0x198>
 80027b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80027b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80027b8:	e03a      	b.n	8002830 <_printf_i+0xa8>
 80027ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80027be:	2b15      	cmp	r3, #21
 80027c0:	d8f6      	bhi.n	80027b0 <_printf_i+0x28>
 80027c2:	a101      	add	r1, pc, #4	@ (adr r1, 80027c8 <_printf_i+0x40>)
 80027c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80027c8:	08002821 	.word	0x08002821
 80027cc:	08002835 	.word	0x08002835
 80027d0:	080027b1 	.word	0x080027b1
 80027d4:	080027b1 	.word	0x080027b1
 80027d8:	080027b1 	.word	0x080027b1
 80027dc:	080027b1 	.word	0x080027b1
 80027e0:	08002835 	.word	0x08002835
 80027e4:	080027b1 	.word	0x080027b1
 80027e8:	080027b1 	.word	0x080027b1
 80027ec:	080027b1 	.word	0x080027b1
 80027f0:	080027b1 	.word	0x080027b1
 80027f4:	08002933 	.word	0x08002933
 80027f8:	0800285f 	.word	0x0800285f
 80027fc:	080028ed 	.word	0x080028ed
 8002800:	080027b1 	.word	0x080027b1
 8002804:	080027b1 	.word	0x080027b1
 8002808:	08002955 	.word	0x08002955
 800280c:	080027b1 	.word	0x080027b1
 8002810:	0800285f 	.word	0x0800285f
 8002814:	080027b1 	.word	0x080027b1
 8002818:	080027b1 	.word	0x080027b1
 800281c:	080028f5 	.word	0x080028f5
 8002820:	6833      	ldr	r3, [r6, #0]
 8002822:	1d1a      	adds	r2, r3, #4
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6032      	str	r2, [r6, #0]
 8002828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800282c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002830:	2301      	movs	r3, #1
 8002832:	e09c      	b.n	800296e <_printf_i+0x1e6>
 8002834:	6833      	ldr	r3, [r6, #0]
 8002836:	6820      	ldr	r0, [r4, #0]
 8002838:	1d19      	adds	r1, r3, #4
 800283a:	6031      	str	r1, [r6, #0]
 800283c:	0606      	lsls	r6, r0, #24
 800283e:	d501      	bpl.n	8002844 <_printf_i+0xbc>
 8002840:	681d      	ldr	r5, [r3, #0]
 8002842:	e003      	b.n	800284c <_printf_i+0xc4>
 8002844:	0645      	lsls	r5, r0, #25
 8002846:	d5fb      	bpl.n	8002840 <_printf_i+0xb8>
 8002848:	f9b3 5000 	ldrsh.w	r5, [r3]
 800284c:	2d00      	cmp	r5, #0
 800284e:	da03      	bge.n	8002858 <_printf_i+0xd0>
 8002850:	232d      	movs	r3, #45	@ 0x2d
 8002852:	426d      	negs	r5, r5
 8002854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002858:	4858      	ldr	r0, [pc, #352]	@ (80029bc <_printf_i+0x234>)
 800285a:	230a      	movs	r3, #10
 800285c:	e011      	b.n	8002882 <_printf_i+0xfa>
 800285e:	6821      	ldr	r1, [r4, #0]
 8002860:	6833      	ldr	r3, [r6, #0]
 8002862:	0608      	lsls	r0, r1, #24
 8002864:	f853 5b04 	ldr.w	r5, [r3], #4
 8002868:	d402      	bmi.n	8002870 <_printf_i+0xe8>
 800286a:	0649      	lsls	r1, r1, #25
 800286c:	bf48      	it	mi
 800286e:	b2ad      	uxthmi	r5, r5
 8002870:	2f6f      	cmp	r7, #111	@ 0x6f
 8002872:	4852      	ldr	r0, [pc, #328]	@ (80029bc <_printf_i+0x234>)
 8002874:	6033      	str	r3, [r6, #0]
 8002876:	bf14      	ite	ne
 8002878:	230a      	movne	r3, #10
 800287a:	2308      	moveq	r3, #8
 800287c:	2100      	movs	r1, #0
 800287e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002882:	6866      	ldr	r6, [r4, #4]
 8002884:	60a6      	str	r6, [r4, #8]
 8002886:	2e00      	cmp	r6, #0
 8002888:	db05      	blt.n	8002896 <_printf_i+0x10e>
 800288a:	6821      	ldr	r1, [r4, #0]
 800288c:	432e      	orrs	r6, r5
 800288e:	f021 0104 	bic.w	r1, r1, #4
 8002892:	6021      	str	r1, [r4, #0]
 8002894:	d04b      	beq.n	800292e <_printf_i+0x1a6>
 8002896:	4616      	mov	r6, r2
 8002898:	fbb5 f1f3 	udiv	r1, r5, r3
 800289c:	fb03 5711 	mls	r7, r3, r1, r5
 80028a0:	5dc7      	ldrb	r7, [r0, r7]
 80028a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80028a6:	462f      	mov	r7, r5
 80028a8:	42bb      	cmp	r3, r7
 80028aa:	460d      	mov	r5, r1
 80028ac:	d9f4      	bls.n	8002898 <_printf_i+0x110>
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d10b      	bne.n	80028ca <_printf_i+0x142>
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	07df      	lsls	r7, r3, #31
 80028b6:	d508      	bpl.n	80028ca <_printf_i+0x142>
 80028b8:	6923      	ldr	r3, [r4, #16]
 80028ba:	6861      	ldr	r1, [r4, #4]
 80028bc:	4299      	cmp	r1, r3
 80028be:	bfde      	ittt	le
 80028c0:	2330      	movle	r3, #48	@ 0x30
 80028c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80028c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80028ca:	1b92      	subs	r2, r2, r6
 80028cc:	6122      	str	r2, [r4, #16]
 80028ce:	f8cd a000 	str.w	sl, [sp]
 80028d2:	464b      	mov	r3, r9
 80028d4:	aa03      	add	r2, sp, #12
 80028d6:	4621      	mov	r1, r4
 80028d8:	4640      	mov	r0, r8
 80028da:	f7ff fee7 	bl	80026ac <_printf_common>
 80028de:	3001      	adds	r0, #1
 80028e0:	d14a      	bne.n	8002978 <_printf_i+0x1f0>
 80028e2:	f04f 30ff 	mov.w	r0, #4294967295
 80028e6:	b004      	add	sp, #16
 80028e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	f043 0320 	orr.w	r3, r3, #32
 80028f2:	6023      	str	r3, [r4, #0]
 80028f4:	4832      	ldr	r0, [pc, #200]	@ (80029c0 <_printf_i+0x238>)
 80028f6:	2778      	movs	r7, #120	@ 0x78
 80028f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	6831      	ldr	r1, [r6, #0]
 8002900:	061f      	lsls	r7, r3, #24
 8002902:	f851 5b04 	ldr.w	r5, [r1], #4
 8002906:	d402      	bmi.n	800290e <_printf_i+0x186>
 8002908:	065f      	lsls	r7, r3, #25
 800290a:	bf48      	it	mi
 800290c:	b2ad      	uxthmi	r5, r5
 800290e:	6031      	str	r1, [r6, #0]
 8002910:	07d9      	lsls	r1, r3, #31
 8002912:	bf44      	itt	mi
 8002914:	f043 0320 	orrmi.w	r3, r3, #32
 8002918:	6023      	strmi	r3, [r4, #0]
 800291a:	b11d      	cbz	r5, 8002924 <_printf_i+0x19c>
 800291c:	2310      	movs	r3, #16
 800291e:	e7ad      	b.n	800287c <_printf_i+0xf4>
 8002920:	4826      	ldr	r0, [pc, #152]	@ (80029bc <_printf_i+0x234>)
 8002922:	e7e9      	b.n	80028f8 <_printf_i+0x170>
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	f023 0320 	bic.w	r3, r3, #32
 800292a:	6023      	str	r3, [r4, #0]
 800292c:	e7f6      	b.n	800291c <_printf_i+0x194>
 800292e:	4616      	mov	r6, r2
 8002930:	e7bd      	b.n	80028ae <_printf_i+0x126>
 8002932:	6833      	ldr	r3, [r6, #0]
 8002934:	6825      	ldr	r5, [r4, #0]
 8002936:	6961      	ldr	r1, [r4, #20]
 8002938:	1d18      	adds	r0, r3, #4
 800293a:	6030      	str	r0, [r6, #0]
 800293c:	062e      	lsls	r6, r5, #24
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	d501      	bpl.n	8002946 <_printf_i+0x1be>
 8002942:	6019      	str	r1, [r3, #0]
 8002944:	e002      	b.n	800294c <_printf_i+0x1c4>
 8002946:	0668      	lsls	r0, r5, #25
 8002948:	d5fb      	bpl.n	8002942 <_printf_i+0x1ba>
 800294a:	8019      	strh	r1, [r3, #0]
 800294c:	2300      	movs	r3, #0
 800294e:	6123      	str	r3, [r4, #16]
 8002950:	4616      	mov	r6, r2
 8002952:	e7bc      	b.n	80028ce <_printf_i+0x146>
 8002954:	6833      	ldr	r3, [r6, #0]
 8002956:	1d1a      	adds	r2, r3, #4
 8002958:	6032      	str	r2, [r6, #0]
 800295a:	681e      	ldr	r6, [r3, #0]
 800295c:	6862      	ldr	r2, [r4, #4]
 800295e:	2100      	movs	r1, #0
 8002960:	4630      	mov	r0, r6
 8002962:	f7fd fc35 	bl	80001d0 <memchr>
 8002966:	b108      	cbz	r0, 800296c <_printf_i+0x1e4>
 8002968:	1b80      	subs	r0, r0, r6
 800296a:	6060      	str	r0, [r4, #4]
 800296c:	6863      	ldr	r3, [r4, #4]
 800296e:	6123      	str	r3, [r4, #16]
 8002970:	2300      	movs	r3, #0
 8002972:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002976:	e7aa      	b.n	80028ce <_printf_i+0x146>
 8002978:	6923      	ldr	r3, [r4, #16]
 800297a:	4632      	mov	r2, r6
 800297c:	4649      	mov	r1, r9
 800297e:	4640      	mov	r0, r8
 8002980:	47d0      	blx	sl
 8002982:	3001      	adds	r0, #1
 8002984:	d0ad      	beq.n	80028e2 <_printf_i+0x15a>
 8002986:	6823      	ldr	r3, [r4, #0]
 8002988:	079b      	lsls	r3, r3, #30
 800298a:	d413      	bmi.n	80029b4 <_printf_i+0x22c>
 800298c:	68e0      	ldr	r0, [r4, #12]
 800298e:	9b03      	ldr	r3, [sp, #12]
 8002990:	4298      	cmp	r0, r3
 8002992:	bfb8      	it	lt
 8002994:	4618      	movlt	r0, r3
 8002996:	e7a6      	b.n	80028e6 <_printf_i+0x15e>
 8002998:	2301      	movs	r3, #1
 800299a:	4632      	mov	r2, r6
 800299c:	4649      	mov	r1, r9
 800299e:	4640      	mov	r0, r8
 80029a0:	47d0      	blx	sl
 80029a2:	3001      	adds	r0, #1
 80029a4:	d09d      	beq.n	80028e2 <_printf_i+0x15a>
 80029a6:	3501      	adds	r5, #1
 80029a8:	68e3      	ldr	r3, [r4, #12]
 80029aa:	9903      	ldr	r1, [sp, #12]
 80029ac:	1a5b      	subs	r3, r3, r1
 80029ae:	42ab      	cmp	r3, r5
 80029b0:	dcf2      	bgt.n	8002998 <_printf_i+0x210>
 80029b2:	e7eb      	b.n	800298c <_printf_i+0x204>
 80029b4:	2500      	movs	r5, #0
 80029b6:	f104 0619 	add.w	r6, r4, #25
 80029ba:	e7f5      	b.n	80029a8 <_printf_i+0x220>
 80029bc:	08002b19 	.word	0x08002b19
 80029c0:	08002b2a 	.word	0x08002b2a

080029c4 <memmove>:
 80029c4:	4288      	cmp	r0, r1
 80029c6:	b510      	push	{r4, lr}
 80029c8:	eb01 0402 	add.w	r4, r1, r2
 80029cc:	d902      	bls.n	80029d4 <memmove+0x10>
 80029ce:	4284      	cmp	r4, r0
 80029d0:	4623      	mov	r3, r4
 80029d2:	d807      	bhi.n	80029e4 <memmove+0x20>
 80029d4:	1e43      	subs	r3, r0, #1
 80029d6:	42a1      	cmp	r1, r4
 80029d8:	d008      	beq.n	80029ec <memmove+0x28>
 80029da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029e2:	e7f8      	b.n	80029d6 <memmove+0x12>
 80029e4:	4402      	add	r2, r0
 80029e6:	4601      	mov	r1, r0
 80029e8:	428a      	cmp	r2, r1
 80029ea:	d100      	bne.n	80029ee <memmove+0x2a>
 80029ec:	bd10      	pop	{r4, pc}
 80029ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80029f6:	e7f7      	b.n	80029e8 <memmove+0x24>

080029f8 <_sbrk_r>:
 80029f8:	b538      	push	{r3, r4, r5, lr}
 80029fa:	4d06      	ldr	r5, [pc, #24]	@ (8002a14 <_sbrk_r+0x1c>)
 80029fc:	2300      	movs	r3, #0
 80029fe:	4604      	mov	r4, r0
 8002a00:	4608      	mov	r0, r1
 8002a02:	602b      	str	r3, [r5, #0]
 8002a04:	f7ff fb54 	bl	80020b0 <_sbrk>
 8002a08:	1c43      	adds	r3, r0, #1
 8002a0a:	d102      	bne.n	8002a12 <_sbrk_r+0x1a>
 8002a0c:	682b      	ldr	r3, [r5, #0]
 8002a0e:	b103      	cbz	r3, 8002a12 <_sbrk_r+0x1a>
 8002a10:	6023      	str	r3, [r4, #0]
 8002a12:	bd38      	pop	{r3, r4, r5, pc}
 8002a14:	200001fc 	.word	0x200001fc

08002a18 <memcpy>:
 8002a18:	440a      	add	r2, r1
 8002a1a:	4291      	cmp	r1, r2
 8002a1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a20:	d100      	bne.n	8002a24 <memcpy+0xc>
 8002a22:	4770      	bx	lr
 8002a24:	b510      	push	{r4, lr}
 8002a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a2e:	4291      	cmp	r1, r2
 8002a30:	d1f9      	bne.n	8002a26 <memcpy+0xe>
 8002a32:	bd10      	pop	{r4, pc}

08002a34 <_realloc_r>:
 8002a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a38:	4607      	mov	r7, r0
 8002a3a:	4614      	mov	r4, r2
 8002a3c:	460d      	mov	r5, r1
 8002a3e:	b921      	cbnz	r1, 8002a4a <_realloc_r+0x16>
 8002a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a44:	4611      	mov	r1, r2
 8002a46:	f7ff bc4d 	b.w	80022e4 <_malloc_r>
 8002a4a:	b92a      	cbnz	r2, 8002a58 <_realloc_r+0x24>
 8002a4c:	f7ff fbde 	bl	800220c <_free_r>
 8002a50:	4625      	mov	r5, r4
 8002a52:	4628      	mov	r0, r5
 8002a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a58:	f000 f81a 	bl	8002a90 <_malloc_usable_size_r>
 8002a5c:	4284      	cmp	r4, r0
 8002a5e:	4606      	mov	r6, r0
 8002a60:	d802      	bhi.n	8002a68 <_realloc_r+0x34>
 8002a62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002a66:	d8f4      	bhi.n	8002a52 <_realloc_r+0x1e>
 8002a68:	4621      	mov	r1, r4
 8002a6a:	4638      	mov	r0, r7
 8002a6c:	f7ff fc3a 	bl	80022e4 <_malloc_r>
 8002a70:	4680      	mov	r8, r0
 8002a72:	b908      	cbnz	r0, 8002a78 <_realloc_r+0x44>
 8002a74:	4645      	mov	r5, r8
 8002a76:	e7ec      	b.n	8002a52 <_realloc_r+0x1e>
 8002a78:	42b4      	cmp	r4, r6
 8002a7a:	4622      	mov	r2, r4
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	bf28      	it	cs
 8002a80:	4632      	movcs	r2, r6
 8002a82:	f7ff ffc9 	bl	8002a18 <memcpy>
 8002a86:	4629      	mov	r1, r5
 8002a88:	4638      	mov	r0, r7
 8002a8a:	f7ff fbbf 	bl	800220c <_free_r>
 8002a8e:	e7f1      	b.n	8002a74 <_realloc_r+0x40>

08002a90 <_malloc_usable_size_r>:
 8002a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a94:	1f18      	subs	r0, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bfbc      	itt	lt
 8002a9a:	580b      	ldrlt	r3, [r1, r0]
 8002a9c:	18c0      	addlt	r0, r0, r3
 8002a9e:	4770      	bx	lr

08002aa0 <_init>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	bf00      	nop
 8002aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa6:	bc08      	pop	{r3}
 8002aa8:	469e      	mov	lr, r3
 8002aaa:	4770      	bx	lr

08002aac <_fini>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	bf00      	nop
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr
