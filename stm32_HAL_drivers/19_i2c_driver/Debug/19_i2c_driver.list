
19_i2c_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000124c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013d8  080013d8  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080013d8  080013d8  00003018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080013d8  080013d8  00003018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080013d8  080013d8  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013d8  080013d8  000023d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080013dc  080013dc  000023dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080013e0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00003018  2**0
                  CONTENTS
 10 .bss          000000c0  20000018  20000018  00003018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  00003018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY
 13 .debug_info   000097a7  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012bc  00000000  00000000  0000c7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  0000dab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008c7  00000000  00000000  0000e5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001198  00000000  00000000  0000eeaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1ef  00000000  00000000  00010047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000feeea  00000000  00000000  0001d236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011c120  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003068  00000000  00000000  0011c164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0011f1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000018 	.word	0x20000018
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080013c0 	.word	0x080013c0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	080013c0 	.word	0x080013c0

080001cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d6:	2003      	movs	r0, #3
 80001d8:	f000 f926 	bl	8000428 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001dc:	200f      	movs	r0, #15
 80001de:	f000 f815 	bl	800020c <HAL_InitTick>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e8:	2301      	movs	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e001      	b.n	80001f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ee:	f000 f805 	bl	80001fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
	...

0800020c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000214:	2300      	movs	r3, #0
 8000216:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000218:	4b17      	ldr	r3, [pc, #92]	@ (8000278 <HAL_InitTick+0x6c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d023      	beq.n	8000268 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000220:	4b16      	ldr	r3, [pc, #88]	@ (800027c <HAL_InitTick+0x70>)
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b14      	ldr	r3, [pc, #80]	@ (8000278 <HAL_InitTick+0x6c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	4619      	mov	r1, r3
 800022a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800022e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000232:	fbb2 f3f3 	udiv	r3, r2, r3
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f91d 	bl	8000476 <HAL_SYSTICK_Config>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d10f      	bne.n	8000262 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b0f      	cmp	r3, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	2200      	movs	r2, #0
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f000 f8f5 	bl	800043e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000254:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <HAL_InitTick+0x74>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	6013      	str	r3, [r2, #0]
 800025a:	e007      	b.n	800026c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800025c:	2301      	movs	r3, #1
 800025e:	73fb      	strb	r3, [r7, #15]
 8000260:	e004      	b.n	800026c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	e001      	b.n	800026c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000268:	2301      	movs	r3, #1
 800026a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000004 	.word	0x20000004
 800027c:	20000014 	.word	0x20000014
 8000280:	20000000 	.word	0x20000000

08000284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <HAL_IncTick+0x20>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	461a      	mov	r2, r3
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <HAL_IncTick+0x24>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4413      	add	r3, r2
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <HAL_IncTick+0x24>)
 8000296:	6013      	str	r3, [r2, #0]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000004 	.word	0x20000004
 80002a8:	20000034 	.word	0x20000034

080002ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  return uwTick;
 80002b0:	4b03      	ldr	r3, [pc, #12]	@ (80002c0 <HAL_GetTick+0x14>)
 80002b2:	681b      	ldr	r3, [r3, #0]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	20000034 	.word	0x20000034

080002c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f003 0307 	and.w	r3, r3, #7
 80002d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <__NVIC_SetPriorityGrouping+0x44>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002da:	68ba      	ldr	r2, [r7, #8]
 80002dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80002e0:	4013      	ands	r3, r2
 80002e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80002f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002f6:	4a04      	ldr	r2, [pc, #16]	@ (8000308 <__NVIC_SetPriorityGrouping+0x44>)
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	60d3      	str	r3, [r2, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000310:	4b04      	ldr	r3, [pc, #16]	@ (8000324 <__NVIC_GetPriorityGrouping+0x18>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	0a1b      	lsrs	r3, r3, #8
 8000316:	f003 0307 	and.w	r3, r3, #7
}
 800031a:	4618      	mov	r0, r3
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	6039      	str	r1, [r7, #0]
 8000332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000338:	2b00      	cmp	r3, #0
 800033a:	db0a      	blt.n	8000352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	b2da      	uxtb	r2, r3
 8000340:	490c      	ldr	r1, [pc, #48]	@ (8000374 <__NVIC_SetPriority+0x4c>)
 8000342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000346:	0112      	lsls	r2, r2, #4
 8000348:	b2d2      	uxtb	r2, r2
 800034a:	440b      	add	r3, r1
 800034c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000350:	e00a      	b.n	8000368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	b2da      	uxtb	r2, r3
 8000356:	4908      	ldr	r1, [pc, #32]	@ (8000378 <__NVIC_SetPriority+0x50>)
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	f003 030f 	and.w	r3, r3, #15
 800035e:	3b04      	subs	r3, #4
 8000360:	0112      	lsls	r2, r2, #4
 8000362:	b2d2      	uxtb	r2, r2
 8000364:	440b      	add	r3, r1
 8000366:	761a      	strb	r2, [r3, #24]
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	e000e100 	.word	0xe000e100
 8000378:	e000ed00 	.word	0xe000ed00

0800037c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800037c:	b480      	push	{r7}
 800037e:	b089      	sub	sp, #36	@ 0x24
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	f003 0307 	and.w	r3, r3, #7
 800038e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000390:	69fb      	ldr	r3, [r7, #28]
 8000392:	f1c3 0307 	rsb	r3, r3, #7
 8000396:	2b04      	cmp	r3, #4
 8000398:	bf28      	it	cs
 800039a:	2304      	movcs	r3, #4
 800039c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800039e:	69fb      	ldr	r3, [r7, #28]
 80003a0:	3304      	adds	r3, #4
 80003a2:	2b06      	cmp	r3, #6
 80003a4:	d902      	bls.n	80003ac <NVIC_EncodePriority+0x30>
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	3b03      	subs	r3, #3
 80003aa:	e000      	b.n	80003ae <NVIC_EncodePriority+0x32>
 80003ac:	2300      	movs	r3, #0
 80003ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b0:	f04f 32ff 	mov.w	r2, #4294967295
 80003b4:	69bb      	ldr	r3, [r7, #24]
 80003b6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ba:	43da      	mvns	r2, r3
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	401a      	ands	r2, r3
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003c4:	f04f 31ff 	mov.w	r1, #4294967295
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	fa01 f303 	lsl.w	r3, r1, r3
 80003ce:	43d9      	mvns	r1, r3
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003d4:	4313      	orrs	r3, r2
         );
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3724      	adds	r7, #36	@ 0x24
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
	...

080003e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	3b01      	subs	r3, #1
 80003f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80003f4:	d301      	bcc.n	80003fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003f6:	2301      	movs	r3, #1
 80003f8:	e00f      	b.n	800041a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000424 <SysTick_Config+0x40>)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3b01      	subs	r3, #1
 8000400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000402:	210f      	movs	r1, #15
 8000404:	f04f 30ff 	mov.w	r0, #4294967295
 8000408:	f7ff ff8e 	bl	8000328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800040c:	4b05      	ldr	r3, [pc, #20]	@ (8000424 <SysTick_Config+0x40>)
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000412:	4b04      	ldr	r3, [pc, #16]	@ (8000424 <SysTick_Config+0x40>)
 8000414:	2207      	movs	r2, #7
 8000416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000418:	2300      	movs	r3, #0
}
 800041a:	4618      	mov	r0, r3
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	e000e010 	.word	0xe000e010

08000428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f7ff ff47 	bl	80002c4 <__NVIC_SetPriorityGrouping>
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b086      	sub	sp, #24
 8000442:	af00      	add	r7, sp, #0
 8000444:	4603      	mov	r3, r0
 8000446:	60b9      	str	r1, [r7, #8]
 8000448:	607a      	str	r2, [r7, #4]
 800044a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000450:	f7ff ff5c 	bl	800030c <__NVIC_GetPriorityGrouping>
 8000454:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	68b9      	ldr	r1, [r7, #8]
 800045a:	6978      	ldr	r0, [r7, #20]
 800045c:	f7ff ff8e 	bl	800037c <NVIC_EncodePriority>
 8000460:	4602      	mov	r2, r0
 8000462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000466:	4611      	mov	r1, r2
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff ff5d 	bl	8000328 <__NVIC_SetPriority>
}
 800046e:	bf00      	nop
 8000470:	3718      	adds	r7, #24
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}

08000476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	b082      	sub	sp, #8
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f7ff ffb0 	bl	80003e4 <SysTick_Config>
 8000484:	4603      	mov	r3, r0
}
 8000486:	4618      	mov	r0, r3
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
	...

08000490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000490:	b480      	push	{r7}
 8000492:	b087      	sub	sp, #28
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800049e:	e17f      	b.n	80007a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	2101      	movs	r1, #1
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	4013      	ands	r3, r2
 80004ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	f000 8171 	beq.w	800079a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	f003 0303 	and.w	r3, r3, #3
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d005      	beq.n	80004d0 <HAL_GPIO_Init+0x40>
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	f003 0303 	and.w	r3, r3, #3
 80004cc:	2b02      	cmp	r3, #2
 80004ce:	d130      	bne.n	8000532 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	2203      	movs	r2, #3
 80004dc:	fa02 f303 	lsl.w	r3, r2, r3
 80004e0:	43db      	mvns	r3, r3
 80004e2:	693a      	ldr	r2, [r7, #16]
 80004e4:	4013      	ands	r3, r2
 80004e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	68da      	ldr	r2, [r3, #12]
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	fa02 f303 	lsl.w	r3, r2, r3
 80004f4:	693a      	ldr	r2, [r7, #16]
 80004f6:	4313      	orrs	r3, r2
 80004f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	693a      	ldr	r2, [r7, #16]
 80004fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000506:	2201      	movs	r2, #1
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	fa02 f303 	lsl.w	r3, r2, r3
 800050e:	43db      	mvns	r3, r3
 8000510:	693a      	ldr	r2, [r7, #16]
 8000512:	4013      	ands	r3, r2
 8000514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	091b      	lsrs	r3, r3, #4
 800051c:	f003 0201 	and.w	r2, r3, #1
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	fa02 f303 	lsl.w	r3, r2, r3
 8000526:	693a      	ldr	r2, [r7, #16]
 8000528:	4313      	orrs	r3, r2
 800052a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	693a      	ldr	r2, [r7, #16]
 8000530:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	f003 0303 	and.w	r3, r3, #3
 800053a:	2b03      	cmp	r3, #3
 800053c:	d118      	bne.n	8000570 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000542:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000544:	2201      	movs	r2, #1
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	43db      	mvns	r3, r3
 800054e:	693a      	ldr	r2, [r7, #16]
 8000550:	4013      	ands	r3, r2
 8000552:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	08db      	lsrs	r3, r3, #3
 800055a:	f003 0201 	and.w	r2, r3, #1
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	fa02 f303 	lsl.w	r3, r2, r3
 8000564:	693a      	ldr	r2, [r7, #16]
 8000566:	4313      	orrs	r3, r2
 8000568:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	693a      	ldr	r2, [r7, #16]
 800056e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	f003 0303 	and.w	r3, r3, #3
 8000578:	2b03      	cmp	r3, #3
 800057a:	d017      	beq.n	80005ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	2203      	movs	r2, #3
 8000588:	fa02 f303 	lsl.w	r3, r2, r3
 800058c:	43db      	mvns	r3, r3
 800058e:	693a      	ldr	r2, [r7, #16]
 8000590:	4013      	ands	r3, r2
 8000592:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	689a      	ldr	r2, [r3, #8]
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	693a      	ldr	r2, [r7, #16]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	693a      	ldr	r2, [r7, #16]
 80005aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	f003 0303 	and.w	r3, r3, #3
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d123      	bne.n	8000600 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	08da      	lsrs	r2, r3, #3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3208      	adds	r2, #8
 80005c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	f003 0307 	and.w	r3, r3, #7
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	220f      	movs	r2, #15
 80005d0:	fa02 f303 	lsl.w	r3, r2, r3
 80005d4:	43db      	mvns	r3, r3
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	4013      	ands	r3, r2
 80005da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	691a      	ldr	r2, [r3, #16]
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	f003 0307 	and.w	r3, r3, #7
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ec:	693a      	ldr	r2, [r7, #16]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	08da      	lsrs	r2, r3, #3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	3208      	adds	r2, #8
 80005fa:	6939      	ldr	r1, [r7, #16]
 80005fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	2203      	movs	r2, #3
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	4013      	ands	r3, r2
 8000616:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	f003 0203 	and.w	r2, r3, #3
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	fa02 f303 	lsl.w	r3, r2, r3
 8000628:	693a      	ldr	r2, [r7, #16]
 800062a:	4313      	orrs	r3, r2
 800062c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800063c:	2b00      	cmp	r3, #0
 800063e:	f000 80ac 	beq.w	800079a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000642:	4b5f      	ldr	r3, [pc, #380]	@ (80007c0 <HAL_GPIO_Init+0x330>)
 8000644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000646:	4a5e      	ldr	r2, [pc, #376]	@ (80007c0 <HAL_GPIO_Init+0x330>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6613      	str	r3, [r2, #96]	@ 0x60
 800064e:	4b5c      	ldr	r3, [pc, #368]	@ (80007c0 <HAL_GPIO_Init+0x330>)
 8000650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800065a:	4a5a      	ldr	r2, [pc, #360]	@ (80007c4 <HAL_GPIO_Init+0x334>)
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	089b      	lsrs	r3, r3, #2
 8000660:	3302      	adds	r3, #2
 8000662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000666:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	f003 0303 	and.w	r3, r3, #3
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	220f      	movs	r2, #15
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	43db      	mvns	r3, r3
 8000678:	693a      	ldr	r2, [r7, #16]
 800067a:	4013      	ands	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000684:	d025      	beq.n	80006d2 <HAL_GPIO_Init+0x242>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a4f      	ldr	r2, [pc, #316]	@ (80007c8 <HAL_GPIO_Init+0x338>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d01f      	beq.n	80006ce <HAL_GPIO_Init+0x23e>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a4e      	ldr	r2, [pc, #312]	@ (80007cc <HAL_GPIO_Init+0x33c>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d019      	beq.n	80006ca <HAL_GPIO_Init+0x23a>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a4d      	ldr	r2, [pc, #308]	@ (80007d0 <HAL_GPIO_Init+0x340>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d013      	beq.n	80006c6 <HAL_GPIO_Init+0x236>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a4c      	ldr	r2, [pc, #304]	@ (80007d4 <HAL_GPIO_Init+0x344>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d00d      	beq.n	80006c2 <HAL_GPIO_Init+0x232>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a4b      	ldr	r2, [pc, #300]	@ (80007d8 <HAL_GPIO_Init+0x348>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d007      	beq.n	80006be <HAL_GPIO_Init+0x22e>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a4a      	ldr	r2, [pc, #296]	@ (80007dc <HAL_GPIO_Init+0x34c>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d101      	bne.n	80006ba <HAL_GPIO_Init+0x22a>
 80006b6:	2306      	movs	r3, #6
 80006b8:	e00c      	b.n	80006d4 <HAL_GPIO_Init+0x244>
 80006ba:	2307      	movs	r3, #7
 80006bc:	e00a      	b.n	80006d4 <HAL_GPIO_Init+0x244>
 80006be:	2305      	movs	r3, #5
 80006c0:	e008      	b.n	80006d4 <HAL_GPIO_Init+0x244>
 80006c2:	2304      	movs	r3, #4
 80006c4:	e006      	b.n	80006d4 <HAL_GPIO_Init+0x244>
 80006c6:	2303      	movs	r3, #3
 80006c8:	e004      	b.n	80006d4 <HAL_GPIO_Init+0x244>
 80006ca:	2302      	movs	r3, #2
 80006cc:	e002      	b.n	80006d4 <HAL_GPIO_Init+0x244>
 80006ce:	2301      	movs	r3, #1
 80006d0:	e000      	b.n	80006d4 <HAL_GPIO_Init+0x244>
 80006d2:	2300      	movs	r3, #0
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	f002 0203 	and.w	r2, r2, #3
 80006da:	0092      	lsls	r2, r2, #2
 80006dc:	4093      	lsls	r3, r2
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80006e4:	4937      	ldr	r1, [pc, #220]	@ (80007c4 <HAL_GPIO_Init+0x334>)
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	089b      	lsrs	r3, r3, #2
 80006ea:	3302      	adds	r3, #2
 80006ec:	693a      	ldr	r2, [r7, #16]
 80006ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80006f2:	4b3b      	ldr	r3, [pc, #236]	@ (80007e0 <HAL_GPIO_Init+0x350>)
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	43db      	mvns	r3, r3
 80006fc:	693a      	ldr	r2, [r7, #16]
 80006fe:	4013      	ands	r3, r2
 8000700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4313      	orrs	r3, r2
 8000714:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000716:	4a32      	ldr	r2, [pc, #200]	@ (80007e0 <HAL_GPIO_Init+0x350>)
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800071c:	4b30      	ldr	r3, [pc, #192]	@ (80007e0 <HAL_GPIO_Init+0x350>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	43db      	mvns	r3, r3
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	4013      	ands	r3, r2
 800072a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000734:	2b00      	cmp	r3, #0
 8000736:	d003      	beq.n	8000740 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000738:	693a      	ldr	r2, [r7, #16]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000740:	4a27      	ldr	r2, [pc, #156]	@ (80007e0 <HAL_GPIO_Init+0x350>)
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <HAL_GPIO_Init+0x350>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	43db      	mvns	r3, r3
 8000750:	693a      	ldr	r2, [r7, #16]
 8000752:	4013      	ands	r3, r2
 8000754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800075e:	2b00      	cmp	r3, #0
 8000760:	d003      	beq.n	800076a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000762:	693a      	ldr	r2, [r7, #16]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	4313      	orrs	r3, r2
 8000768:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800076a:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <HAL_GPIO_Init+0x350>)
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <HAL_GPIO_Init+0x350>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	43db      	mvns	r3, r3
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	4013      	ands	r3, r2
 800077e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000788:	2b00      	cmp	r3, #0
 800078a:	d003      	beq.n	8000794 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	4313      	orrs	r3, r2
 8000792:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000794:	4a12      	ldr	r2, [pc, #72]	@ (80007e0 <HAL_GPIO_Init+0x350>)
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	3301      	adds	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	fa22 f303 	lsr.w	r3, r2, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	f47f ae78 	bne.w	80004a0 <HAL_GPIO_Init+0x10>
  }
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	371c      	adds	r7, #28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010000 	.word	0x40010000
 80007c8:	48000400 	.word	0x48000400
 80007cc:	48000800 	.word	0x48000800
 80007d0:	48000c00 	.word	0x48000c00
 80007d4:	48001000 	.word	0x48001000
 80007d8:	48001400 	.word	0x48001400
 80007dc:	48001800 	.word	0x48001800
 80007e0:	40010400 	.word	0x40010400

080007e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d101      	bne.n	80007f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e08d      	b.n	8000912 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d106      	bne.n	8000810 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f885 	bl	800091a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2224      	movs	r2, #36	@ 0x24
 8000814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f022 0201 	bic.w	r2, r2, #1
 8000826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685a      	ldr	r2, [r3, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000834:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	689a      	ldr	r2, [r3, #8]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000844:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d107      	bne.n	800085e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	689a      	ldr	r2, [r3, #8]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	e006      	b.n	800086c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689a      	ldr	r2, [r3, #8]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800086a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d108      	bne.n	8000886 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	e007      	b.n	8000896 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000894:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	6812      	ldr	r2, [r2, #0]
 80008a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	68da      	ldr	r2, [r3, #12]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80008b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	691a      	ldr	r2, [r3, #16]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	430a      	orrs	r2, r1
 80008d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	69d9      	ldr	r1, [r3, #28]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6a1a      	ldr	r2, [r3, #32]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	430a      	orrs	r2, r1
 80008e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f042 0201 	orr.w	r2, r2, #1
 80008f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2220      	movs	r2, #32
 80008fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af02      	add	r7, sp, #8
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	461a      	mov	r2, r3
 800093c:	460b      	mov	r3, r1
 800093e:	817b      	strh	r3, [r7, #10]
 8000940:	4613      	mov	r3, r2
 8000942:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b20      	cmp	r3, #32
 800094e:	f040 80fd 	bne.w	8000b4c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000958:	2b01      	cmp	r3, #1
 800095a:	d101      	bne.n	8000960 <HAL_I2C_Master_Transmit+0x30>
 800095c:	2302      	movs	r3, #2
 800095e:	e0f6      	b.n	8000b4e <HAL_I2C_Master_Transmit+0x21e>
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2201      	movs	r2, #1
 8000964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000968:	f7ff fca0 	bl	80002ac <HAL_GetTick>
 800096c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2319      	movs	r3, #25
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f000 f914 	bl	8000ba8 <I2C_WaitOnFlagUntilTimeout>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e0e1      	b.n	8000b4e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2221      	movs	r2, #33	@ 0x21
 800098e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	2210      	movs	r2, #16
 8000996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	2200      	movs	r2, #0
 800099e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	893a      	ldrh	r2, [r7, #8]
 80009aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2200      	movs	r2, #0
 80009b0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	2bff      	cmp	r3, #255	@ 0xff
 80009ba:	d906      	bls.n	80009ca <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	22ff      	movs	r2, #255	@ 0xff
 80009c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80009c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	e007      	b.n	80009da <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80009d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009d8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d024      	beq.n	8000a2c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	3b01      	subs	r3, #1
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	3301      	adds	r3, #1
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	8979      	ldrh	r1, [r7, #10]
 8000a1e:	4b4e      	ldr	r3, [pc, #312]	@ (8000b58 <HAL_I2C_Master_Transmit+0x228>)
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f000 fa79 	bl	8000f1c <I2C_TransferConfig>
 8000a2a:	e066      	b.n	8000afa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	8979      	ldrh	r1, [r7, #10]
 8000a34:	4b48      	ldr	r3, [pc, #288]	@ (8000b58 <HAL_I2C_Master_Transmit+0x228>)
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f000 fa6e 	bl	8000f1c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000a40:	e05b      	b.n	8000afa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	6a39      	ldr	r1, [r7, #32]
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	f000 f8fd 	bl	8000c46 <I2C_WaitOnTXISFlagUntilTimeout>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e07b      	b.n	8000b4e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	3b01      	subs	r3, #1
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d034      	beq.n	8000afa <HAL_I2C_Master_Transmit+0x1ca>
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d130      	bne.n	8000afa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2180      	movs	r1, #128	@ 0x80
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f000 f880 	bl	8000ba8 <I2C_WaitOnFlagUntilTimeout>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e04d      	b.n	8000b4e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	2bff      	cmp	r3, #255	@ 0xff
 8000aba:	d90e      	bls.n	8000ada <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	22ff      	movs	r2, #255	@ 0xff
 8000ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	8979      	ldrh	r1, [r7, #10]
 8000aca:	2300      	movs	r3, #0
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f000 fa22 	bl	8000f1c <I2C_TransferConfig>
 8000ad8:	e00f      	b.n	8000afa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	8979      	ldrh	r1, [r7, #10]
 8000aec:	2300      	movs	r3, #0
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f000 fa11 	bl	8000f1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d19e      	bne.n	8000a42 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	6a39      	ldr	r1, [r7, #32]
 8000b08:	68f8      	ldr	r0, [r7, #12]
 8000b0a:	f000 f8e3 	bl	8000cd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e01a      	b.n	8000b4e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2220      	movs	r2, #32
 8000b1e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6859      	ldr	r1, [r3, #4]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <HAL_I2C_Master_Transmit+0x22c>)
 8000b2c:	400b      	ands	r3, r1
 8000b2e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2220      	movs	r2, #32
 8000b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e000      	b.n	8000b4e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8000b4c:	2302      	movs	r3, #2
  }
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	80002000 	.word	0x80002000
 8000b5c:	fe00e800 	.word	0xfe00e800

08000b60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d103      	bne.n	8000b7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d007      	beq.n	8000b9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	699a      	ldr	r2, [r3, #24]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f042 0201 	orr.w	r2, r2, #1
 8000b9a:	619a      	str	r2, [r3, #24]
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000bb8:	e031      	b.n	8000c1e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc0:	d02d      	beq.n	8000c1e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000bc2:	f7ff fb73 	bl	80002ac <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	683a      	ldr	r2, [r7, #0]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d302      	bcc.n	8000bd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d122      	bne.n	8000c1e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	699a      	ldr	r2, [r3, #24]
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	4013      	ands	r3, r2
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	bf0c      	ite	eq
 8000be8:	2301      	moveq	r3, #1
 8000bea:	2300      	movne	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	461a      	mov	r2, r3
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d113      	bne.n	8000c1e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	f043 0220 	orr.w	r2, r3, #32
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2220      	movs	r2, #32
 8000c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00f      	b.n	8000c3e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	699a      	ldr	r2, [r3, #24]
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	4013      	ands	r3, r2
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	bf0c      	ite	eq
 8000c2e:	2301      	moveq	r3, #1
 8000c30:	2300      	movne	r3, #0
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	461a      	mov	r2, r3
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d0be      	beq.n	8000bba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000c52:	e033      	b.n	8000cbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	68b9      	ldr	r1, [r7, #8]
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f000 f87f 	bl	8000d5c <I2C_IsErrorOccurred>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e031      	b.n	8000ccc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c6e:	d025      	beq.n	8000cbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c70:	f7ff fb1c 	bl	80002ac <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d302      	bcc.n	8000c86 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d11a      	bne.n	8000cbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d013      	beq.n	8000cbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c98:	f043 0220 	orr.w	r2, r3, #32
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2220      	movs	r2, #32
 8000ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e007      	b.n	8000ccc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d1c4      	bne.n	8000c54 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000ce0:	e02f      	b.n	8000d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f000 f838 	bl	8000d5c <I2C_IsErrorOccurred>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e02d      	b.n	8000d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000cf6:	f7ff fad9 	bl	80002ac <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	68ba      	ldr	r2, [r7, #8]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d302      	bcc.n	8000d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d11a      	bne.n	8000d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	f003 0320 	and.w	r3, r3, #32
 8000d16:	2b20      	cmp	r3, #32
 8000d18:	d013      	beq.n	8000d42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	f043 0220 	orr.w	r2, r3, #32
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2220      	movs	r2, #32
 8000d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e007      	b.n	8000d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0320 	and.w	r3, r3, #32
 8000d4c:	2b20      	cmp	r3, #32
 8000d4e:	d1c8      	bne.n	8000ce2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	@ 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	f003 0310 	and.w	r3, r3, #16
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d068      	beq.n	8000e5a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2210      	movs	r2, #16
 8000d8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000d90:	e049      	b.n	8000e26 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d98:	d045      	beq.n	8000e26 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000d9a:	f7ff fa87 	bl	80002ac <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	68ba      	ldr	r2, [r7, #8]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d302      	bcc.n	8000db0 <I2C_IsErrorOccurred+0x54>
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d13a      	bne.n	8000e26 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000dc2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000dd2:	d121      	bne.n	8000e18 <I2C_IsErrorOccurred+0xbc>
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000dda:	d01d      	beq.n	8000e18 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8000ddc:	7cfb      	ldrb	r3, [r7, #19]
 8000dde:	2b20      	cmp	r3, #32
 8000de0:	d01a      	beq.n	8000e18 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000df0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8000df2:	f7ff fa5b 	bl	80002ac <HAL_GetTick>
 8000df6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000df8:	e00e      	b.n	8000e18 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8000dfa:	f7ff fa57 	bl	80002ac <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b19      	cmp	r3, #25
 8000e06:	d907      	bls.n	8000e18 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8000e08:	6a3b      	ldr	r3, [r7, #32]
 8000e0a:	f043 0320 	orr.w	r3, r3, #32
 8000e0e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8000e16:	e006      	b.n	8000e26 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 0320 	and.w	r3, r3, #32
 8000e22:	2b20      	cmp	r3, #32
 8000e24:	d1e9      	bne.n	8000dfa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0320 	and.w	r3, r3, #32
 8000e30:	2b20      	cmp	r3, #32
 8000e32:	d003      	beq.n	8000e3c <I2C_IsErrorOccurred+0xe0>
 8000e34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d0aa      	beq.n	8000d92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8000e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d103      	bne.n	8000e4c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2220      	movs	r2, #32
 8000e4a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8000e4c:	6a3b      	ldr	r3, [r7, #32]
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d00b      	beq.n	8000e84 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8000e6c:	6a3b      	ldr	r3, [r7, #32]
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00b      	beq.n	8000ea6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00b      	beq.n	8000ec8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8000eb0:	6a3b      	ldr	r3, [r7, #32]
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ec0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8000ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d01c      	beq.n	8000f0a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f7ff fe45 	bl	8000b60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6859      	ldr	r1, [r3, #4]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <I2C_IsErrorOccurred+0x1bc>)
 8000ee2:	400b      	ands	r3, r1
 8000ee4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	431a      	orrs	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2220      	movs	r2, #32
 8000ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8000f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3728      	adds	r7, #40	@ 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	fe00e800 	.word	0xfe00e800

08000f1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b087      	sub	sp, #28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	460b      	mov	r3, r1
 8000f28:	817b      	strh	r3, [r7, #10]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000f2e:	897b      	ldrh	r3, [r7, #10]
 8000f30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8000f34:	7a7b      	ldrb	r3, [r7, #9]
 8000f36:	041b      	lsls	r3, r3, #16
 8000f38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000f3c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8000f42:	6a3b      	ldr	r3, [r7, #32]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f4a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	6a3b      	ldr	r3, [r7, #32]
 8000f54:	0d5b      	lsrs	r3, r3, #21
 8000f56:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8000f5a:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <I2C_TransferConfig+0x60>)
 8000f5c:	430b      	orrs	r3, r1
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	ea02 0103 	and.w	r1, r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8000f6e:	bf00      	nop
 8000f70:	371c      	adds	r7, #28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	03ff63ff 	.word	0x03ff63ff

08000f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d020      	beq.n	8000fe4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d01b      	beq.n	8000fe4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f06f 0202 	mvn.w	r2, #2
 8000fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f8ee 	bl	80011ac <HAL_TIM_IC_CaptureCallback>
 8000fd0:	e005      	b.n	8000fde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f8e0 	bl	8001198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 f8f1 	bl	80011c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d020      	beq.n	8001030 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d01b      	beq.n	8001030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f06f 0204 	mvn.w	r2, #4
 8001000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2202      	movs	r2, #2
 8001006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f8c8 	bl	80011ac <HAL_TIM_IC_CaptureCallback>
 800101c:	e005      	b.n	800102a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 f8ba 	bl	8001198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f8cb 	bl	80011c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	2b00      	cmp	r3, #0
 8001038:	d020      	beq.n	800107c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	2b00      	cmp	r3, #0
 8001042:	d01b      	beq.n	800107c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f06f 0208 	mvn.w	r2, #8
 800104c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2204      	movs	r2, #4
 8001052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f8a2 	bl	80011ac <HAL_TIM_IC_CaptureCallback>
 8001068:	e005      	b.n	8001076 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f894 	bl	8001198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f8a5 	bl	80011c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	2b00      	cmp	r3, #0
 8001084:	d020      	beq.n	80010c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	2b00      	cmp	r3, #0
 800108e:	d01b      	beq.n	80010c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f06f 0210 	mvn.w	r2, #16
 8001098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2208      	movs	r2, #8
 800109e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f87c 	bl	80011ac <HAL_TIM_IC_CaptureCallback>
 80010b4:	e005      	b.n	80010c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f86e 	bl	8001198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 f87f 	bl	80011c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00c      	beq.n	80010ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d007      	beq.n	80010ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f06f 0201 	mvn.w	r2, #1
 80010e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f84c 	bl	8001184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00c      	beq.n	8001110 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d007      	beq.n	8001110 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f876 	bl	80011fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00c      	beq.n	8001134 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001120:	2b00      	cmp	r3, #0
 8001122:	d007      	beq.n	8001134 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800112c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f86e 	bl	8001210 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00c      	beq.n	8001158 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001144:	2b00      	cmp	r3, #0
 8001146:	d007      	beq.n	8001158 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f83e 	bl	80011d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	f003 0320 	and.w	r3, r3, #32
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00c      	beq.n	800117c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f003 0320 	and.w	r3, r3, #32
 8001168:	2b00      	cmp	r3, #0
 800116a:	d007      	beq.n	800117c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f06f 0220 	mvn.w	r2, #32
 8001174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f836 	bl	80011e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <main>:
        HAL_I2C_Slave_Receive_IT(&hi2c2, &rx_buffer, sizeof(rx_buffer));
    }
}*/

int main()
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af02      	add	r7, sp, #8
	HAL_Init();
 800122a:	f7fe ffcf 	bl	80001cc <HAL_Init>
	i2c_master_init();
 800122e:	f000 f80f 	bl	8001250 <i2c_master_init>

	HAL_I2C_Master_Transmit(&hi2c1, (0x55 << 1), tx_buffer, sizeof(tx_buffer), HAL_MAX_DELAY);
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	230a      	movs	r3, #10
 800123a:	4a03      	ldr	r2, [pc, #12]	@ (8001248 <main+0x24>)
 800123c:	21aa      	movs	r1, #170	@ 0xaa
 800123e:	4803      	ldr	r0, [pc, #12]	@ (800124c <main+0x28>)
 8001240:	f7ff fb76 	bl	8000930 <HAL_I2C_Master_Transmit>

	while(1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <main+0x20>
 8001248:	20000008 	.word	0x20000008
 800124c:	20000038 	.word	0x20000038

08001250 <i2c_master_init>:
	{

	}
}

void i2c_master_init(){
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
	 * PB6	-->	I2C_SCL
	 * PB7	--> I2C_SDA
	 */

	//Enable clock for GPIOB and I2C
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	4b26      	ldr	r3, [pc, #152]	@ (80012f0 <i2c_master_init+0xa0>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	4a25      	ldr	r2, [pc, #148]	@ (80012f0 <i2c_master_init+0xa0>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001262:	4b23      	ldr	r3, [pc, #140]	@ (80012f0 <i2c_master_init+0xa0>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_I2C1_CLK_ENABLE();
 800126e:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <i2c_master_init+0xa0>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	4a1f      	ldr	r2, [pc, #124]	@ (80012f0 <i2c_master_init+0xa0>)
 8001274:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001278:	6593      	str	r3, [r2, #88]	@ 0x58
 800127a:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <i2c_master_init+0xa0>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_Initstruct = {0};
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
	GPIO_Initstruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001296:	23c0      	movs	r3, #192	@ 0xc0
 8001298:	60fb      	str	r3, [r7, #12]
	GPIO_Initstruct.Mode = GPIO_MODE_AF_OD;
 800129a:	2312      	movs	r3, #18
 800129c:	613b      	str	r3, [r7, #16]
	GPIO_Initstruct.Alternate = GPIO_AF4_I2C1;
 800129e:	2304      	movs	r3, #4
 80012a0:	61fb      	str	r3, [r7, #28]
	GPIO_Initstruct.Pull = GPIO_PULLUP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
	GPIO_Initstruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	61bb      	str	r3, [r7, #24]


	HAL_GPIO_Init(GPIOB,&GPIO_Initstruct);
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	4619      	mov	r1, r3
 80012b0:	4810      	ldr	r0, [pc, #64]	@ (80012f4 <i2c_master_init+0xa4>)
 80012b2:	f7ff f8ed 	bl	8000490 <HAL_GPIO_Init>

	hi2c1.Instance = I2C1;
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <i2c_master_init+0xa8>)
 80012b8:	4a10      	ldr	r2, [pc, #64]	@ (80012fc <i2c_master_init+0xac>)
 80012ba:	601a      	str	r2, [r3, #0]
	//hi2c1.Init.ClockSpeed  = 400000;
	hi2c1.Init.Timing = 0x00b1112e;
 80012bc:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <i2c_master_init+0xa8>)
 80012be:	4a10      	ldr	r2, [pc, #64]	@ (8001300 <i2c_master_init+0xb0>)
 80012c0:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80012c2:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <i2c_master_init+0xa8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c8:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <i2c_master_init+0xa8>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ce:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <i2c_master_init+0xa8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d4:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <i2c_master_init+0xa8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012da:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <i2c_master_init+0xa8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]

	HAL_I2C_Init(&hi2c1);
 80012e0:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <i2c_master_init+0xa8>)
 80012e2:	f7ff fa7f 	bl	80007e4 <HAL_I2C_Init>

}
 80012e6:	bf00      	nop
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	48000400 	.word	0x48000400
 80012f8:	20000038 	.word	0x20000038
 80012fc:	40005400 	.word	0x40005400
 8001300:	00b1112e 	.word	0x00b1112e

08001304 <SysTick_Handler>:
{
    HAL_I2C_ER_IRQHandler(&hi2c2);
}*/

void SysTick_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001308:	f7fe ffbc 	bl	8000284 <HAL_IncTick>
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <TIM3_IRQHandler>:
	HAL_NVIC_EnableIRQ(TIMx_IRQn);

	HAL_TIM_Base_Start_IT(&TimHandle);
}

void TIMx_IRQHandler(void){
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <TIM3_IRQHandler+0x10>)
 8001316:	f7ff fe33 	bl	8000f80 <HAL_TIM_IRQHandler>
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000008c 	.word	0x2000008c

08001324 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001324:	480d      	ldr	r0, [pc, #52]	@ (800135c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001326:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001328:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800132c:	480c      	ldr	r0, [pc, #48]	@ (8001360 <LoopForever+0x6>)
  ldr r1, =_edata
 800132e:	490d      	ldr	r1, [pc, #52]	@ (8001364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001330:	4a0d      	ldr	r2, [pc, #52]	@ (8001368 <LoopForever+0xe>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001334:	e002      	b.n	800133c <LoopCopyDataInit>

08001336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133a:	3304      	adds	r3, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001340:	d3f9      	bcc.n	8001336 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001342:	4a0a      	ldr	r2, [pc, #40]	@ (800136c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001344:	4c0a      	ldr	r4, [pc, #40]	@ (8001370 <LoopForever+0x16>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001348:	e001      	b.n	800134e <LoopFillZerobss>

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134c:	3204      	adds	r2, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001352:	f000 f811 	bl	8001378 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8001356:	f7ff ff65 	bl	8001224 <main>

0800135a <LoopForever>:

LoopForever:
  b LoopForever
 800135a:	e7fe      	b.n	800135a <LoopForever>
  ldr   r0, =_estack
 800135c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001364:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001368:	080013e0 	.word	0x080013e0
  ldr r2, =_sbss
 800136c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001370:	200000d8 	.word	0x200000d8

08001374 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
   b Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC1_2_IRQHandler>
	...

08001378 <__libc_init_array>:
 8001378:	b570      	push	{r4, r5, r6, lr}
 800137a:	4d0d      	ldr	r5, [pc, #52]	@ (80013b0 <__libc_init_array+0x38>)
 800137c:	4c0d      	ldr	r4, [pc, #52]	@ (80013b4 <__libc_init_array+0x3c>)
 800137e:	1b64      	subs	r4, r4, r5
 8001380:	10a4      	asrs	r4, r4, #2
 8001382:	2600      	movs	r6, #0
 8001384:	42a6      	cmp	r6, r4
 8001386:	d109      	bne.n	800139c <__libc_init_array+0x24>
 8001388:	4d0b      	ldr	r5, [pc, #44]	@ (80013b8 <__libc_init_array+0x40>)
 800138a:	4c0c      	ldr	r4, [pc, #48]	@ (80013bc <__libc_init_array+0x44>)
 800138c:	f000 f818 	bl	80013c0 <_init>
 8001390:	1b64      	subs	r4, r4, r5
 8001392:	10a4      	asrs	r4, r4, #2
 8001394:	2600      	movs	r6, #0
 8001396:	42a6      	cmp	r6, r4
 8001398:	d105      	bne.n	80013a6 <__libc_init_array+0x2e>
 800139a:	bd70      	pop	{r4, r5, r6, pc}
 800139c:	f855 3b04 	ldr.w	r3, [r5], #4
 80013a0:	4798      	blx	r3
 80013a2:	3601      	adds	r6, #1
 80013a4:	e7ee      	b.n	8001384 <__libc_init_array+0xc>
 80013a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80013aa:	4798      	blx	r3
 80013ac:	3601      	adds	r6, #1
 80013ae:	e7f2      	b.n	8001396 <__libc_init_array+0x1e>
 80013b0:	080013d8 	.word	0x080013d8
 80013b4:	080013d8 	.word	0x080013d8
 80013b8:	080013d8 	.word	0x080013d8
 80013bc:	080013dc 	.word	0x080013dc

080013c0 <_init>:
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c2:	bf00      	nop
 80013c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013c6:	bc08      	pop	{r3}
 80013c8:	469e      	mov	lr, r3
 80013ca:	4770      	bx	lr

080013cc <_fini>:
 80013cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ce:	bf00      	nop
 80013d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013d2:	bc08      	pop	{r3}
 80013d4:	469e      	mov	lr, r3
 80013d6:	4770      	bx	lr
