
14_uart_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022f0  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800247c  0800247c  0000347c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024b4  080024b4  00004018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080024b4  080024b4  000034b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024bc  080024bc  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024bc  080024bc  000034bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024c0  080024c0  000034c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080024c4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00004018  2**0
                  CONTENTS
 10 .bss          00000144  20000018  20000018  00004018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000015c  2000015c  00004018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007db1  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001160  00000000  00000000  0000bdf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000668  00000000  00000000  0000cf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004e9  00000000  00000000  0000d5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000017ba  00000000  00000000  0000dab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000082ad  00000000  00000000  0000f26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e886c  00000000  00000000  00017518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ffd84  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a04  00000000  00000000  000ffdc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001017cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000018 	.word	0x20000018
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002464 	.word	0x08002464

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	08002464 	.word	0x08002464

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004fe:	2300      	movs	r3, #0
 8000500:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000502:	2003      	movs	r0, #3
 8000504:	f000 f944 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000508:	200f      	movs	r0, #15
 800050a:	f000 f815 	bl	8000538 <HAL_InitTick>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d002      	beq.n	800051a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000514:	2301      	movs	r3, #1
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	e001      	b.n	800051e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800051a:	f000 f805 	bl	8000528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800051e:	79fb      	ldrb	r3, [r7, #7]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000544:	4b17      	ldr	r3, [pc, #92]	@ (80005a4 <HAL_InitTick+0x6c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d023      	beq.n	8000594 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800054c:	4b16      	ldr	r3, [pc, #88]	@ (80005a8 <HAL_InitTick+0x70>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b14      	ldr	r3, [pc, #80]	@ (80005a4 <HAL_InitTick+0x6c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	4619      	mov	r1, r3
 8000556:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800055a:	fbb3 f3f1 	udiv	r3, r3, r1
 800055e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f949 	bl	80007fa <HAL_SYSTICK_Config>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d10f      	bne.n	800058e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d809      	bhi.n	8000588 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295
 800057c:	f000 f913 	bl	80007a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000580:	4a0a      	ldr	r2, [pc, #40]	@ (80005ac <HAL_InitTick+0x74>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	e007      	b.n	8000598 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000588:	2301      	movs	r3, #1
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e004      	b.n	8000598 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	e001      	b.n	8000598 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000598:	7bfb      	ldrb	r3, [r7, #15]
}
 800059a:	4618      	mov	r0, r3
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004
 80005a8:	20000014 	.word	0x20000014
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <HAL_IncTick+0x20>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_IncTick+0x24>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	4a04      	ldr	r2, [pc, #16]	@ (80005d4 <HAL_IncTick+0x24>)
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000004 	.word	0x20000004
 80005d4:	20000034 	.word	0x20000034

080005d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return uwTick;
 80005dc:	4b03      	ldr	r3, [pc, #12]	@ (80005ec <HAL_GetTick+0x14>)
 80005de:	681b      	ldr	r3, [r3, #0]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000034 	.word	0x20000034

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	@ (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	@ (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	@ (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	@ (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	@ 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	@ 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	@ (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	@ (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	@ (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff3e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff31 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa2 	bl	800074c <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d101      	bne.n	8000826 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e098      	b.n	8000958 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	461a      	mov	r2, r3
 800082c:	4b4d      	ldr	r3, [pc, #308]	@ (8000964 <HAL_DMA_Init+0x150>)
 800082e:	429a      	cmp	r2, r3
 8000830:	d80f      	bhi.n	8000852 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	461a      	mov	r2, r3
 8000838:	4b4b      	ldr	r3, [pc, #300]	@ (8000968 <HAL_DMA_Init+0x154>)
 800083a:	4413      	add	r3, r2
 800083c:	4a4b      	ldr	r2, [pc, #300]	@ (800096c <HAL_DMA_Init+0x158>)
 800083e:	fba2 2303 	umull	r2, r3, r2, r3
 8000842:	091b      	lsrs	r3, r3, #4
 8000844:	009a      	lsls	r2, r3, #2
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a48      	ldr	r2, [pc, #288]	@ (8000970 <HAL_DMA_Init+0x15c>)
 800084e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000850:	e00e      	b.n	8000870 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	4b46      	ldr	r3, [pc, #280]	@ (8000974 <HAL_DMA_Init+0x160>)
 800085a:	4413      	add	r3, r2
 800085c:	4a43      	ldr	r2, [pc, #268]	@ (800096c <HAL_DMA_Init+0x158>)
 800085e:	fba2 2303 	umull	r2, r3, r2, r3
 8000862:	091b      	lsrs	r3, r3, #4
 8000864:	009a      	lsls	r2, r3, #2
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a42      	ldr	r2, [pc, #264]	@ (8000978 <HAL_DMA_Init+0x164>)
 800086e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2202      	movs	r2, #2
 8000874:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800088a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000894:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	691b      	ldr	r3, [r3, #16]
 800089a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6a1b      	ldr	r3, [r3, #32]
 80008b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80008ca:	d039      	beq.n	8000940 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d0:	4a27      	ldr	r2, [pc, #156]	@ (8000970 <HAL_DMA_Init+0x15c>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d11a      	bne.n	800090c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80008d6:	4b29      	ldr	r3, [pc, #164]	@ (800097c <HAL_DMA_Init+0x168>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	f003 031c 	and.w	r3, r3, #28
 80008e2:	210f      	movs	r1, #15
 80008e4:	fa01 f303 	lsl.w	r3, r1, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	4924      	ldr	r1, [pc, #144]	@ (800097c <HAL_DMA_Init+0x168>)
 80008ec:	4013      	ands	r3, r2
 80008ee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80008f0:	4b22      	ldr	r3, [pc, #136]	@ (800097c <HAL_DMA_Init+0x168>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6859      	ldr	r1, [r3, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fc:	f003 031c 	and.w	r3, r3, #28
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	491d      	ldr	r1, [pc, #116]	@ (800097c <HAL_DMA_Init+0x168>)
 8000906:	4313      	orrs	r3, r2
 8000908:	600b      	str	r3, [r1, #0]
 800090a:	e019      	b.n	8000940 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800090c:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <HAL_DMA_Init+0x16c>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000914:	f003 031c 	and.w	r3, r3, #28
 8000918:	210f      	movs	r1, #15
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	43db      	mvns	r3, r3
 8000920:	4917      	ldr	r1, [pc, #92]	@ (8000980 <HAL_DMA_Init+0x16c>)
 8000922:	4013      	ands	r3, r2
 8000924:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000926:	4b16      	ldr	r3, [pc, #88]	@ (8000980 <HAL_DMA_Init+0x16c>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6859      	ldr	r1, [r3, #4]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000932:	f003 031c 	and.w	r3, r3, #28
 8000936:	fa01 f303 	lsl.w	r3, r1, r3
 800093a:	4911      	ldr	r1, [pc, #68]	@ (8000980 <HAL_DMA_Init+0x16c>)
 800093c:	4313      	orrs	r3, r2
 800093e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2201      	movs	r2, #1
 800094a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40020407 	.word	0x40020407
 8000968:	bffdfff8 	.word	0xbffdfff8
 800096c:	cccccccd 	.word	0xcccccccd
 8000970:	40020000 	.word	0x40020000
 8000974:	bffdfbf8 	.word	0xbffdfbf8
 8000978:	40020400 	.word	0x40020400
 800097c:	400200a8 	.word	0x400200a8
 8000980:	400204a8 	.word	0x400204a8

08000984 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800099c:	2b01      	cmp	r3, #1
 800099e:	d101      	bne.n	80009a4 <HAL_DMA_Start_IT+0x20>
 80009a0:	2302      	movs	r3, #2
 80009a2:	e04b      	b.n	8000a3c <HAL_DMA_Start_IT+0xb8>
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2201      	movs	r2, #1
 80009a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d13a      	bne.n	8000a2e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	2202      	movs	r2, #2
 80009bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2200      	movs	r2, #0
 80009c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f022 0201 	bic.w	r2, r2, #1
 80009d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	68b9      	ldr	r1, [r7, #8]
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f000 f8e0 	bl	8000ba2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d008      	beq.n	80009fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f042 020e 	orr.w	r2, r2, #14
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	e00f      	b.n	8000a1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f022 0204 	bic.w	r2, r2, #4
 8000a0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f042 020a 	orr.w	r2, r2, #10
 8000a1a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f042 0201 	orr.w	r2, r2, #1
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	e005      	b.n	8000a3a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000a36:	2302      	movs	r3, #2
 8000a38:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a60:	f003 031c 	and.w	r3, r3, #28
 8000a64:	2204      	movs	r2, #4
 8000a66:	409a      	lsls	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d026      	beq.n	8000abe <HAL_DMA_IRQHandler+0x7a>
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d021      	beq.n	8000abe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f003 0320 	and.w	r3, r3, #32
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d107      	bne.n	8000a98 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f022 0204 	bic.w	r2, r2, #4
 8000a96:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9c:	f003 021c 	and.w	r2, r3, #28
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aaa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d071      	beq.n	8000b98 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000abc:	e06c      	b.n	8000b98 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	f003 031c 	and.w	r3, r3, #28
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	409a      	lsls	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4013      	ands	r3, r2
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d02e      	beq.n	8000b30 <HAL_DMA_IRQHandler+0xec>
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d029      	beq.n	8000b30 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f003 0320 	and.w	r3, r3, #32
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10b      	bne.n	8000b02 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f022 020a 	bic.w	r2, r2, #10
 8000af8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2201      	movs	r2, #1
 8000afe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	f003 021c 	and.w	r2, r3, #28
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	2102      	movs	r1, #2
 8000b10:	fa01 f202 	lsl.w	r2, r1, r2
 8000b14:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d038      	beq.n	8000b98 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000b2e:	e033      	b.n	8000b98 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b34:	f003 031c 	and.w	r3, r3, #28
 8000b38:	2208      	movs	r2, #8
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d02a      	beq.n	8000b9a <HAL_DMA_IRQHandler+0x156>
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d025      	beq.n	8000b9a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f022 020e 	bic.w	r2, r2, #14
 8000b5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	f003 021c 	and.w	r2, r3, #28
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b70:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2201      	movs	r2, #1
 8000b76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d004      	beq.n	8000b9a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
}
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b085      	sub	sp, #20
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	60f8      	str	r0, [r7, #12]
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb4:	f003 021c 	and.w	r2, r3, #28
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	2b10      	cmp	r3, #16
 8000bd2:	d108      	bne.n	8000be6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000be4:	e007      	b.n	8000bf6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	60da      	str	r2, [r3, #12]
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c12:	e17f      	b.n	8000f14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	2101      	movs	r1, #1
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 8171 	beq.w	8000f0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d005      	beq.n	8000c44 <HAL_GPIO_Init+0x40>
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d130      	bne.n	8000ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	f003 0201 	and.w	r2, r3, #1
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d118      	bne.n	8000ce4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	08db      	lsrs	r3, r3, #3
 8000cce:	f003 0201 	and.w	r2, r3, #1
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b03      	cmp	r3, #3
 8000cee:	d017      	beq.n	8000d20 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d123      	bne.n	8000d74 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	08da      	lsrs	r2, r3, #3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3208      	adds	r2, #8
 8000d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	220f      	movs	r2, #15
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	691a      	ldr	r2, [r3, #16]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	08da      	lsrs	r2, r3, #3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3208      	adds	r2, #8
 8000d6e:	6939      	ldr	r1, [r7, #16]
 8000d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0203 	and.w	r2, r3, #3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f000 80ac 	beq.w	8000f0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	4b5f      	ldr	r3, [pc, #380]	@ (8000f34 <HAL_GPIO_Init+0x330>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dba:	4a5e      	ldr	r2, [pc, #376]	@ (8000f34 <HAL_GPIO_Init+0x330>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8000f34 <HAL_GPIO_Init+0x330>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dce:	4a5a      	ldr	r2, [pc, #360]	@ (8000f38 <HAL_GPIO_Init+0x334>)
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000df8:	d025      	beq.n	8000e46 <HAL_GPIO_Init+0x242>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4f      	ldr	r2, [pc, #316]	@ (8000f3c <HAL_GPIO_Init+0x338>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d01f      	beq.n	8000e42 <HAL_GPIO_Init+0x23e>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4e      	ldr	r2, [pc, #312]	@ (8000f40 <HAL_GPIO_Init+0x33c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d019      	beq.n	8000e3e <HAL_GPIO_Init+0x23a>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4d      	ldr	r2, [pc, #308]	@ (8000f44 <HAL_GPIO_Init+0x340>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d013      	beq.n	8000e3a <HAL_GPIO_Init+0x236>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4c      	ldr	r2, [pc, #304]	@ (8000f48 <HAL_GPIO_Init+0x344>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d00d      	beq.n	8000e36 <HAL_GPIO_Init+0x232>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4b      	ldr	r2, [pc, #300]	@ (8000f4c <HAL_GPIO_Init+0x348>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d007      	beq.n	8000e32 <HAL_GPIO_Init+0x22e>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4a      	ldr	r2, [pc, #296]	@ (8000f50 <HAL_GPIO_Init+0x34c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d101      	bne.n	8000e2e <HAL_GPIO_Init+0x22a>
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	e00c      	b.n	8000e48 <HAL_GPIO_Init+0x244>
 8000e2e:	2307      	movs	r3, #7
 8000e30:	e00a      	b.n	8000e48 <HAL_GPIO_Init+0x244>
 8000e32:	2305      	movs	r3, #5
 8000e34:	e008      	b.n	8000e48 <HAL_GPIO_Init+0x244>
 8000e36:	2304      	movs	r3, #4
 8000e38:	e006      	b.n	8000e48 <HAL_GPIO_Init+0x244>
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e004      	b.n	8000e48 <HAL_GPIO_Init+0x244>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e002      	b.n	8000e48 <HAL_GPIO_Init+0x244>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <HAL_GPIO_Init+0x244>
 8000e46:	2300      	movs	r3, #0
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	f002 0203 	and.w	r2, r2, #3
 8000e4e:	0092      	lsls	r2, r2, #2
 8000e50:	4093      	lsls	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e58:	4937      	ldr	r1, [pc, #220]	@ (8000f38 <HAL_GPIO_Init+0x334>)
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e66:	4b3b      	ldr	r3, [pc, #236]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e8a:	4a32      	ldr	r2, [pc, #200]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e90:	4b30      	ldr	r3, [pc, #192]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000eb4:	4a27      	ldr	r2, [pc, #156]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000eba:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ede:	4a1d      	ldr	r2, [pc, #116]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f08:	4a12      	ldr	r2, [pc, #72]	@ (8000f54 <HAL_GPIO_Init+0x350>)
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f47f ae78 	bne.w	8000c14 <HAL_GPIO_Init+0x10>
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	371c      	adds	r7, #28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	48000400 	.word	0x48000400
 8000f40:	48000800 	.word	0x48000800
 8000f44:	48000c00 	.word	0x48000c00
 8000f48:	48001000 	.word	0x48001000
 8000f4c:	48001400 	.word	0x48001400
 8000f50:	48001800 	.word	0x48001800
 8000f54:	40010400 	.word	0x40010400

08000f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f66:	4b3e      	ldr	r3, [pc, #248]	@ (8001060 <HAL_RCC_GetSysClockFreq+0x108>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
 8000f6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f70:	4b3b      	ldr	r3, [pc, #236]	@ (8001060 <HAL_RCC_GetSysClockFreq+0x108>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <HAL_RCC_GetSysClockFreq+0x34>
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	2b0c      	cmp	r3, #12
 8000f84:	d121      	bne.n	8000fca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d11e      	bne.n	8000fca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000f8c:	4b34      	ldr	r3, [pc, #208]	@ (8001060 <HAL_RCC_GetSysClockFreq+0x108>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d107      	bne.n	8000fa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000f98:	4b31      	ldr	r3, [pc, #196]	@ (8001060 <HAL_RCC_GetSysClockFreq+0x108>)
 8000f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f9e:	0a1b      	lsrs	r3, r3, #8
 8000fa0:	f003 030f 	and.w	r3, r3, #15
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	e005      	b.n	8000fb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8001060 <HAL_RCC_GetSysClockFreq+0x108>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8001064 <HAL_RCC_GetSysClockFreq+0x10c>)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d10d      	bne.n	8000fe0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fc8:	e00a      	b.n	8000fe0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d102      	bne.n	8000fd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000fd0:	4b25      	ldr	r3, [pc, #148]	@ (8001068 <HAL_RCC_GetSysClockFreq+0x110>)
 8000fd2:	61bb      	str	r3, [r7, #24]
 8000fd4:	e004      	b.n	8000fe0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	2b08      	cmp	r3, #8
 8000fda:	d101      	bne.n	8000fe0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000fdc:	4b23      	ldr	r3, [pc, #140]	@ (800106c <HAL_RCC_GetSysClockFreq+0x114>)
 8000fde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	2b0c      	cmp	r3, #12
 8000fe4:	d134      	bne.n	8001050 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8001060 <HAL_RCC_GetSysClockFreq+0x108>)
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d003      	beq.n	8000ffe <HAL_RCC_GetSysClockFreq+0xa6>
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d003      	beq.n	8001004 <HAL_RCC_GetSysClockFreq+0xac>
 8000ffc:	e005      	b.n	800100a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8001068 <HAL_RCC_GetSysClockFreq+0x110>)
 8001000:	617b      	str	r3, [r7, #20]
      break;
 8001002:	e005      	b.n	8001010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001004:	4b19      	ldr	r3, [pc, #100]	@ (800106c <HAL_RCC_GetSysClockFreq+0x114>)
 8001006:	617b      	str	r3, [r7, #20]
      break;
 8001008:	e002      	b.n	8001010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	617b      	str	r3, [r7, #20]
      break;
 800100e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001010:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	3301      	adds	r3, #1
 800101c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	0a1b      	lsrs	r3, r3, #8
 8001024:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	fb03 f202 	mul.w	r2, r3, r2
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	fbb2 f3f3 	udiv	r3, r2, r3
 8001034:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001036:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <HAL_RCC_GetSysClockFreq+0x108>)
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	0e5b      	lsrs	r3, r3, #25
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	3301      	adds	r3, #1
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001050:	69bb      	ldr	r3, [r7, #24]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	@ 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000
 8001064:	08002484 	.word	0x08002484
 8001068:	00f42400 	.word	0x00f42400
 800106c:	007a1200 	.word	0x007a1200

08001070 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <HAL_RCC_GetHCLKFreq+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000014 	.word	0x20000014

08001088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800108c:	f7ff fff0 	bl	8001070 <HAL_RCC_GetHCLKFreq>
 8001090:	4602      	mov	r2, r0
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	0a1b      	lsrs	r3, r3, #8
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	4904      	ldr	r1, [pc, #16]	@ (80010b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800109e:	5ccb      	ldrb	r3, [r1, r3]
 80010a0:	f003 031f 	and.w	r3, r3, #31
 80010a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000
 80010b0:	0800247c 	.word	0x0800247c

080010b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80010b8:	f7ff ffda 	bl	8001070 <HAL_RCC_GetHCLKFreq>
 80010bc:	4602      	mov	r2, r0
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	0adb      	lsrs	r3, r3, #11
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	4904      	ldr	r1, [pc, #16]	@ (80010dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80010ca:	5ccb      	ldrb	r3, [r1, r3]
 80010cc:	f003 031f 	and.w	r3, r3, #31
 80010d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000
 80010dc:	0800247c 	.word	0x0800247c

080010e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e040      	b.n	8001174 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d106      	bne.n	8001108 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 f83a 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2224      	movs	r2, #36	@ 0x24
 800110c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0201 	bic.w	r2, r2, #1
 800111c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001122:	2b00      	cmp	r3, #0
 8001124:	d002      	beq.n	800112c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 fbf0 	bl	800190c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 f935 	bl	800139c <UART_SetConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e01b      	b.n	8001174 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800114a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800115a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0201 	orr.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 fc6f 	bl	8001a50 <UART_CheckIdleState>
 8001172:	4603      	mov	r3, r0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	@ 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	4613      	mov	r3, r2
 800119c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d165      	bne.n	8001272 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <HAL_UART_Transmit_DMA+0x22>
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e05e      	b.n	8001274 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	88fa      	ldrh	r2, [r7, #6]
 80011c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	88fa      	ldrh	r2, [r7, #6]
 80011c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2221      	movs	r2, #33	@ 0x21
 80011d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d027      	beq.n	8001232 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011e6:	4a25      	ldr	r2, [pc, #148]	@ (800127c <HAL_UART_Transmit_DMA+0xec>)
 80011e8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011ee:	4a24      	ldr	r2, [pc, #144]	@ (8001280 <HAL_UART_Transmit_DMA+0xf0>)
 80011f0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011f6:	4a23      	ldr	r2, [pc, #140]	@ (8001284 <HAL_UART_Transmit_DMA+0xf4>)
 80011f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011fe:	2200      	movs	r2, #0
 8001200:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	4619      	mov	r1, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3328      	adds	r3, #40	@ 0x28
 8001212:	461a      	mov	r2, r3
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	f7ff fbb5 	bl	8000984 <HAL_DMA_Start_IT>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2210      	movs	r2, #16
 8001224:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2220      	movs	r2, #32
 800122c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e020      	b.n	8001274 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2240      	movs	r2, #64	@ 0x40
 8001238:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3308      	adds	r3, #8
 8001240:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	e853 3f00 	ldrex	r3, [r3]
 8001248:	613b      	str	r3, [r7, #16]
   return(result);
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3308      	adds	r3, #8
 8001258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800125a:	623a      	str	r2, [r7, #32]
 800125c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800125e:	69f9      	ldr	r1, [r7, #28]
 8001260:	6a3a      	ldr	r2, [r7, #32]
 8001262:	e841 2300 	strex	r3, r2, [r1]
 8001266:	61bb      	str	r3, [r7, #24]
   return(result);
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1e5      	bne.n	800123a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8001272:	2302      	movs	r3, #2
  }
}
 8001274:	4618      	mov	r0, r3
 8001276:	3728      	adds	r7, #40	@ 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	08001ec5 	.word	0x08001ec5
 8001280:	08001f5f 	.word	0x08001f5f
 8001284:	080020e5 	.word	0x080020e5

08001288 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	4613      	mov	r3, r2
 8001294:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800129c:	2b20      	cmp	r3, #32
 800129e:	d137      	bne.n	8001310 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <HAL_UART_Receive_DMA+0x24>
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e030      	b.n	8001312 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2200      	movs	r2, #0
 80012b4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a18      	ldr	r2, [pc, #96]	@ (800131c <HAL_UART_Receive_DMA+0x94>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d01f      	beq.n	8001300 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d018      	beq.n	8001300 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	e853 3f00 	ldrex	r3, [r3]
 80012da:	613b      	str	r3, [r7, #16]
   return(result);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ec:	623b      	str	r3, [r7, #32]
 80012ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012f0:	69f9      	ldr	r1, [r7, #28]
 80012f2:	6a3a      	ldr	r2, [r7, #32]
 80012f4:	e841 2300 	strex	r3, r2, [r1]
 80012f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1e6      	bne.n	80012ce <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	461a      	mov	r2, r3
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 fcb2 	bl	8001c70 <UART_Start_Receive_DMA>
 800130c:	4603      	mov	r3, r0
 800130e:	e000      	b.n	8001312 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001310:	2302      	movs	r3, #2
  }
}
 8001312:	4618      	mov	r0, r3
 8001314:	3728      	adds	r7, #40	@ 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40008000 	.word	0x40008000

08001320 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800139c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013a0:	b08a      	sub	sp, #40	@ 0x28
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	431a      	orrs	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4ba4      	ldr	r3, [pc, #656]	@ (800165c <UART_SetConfig+0x2c0>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013d4:	430b      	orrs	r3, r1
 80013d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a99      	ldr	r2, [pc, #612]	@ (8001660 <UART_SetConfig+0x2c4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d004      	beq.n	8001408 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001404:	4313      	orrs	r3, r2
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001418:	430a      	orrs	r2, r1
 800141a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a90      	ldr	r2, [pc, #576]	@ (8001664 <UART_SetConfig+0x2c8>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d126      	bne.n	8001474 <UART_SetConfig+0xd8>
 8001426:	4b90      	ldr	r3, [pc, #576]	@ (8001668 <UART_SetConfig+0x2cc>)
 8001428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	2b03      	cmp	r3, #3
 8001432:	d81b      	bhi.n	800146c <UART_SetConfig+0xd0>
 8001434:	a201      	add	r2, pc, #4	@ (adr r2, 800143c <UART_SetConfig+0xa0>)
 8001436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143a:	bf00      	nop
 800143c:	0800144d 	.word	0x0800144d
 8001440:	0800145d 	.word	0x0800145d
 8001444:	08001455 	.word	0x08001455
 8001448:	08001465 	.word	0x08001465
 800144c:	2301      	movs	r3, #1
 800144e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001452:	e116      	b.n	8001682 <UART_SetConfig+0x2e6>
 8001454:	2302      	movs	r3, #2
 8001456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800145a:	e112      	b.n	8001682 <UART_SetConfig+0x2e6>
 800145c:	2304      	movs	r3, #4
 800145e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001462:	e10e      	b.n	8001682 <UART_SetConfig+0x2e6>
 8001464:	2308      	movs	r3, #8
 8001466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800146a:	e10a      	b.n	8001682 <UART_SetConfig+0x2e6>
 800146c:	2310      	movs	r3, #16
 800146e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001472:	e106      	b.n	8001682 <UART_SetConfig+0x2e6>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a7c      	ldr	r2, [pc, #496]	@ (800166c <UART_SetConfig+0x2d0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d138      	bne.n	80014f0 <UART_SetConfig+0x154>
 800147e:	4b7a      	ldr	r3, [pc, #488]	@ (8001668 <UART_SetConfig+0x2cc>)
 8001480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b0c      	cmp	r3, #12
 800148a:	d82d      	bhi.n	80014e8 <UART_SetConfig+0x14c>
 800148c:	a201      	add	r2, pc, #4	@ (adr r2, 8001494 <UART_SetConfig+0xf8>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014c9 	.word	0x080014c9
 8001498:	080014e9 	.word	0x080014e9
 800149c:	080014e9 	.word	0x080014e9
 80014a0:	080014e9 	.word	0x080014e9
 80014a4:	080014d9 	.word	0x080014d9
 80014a8:	080014e9 	.word	0x080014e9
 80014ac:	080014e9 	.word	0x080014e9
 80014b0:	080014e9 	.word	0x080014e9
 80014b4:	080014d1 	.word	0x080014d1
 80014b8:	080014e9 	.word	0x080014e9
 80014bc:	080014e9 	.word	0x080014e9
 80014c0:	080014e9 	.word	0x080014e9
 80014c4:	080014e1 	.word	0x080014e1
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80014ce:	e0d8      	b.n	8001682 <UART_SetConfig+0x2e6>
 80014d0:	2302      	movs	r3, #2
 80014d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80014d6:	e0d4      	b.n	8001682 <UART_SetConfig+0x2e6>
 80014d8:	2304      	movs	r3, #4
 80014da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80014de:	e0d0      	b.n	8001682 <UART_SetConfig+0x2e6>
 80014e0:	2308      	movs	r3, #8
 80014e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80014e6:	e0cc      	b.n	8001682 <UART_SetConfig+0x2e6>
 80014e8:	2310      	movs	r3, #16
 80014ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80014ee:	e0c8      	b.n	8001682 <UART_SetConfig+0x2e6>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a5e      	ldr	r2, [pc, #376]	@ (8001670 <UART_SetConfig+0x2d4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d125      	bne.n	8001546 <UART_SetConfig+0x1aa>
 80014fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001668 <UART_SetConfig+0x2cc>)
 80014fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001500:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001504:	2b30      	cmp	r3, #48	@ 0x30
 8001506:	d016      	beq.n	8001536 <UART_SetConfig+0x19a>
 8001508:	2b30      	cmp	r3, #48	@ 0x30
 800150a:	d818      	bhi.n	800153e <UART_SetConfig+0x1a2>
 800150c:	2b20      	cmp	r3, #32
 800150e:	d00a      	beq.n	8001526 <UART_SetConfig+0x18a>
 8001510:	2b20      	cmp	r3, #32
 8001512:	d814      	bhi.n	800153e <UART_SetConfig+0x1a2>
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <UART_SetConfig+0x182>
 8001518:	2b10      	cmp	r3, #16
 800151a:	d008      	beq.n	800152e <UART_SetConfig+0x192>
 800151c:	e00f      	b.n	800153e <UART_SetConfig+0x1a2>
 800151e:	2300      	movs	r3, #0
 8001520:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001524:	e0ad      	b.n	8001682 <UART_SetConfig+0x2e6>
 8001526:	2302      	movs	r3, #2
 8001528:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800152c:	e0a9      	b.n	8001682 <UART_SetConfig+0x2e6>
 800152e:	2304      	movs	r3, #4
 8001530:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001534:	e0a5      	b.n	8001682 <UART_SetConfig+0x2e6>
 8001536:	2308      	movs	r3, #8
 8001538:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800153c:	e0a1      	b.n	8001682 <UART_SetConfig+0x2e6>
 800153e:	2310      	movs	r3, #16
 8001540:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001544:	e09d      	b.n	8001682 <UART_SetConfig+0x2e6>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a4a      	ldr	r2, [pc, #296]	@ (8001674 <UART_SetConfig+0x2d8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d125      	bne.n	800159c <UART_SetConfig+0x200>
 8001550:	4b45      	ldr	r3, [pc, #276]	@ (8001668 <UART_SetConfig+0x2cc>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001556:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800155a:	2bc0      	cmp	r3, #192	@ 0xc0
 800155c:	d016      	beq.n	800158c <UART_SetConfig+0x1f0>
 800155e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001560:	d818      	bhi.n	8001594 <UART_SetConfig+0x1f8>
 8001562:	2b80      	cmp	r3, #128	@ 0x80
 8001564:	d00a      	beq.n	800157c <UART_SetConfig+0x1e0>
 8001566:	2b80      	cmp	r3, #128	@ 0x80
 8001568:	d814      	bhi.n	8001594 <UART_SetConfig+0x1f8>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <UART_SetConfig+0x1d8>
 800156e:	2b40      	cmp	r3, #64	@ 0x40
 8001570:	d008      	beq.n	8001584 <UART_SetConfig+0x1e8>
 8001572:	e00f      	b.n	8001594 <UART_SetConfig+0x1f8>
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800157a:	e082      	b.n	8001682 <UART_SetConfig+0x2e6>
 800157c:	2302      	movs	r3, #2
 800157e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001582:	e07e      	b.n	8001682 <UART_SetConfig+0x2e6>
 8001584:	2304      	movs	r3, #4
 8001586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800158a:	e07a      	b.n	8001682 <UART_SetConfig+0x2e6>
 800158c:	2308      	movs	r3, #8
 800158e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001592:	e076      	b.n	8001682 <UART_SetConfig+0x2e6>
 8001594:	2310      	movs	r3, #16
 8001596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800159a:	e072      	b.n	8001682 <UART_SetConfig+0x2e6>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a35      	ldr	r2, [pc, #212]	@ (8001678 <UART_SetConfig+0x2dc>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d12a      	bne.n	80015fc <UART_SetConfig+0x260>
 80015a6:	4b30      	ldr	r3, [pc, #192]	@ (8001668 <UART_SetConfig+0x2cc>)
 80015a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80015b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80015b4:	d01a      	beq.n	80015ec <UART_SetConfig+0x250>
 80015b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80015ba:	d81b      	bhi.n	80015f4 <UART_SetConfig+0x258>
 80015bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015c0:	d00c      	beq.n	80015dc <UART_SetConfig+0x240>
 80015c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015c6:	d815      	bhi.n	80015f4 <UART_SetConfig+0x258>
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <UART_SetConfig+0x238>
 80015cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015d0:	d008      	beq.n	80015e4 <UART_SetConfig+0x248>
 80015d2:	e00f      	b.n	80015f4 <UART_SetConfig+0x258>
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80015da:	e052      	b.n	8001682 <UART_SetConfig+0x2e6>
 80015dc:	2302      	movs	r3, #2
 80015de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80015e2:	e04e      	b.n	8001682 <UART_SetConfig+0x2e6>
 80015e4:	2304      	movs	r3, #4
 80015e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80015ea:	e04a      	b.n	8001682 <UART_SetConfig+0x2e6>
 80015ec:	2308      	movs	r3, #8
 80015ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80015f2:	e046      	b.n	8001682 <UART_SetConfig+0x2e6>
 80015f4:	2310      	movs	r3, #16
 80015f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80015fa:	e042      	b.n	8001682 <UART_SetConfig+0x2e6>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <UART_SetConfig+0x2c4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d13a      	bne.n	800167c <UART_SetConfig+0x2e0>
 8001606:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <UART_SetConfig+0x2cc>)
 8001608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800160c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001610:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001614:	d01a      	beq.n	800164c <UART_SetConfig+0x2b0>
 8001616:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800161a:	d81b      	bhi.n	8001654 <UART_SetConfig+0x2b8>
 800161c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001620:	d00c      	beq.n	800163c <UART_SetConfig+0x2a0>
 8001622:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001626:	d815      	bhi.n	8001654 <UART_SetConfig+0x2b8>
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <UART_SetConfig+0x298>
 800162c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001630:	d008      	beq.n	8001644 <UART_SetConfig+0x2a8>
 8001632:	e00f      	b.n	8001654 <UART_SetConfig+0x2b8>
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800163a:	e022      	b.n	8001682 <UART_SetConfig+0x2e6>
 800163c:	2302      	movs	r3, #2
 800163e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001642:	e01e      	b.n	8001682 <UART_SetConfig+0x2e6>
 8001644:	2304      	movs	r3, #4
 8001646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800164a:	e01a      	b.n	8001682 <UART_SetConfig+0x2e6>
 800164c:	2308      	movs	r3, #8
 800164e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001652:	e016      	b.n	8001682 <UART_SetConfig+0x2e6>
 8001654:	2310      	movs	r3, #16
 8001656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800165a:	e012      	b.n	8001682 <UART_SetConfig+0x2e6>
 800165c:	efff69f3 	.word	0xefff69f3
 8001660:	40008000 	.word	0x40008000
 8001664:	40013800 	.word	0x40013800
 8001668:	40021000 	.word	0x40021000
 800166c:	40004400 	.word	0x40004400
 8001670:	40004800 	.word	0x40004800
 8001674:	40004c00 	.word	0x40004c00
 8001678:	40005000 	.word	0x40005000
 800167c:	2310      	movs	r3, #16
 800167e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a9f      	ldr	r2, [pc, #636]	@ (8001904 <UART_SetConfig+0x568>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d17a      	bne.n	8001782 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800168c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001690:	2b08      	cmp	r3, #8
 8001692:	d824      	bhi.n	80016de <UART_SetConfig+0x342>
 8001694:	a201      	add	r2, pc, #4	@ (adr r2, 800169c <UART_SetConfig+0x300>)
 8001696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169a:	bf00      	nop
 800169c:	080016c1 	.word	0x080016c1
 80016a0:	080016df 	.word	0x080016df
 80016a4:	080016c9 	.word	0x080016c9
 80016a8:	080016df 	.word	0x080016df
 80016ac:	080016cf 	.word	0x080016cf
 80016b0:	080016df 	.word	0x080016df
 80016b4:	080016df 	.word	0x080016df
 80016b8:	080016df 	.word	0x080016df
 80016bc:	080016d7 	.word	0x080016d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80016c0:	f7ff fce2 	bl	8001088 <HAL_RCC_GetPCLK1Freq>
 80016c4:	61f8      	str	r0, [r7, #28]
        break;
 80016c6:	e010      	b.n	80016ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80016c8:	4b8f      	ldr	r3, [pc, #572]	@ (8001908 <UART_SetConfig+0x56c>)
 80016ca:	61fb      	str	r3, [r7, #28]
        break;
 80016cc:	e00d      	b.n	80016ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80016ce:	f7ff fc43 	bl	8000f58 <HAL_RCC_GetSysClockFreq>
 80016d2:	61f8      	str	r0, [r7, #28]
        break;
 80016d4:	e009      	b.n	80016ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80016d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016da:	61fb      	str	r3, [r7, #28]
        break;
 80016dc:	e005      	b.n	80016ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80016e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80fb 	beq.w	80018e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d305      	bcc.n	800170e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	429a      	cmp	r2, r3
 800170c:	d903      	bls.n	8001716 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001714:	e0e8      	b.n	80018e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	2200      	movs	r2, #0
 800171a:	461c      	mov	r4, r3
 800171c:	4615      	mov	r5, r2
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	022b      	lsls	r3, r5, #8
 8001728:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800172c:	0222      	lsls	r2, r4, #8
 800172e:	68f9      	ldr	r1, [r7, #12]
 8001730:	6849      	ldr	r1, [r1, #4]
 8001732:	0849      	lsrs	r1, r1, #1
 8001734:	2000      	movs	r0, #0
 8001736:	4688      	mov	r8, r1
 8001738:	4681      	mov	r9, r0
 800173a:	eb12 0a08 	adds.w	sl, r2, r8
 800173e:	eb43 0b09 	adc.w	fp, r3, r9
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001750:	4650      	mov	r0, sl
 8001752:	4659      	mov	r1, fp
 8001754:	f7fe fd3a 	bl	80001cc <__aeabi_uldivmod>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4613      	mov	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001766:	d308      	bcc.n	800177a <UART_SetConfig+0x3de>
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800176e:	d204      	bcs.n	800177a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	e0b6      	b.n	80018e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001780:	e0b2      	b.n	80018e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800178a:	d15e      	bne.n	800184a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800178c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001790:	2b08      	cmp	r3, #8
 8001792:	d828      	bhi.n	80017e6 <UART_SetConfig+0x44a>
 8001794:	a201      	add	r2, pc, #4	@ (adr r2, 800179c <UART_SetConfig+0x400>)
 8001796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179a:	bf00      	nop
 800179c:	080017c1 	.word	0x080017c1
 80017a0:	080017c9 	.word	0x080017c9
 80017a4:	080017d1 	.word	0x080017d1
 80017a8:	080017e7 	.word	0x080017e7
 80017ac:	080017d7 	.word	0x080017d7
 80017b0:	080017e7 	.word	0x080017e7
 80017b4:	080017e7 	.word	0x080017e7
 80017b8:	080017e7 	.word	0x080017e7
 80017bc:	080017df 	.word	0x080017df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80017c0:	f7ff fc62 	bl	8001088 <HAL_RCC_GetPCLK1Freq>
 80017c4:	61f8      	str	r0, [r7, #28]
        break;
 80017c6:	e014      	b.n	80017f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80017c8:	f7ff fc74 	bl	80010b4 <HAL_RCC_GetPCLK2Freq>
 80017cc:	61f8      	str	r0, [r7, #28]
        break;
 80017ce:	e010      	b.n	80017f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80017d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001908 <UART_SetConfig+0x56c>)
 80017d2:	61fb      	str	r3, [r7, #28]
        break;
 80017d4:	e00d      	b.n	80017f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80017d6:	f7ff fbbf 	bl	8000f58 <HAL_RCC_GetSysClockFreq>
 80017da:	61f8      	str	r0, [r7, #28]
        break;
 80017dc:	e009      	b.n	80017f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80017de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017e2:	61fb      	str	r3, [r7, #28]
        break;
 80017e4:	e005      	b.n	80017f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80017f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d077      	beq.n	80018e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005a      	lsls	r2, r3, #1
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	085b      	lsrs	r3, r3, #1
 8001802:	441a      	add	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	fbb2 f3f3 	udiv	r3, r2, r3
 800180c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d916      	bls.n	8001842 <UART_SetConfig+0x4a6>
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800181a:	d212      	bcs.n	8001842 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	b29b      	uxth	r3, r3
 8001820:	f023 030f 	bic.w	r3, r3, #15
 8001824:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	b29b      	uxth	r3, r3
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	b29a      	uxth	r2, r3
 8001832:	8afb      	ldrh	r3, [r7, #22]
 8001834:	4313      	orrs	r3, r2
 8001836:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	8afa      	ldrh	r2, [r7, #22]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	e052      	b.n	80018e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001848:	e04e      	b.n	80018e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800184a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800184e:	2b08      	cmp	r3, #8
 8001850:	d827      	bhi.n	80018a2 <UART_SetConfig+0x506>
 8001852:	a201      	add	r2, pc, #4	@ (adr r2, 8001858 <UART_SetConfig+0x4bc>)
 8001854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001858:	0800187d 	.word	0x0800187d
 800185c:	08001885 	.word	0x08001885
 8001860:	0800188d 	.word	0x0800188d
 8001864:	080018a3 	.word	0x080018a3
 8001868:	08001893 	.word	0x08001893
 800186c:	080018a3 	.word	0x080018a3
 8001870:	080018a3 	.word	0x080018a3
 8001874:	080018a3 	.word	0x080018a3
 8001878:	0800189b 	.word	0x0800189b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800187c:	f7ff fc04 	bl	8001088 <HAL_RCC_GetPCLK1Freq>
 8001880:	61f8      	str	r0, [r7, #28]
        break;
 8001882:	e014      	b.n	80018ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001884:	f7ff fc16 	bl	80010b4 <HAL_RCC_GetPCLK2Freq>
 8001888:	61f8      	str	r0, [r7, #28]
        break;
 800188a:	e010      	b.n	80018ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800188c:	4b1e      	ldr	r3, [pc, #120]	@ (8001908 <UART_SetConfig+0x56c>)
 800188e:	61fb      	str	r3, [r7, #28]
        break;
 8001890:	e00d      	b.n	80018ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001892:	f7ff fb61 	bl	8000f58 <HAL_RCC_GetSysClockFreq>
 8001896:	61f8      	str	r0, [r7, #28]
        break;
 8001898:	e009      	b.n	80018ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800189a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800189e:	61fb      	str	r3, [r7, #28]
        break;
 80018a0:	e005      	b.n	80018ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80018ac:	bf00      	nop
    }

    if (pclk != 0U)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d019      	beq.n	80018e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	085a      	lsrs	r2, r3, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	441a      	add	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b0f      	cmp	r3, #15
 80018cc:	d909      	bls.n	80018e2 <UART_SetConfig+0x546>
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d4:	d205      	bcs.n	80018e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	e002      	b.n	80018e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80018f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3728      	adds	r7, #40	@ 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001902:	bf00      	nop
 8001904:	40008000 	.word	0x40008000
 8001908:	00f42400 	.word	0x00f42400

0800190c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00a      	beq.n	8001936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00a      	beq.n	8001958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00a      	beq.n	800197a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00a      	beq.n	800199c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00a      	beq.n	80019be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00a      	beq.n	80019e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d01a      	beq.n	8001a22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a0a:	d10a      	bne.n	8001a22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00a      	beq.n	8001a44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	605a      	str	r2, [r3, #4]
  }
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b098      	sub	sp, #96	@ 0x60
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001a60:	f7fe fdba 	bl	80005d8 <HAL_GetTick>
 8001a64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d12e      	bne.n	8001ad2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f88c 	bl	8001ba0 <UART_WaitOnFlagUntilTimeout>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d021      	beq.n	8001ad2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a96:	e853 3f00 	ldrex	r3, [r3]
 8001a9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001aac:	647b      	str	r3, [r7, #68]	@ 0x44
 8001aae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ab0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001ab2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ab4:	e841 2300 	strex	r3, r2, [r1]
 8001ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1e6      	bne.n	8001a8e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e062      	b.n	8001b98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d149      	bne.n	8001b74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ae0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f856 	bl	8001ba0 <UART_WaitOnFlagUntilTimeout>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d03c      	beq.n	8001b74 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b02:	e853 3f00 	ldrex	r3, [r3]
 8001b06:	623b      	str	r3, [r7, #32]
   return(result);
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b20:	e841 2300 	strex	r3, r2, [r1]
 8001b24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1e6      	bne.n	8001afa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	3308      	adds	r3, #8
 8001b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	e853 3f00 	ldrex	r3, [r3]
 8001b3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	3308      	adds	r3, #8
 8001b4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b4c:	61fa      	str	r2, [r7, #28]
 8001b4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b50:	69b9      	ldr	r1, [r7, #24]
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	e841 2300 	strex	r3, r2, [r1]
 8001b58:	617b      	str	r3, [r7, #20]
   return(result);
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e5      	bne.n	8001b2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e011      	b.n	8001b98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2220      	movs	r2, #32
 8001b78:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3758      	adds	r7, #88	@ 0x58
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	4613      	mov	r3, r2
 8001bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bb0:	e049      	b.n	8001c46 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d045      	beq.n	8001c46 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bba:	f7fe fd0d 	bl	80005d8 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d302      	bcc.n	8001bd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e048      	b.n	8001c66 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d031      	beq.n	8001c46 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d110      	bne.n	8001c12 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f000 f8ff 	bl	8001dfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2208      	movs	r2, #8
 8001c02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e029      	b.n	8001c66 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c20:	d111      	bne.n	8001c46 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 f8e5 	bl	8001dfc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2220      	movs	r2, #32
 8001c36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e00f      	b.n	8001c66 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	69da      	ldr	r2, [r3, #28]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	bf0c      	ite	eq
 8001c56:	2301      	moveq	r3, #1
 8001c58:	2300      	movne	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d0a6      	beq.n	8001bb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b096      	sub	sp, #88	@ 0x58
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	88fa      	ldrh	r2, [r7, #6]
 8001c88:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2222      	movs	r2, #34	@ 0x22
 8001c98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d028      	beq.n	8001cf6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ca8:	4a3e      	ldr	r2, [pc, #248]	@ (8001da4 <UART_Start_Receive_DMA+0x134>)
 8001caa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cb0:	4a3d      	ldr	r2, [pc, #244]	@ (8001da8 <UART_Start_Receive_DMA+0x138>)
 8001cb2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8001dac <UART_Start_Receive_DMA+0x13c>)
 8001cba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	3324      	adds	r3, #36	@ 0x24
 8001cce:	4619      	mov	r1, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	f7fe fe54 	bl	8000984 <HAL_DMA_Start_IT>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2210      	movs	r2, #16
 8001ce6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2220      	movs	r2, #32
 8001cee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e051      	b.n	8001d9a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d018      	beq.n	8001d30 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d06:	e853 3f00 	ldrex	r3, [r3]
 8001d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d12:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d1e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d20:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001d22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d24:	e841 2300 	strex	r3, r2, [r1]
 8001d28:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8001d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1e6      	bne.n	8001cfe <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3308      	adds	r3, #8
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d3a:	e853 3f00 	ldrex	r3, [r3]
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	3308      	adds	r3, #8
 8001d4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001d50:	637a      	str	r2, [r7, #52]	@ 0x34
 8001d52:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d58:	e841 2300 	strex	r3, r2, [r1]
 8001d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e5      	bne.n	8001d30 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3308      	adds	r3, #8
 8001d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	e853 3f00 	ldrex	r3, [r3]
 8001d72:	613b      	str	r3, [r7, #16]
   return(result);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	3308      	adds	r3, #8
 8001d82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d84:	623a      	str	r2, [r7, #32]
 8001d86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d88:	69f9      	ldr	r1, [r7, #28]
 8001d8a:	6a3a      	ldr	r2, [r7, #32]
 8001d8c:	e841 2300 	strex	r3, r2, [r1]
 8001d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1e5      	bne.n	8001d64 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3758      	adds	r7, #88	@ 0x58
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	08001f7b 	.word	0x08001f7b
 8001da8:	080020a7 	.word	0x080020a7
 8001dac:	080020e5 	.word	0x080020e5

08001db0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	@ 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	e853 3f00 	ldrex	r3, [r3]
 8001dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dda:	6979      	ldr	r1, [r7, #20]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	e841 2300 	strex	r3, r2, [r1]
 8001de2:	613b      	str	r3, [r7, #16]
   return(result);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1e6      	bne.n	8001db8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2220      	movs	r2, #32
 8001dee:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8001df0:	bf00      	nop
 8001df2:	3724      	adds	r7, #36	@ 0x24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b095      	sub	sp, #84	@ 0x54
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e0c:	e853 3f00 	ldrex	r3, [r3]
 8001e10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e22:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001e28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e2a:	e841 2300 	strex	r3, r2, [r1]
 8001e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1e6      	bne.n	8001e04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3308      	adds	r3, #8
 8001e3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	e853 3f00 	ldrex	r3, [r3]
 8001e44:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	3308      	adds	r3, #8
 8001e54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e5e:	e841 2300 	strex	r3, r2, [r1]
 8001e62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1e5      	bne.n	8001e36 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d118      	bne.n	8001ea4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	e853 3f00 	ldrex	r3, [r3]
 8001e7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f023 0310 	bic.w	r3, r3, #16
 8001e86:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e94:	6979      	ldr	r1, [r7, #20]
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	e841 2300 	strex	r3, r2, [r1]
 8001e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1e6      	bne.n	8001e72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8001eb8:	bf00      	nop
 8001eba:	3754      	adds	r7, #84	@ 0x54
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b090      	sub	sp, #64	@ 0x40
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d137      	bne.n	8001f50 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8001ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3308      	adds	r3, #8
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	e853 3f00 	ldrex	r3, [r3]
 8001ef6:	623b      	str	r3, [r7, #32]
   return(result);
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001efe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3308      	adds	r3, #8
 8001f06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f08:	633a      	str	r2, [r7, #48]	@ 0x30
 8001f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001f0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f10:	e841 2300 	strex	r3, r2, [r1]
 8001f14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1e5      	bne.n	8001ee8 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	e853 3f00 	ldrex	r3, [r3]
 8001f28:	60fb      	str	r3, [r7, #12]
   return(result);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f3e:	69b9      	ldr	r1, [r7, #24]
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	e841 2300 	strex	r3, r2, [r1]
 8001f46:	617b      	str	r3, [r7, #20]
   return(result);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1e6      	bne.n	8001f1c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001f4e:	e002      	b.n	8001f56 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8001f50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001f52:	f7ff f9e5 	bl	8001320 <HAL_UART_TxCpltCallback>
}
 8001f56:	bf00      	nop
 8001f58:	3740      	adds	r7, #64	@ 0x40
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7ff f9e1 	bl	8001334 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b09c      	sub	sp, #112	@ 0x70
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f86:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0320 	and.w	r3, r3, #32
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d171      	bne.n	800207a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8001f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fa6:	e853 3f00 	ldrex	r3, [r3]
 8001faa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001fac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001fb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001fbe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001fc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001fc4:	e841 2300 	strex	r3, r2, [r1]
 8001fc8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001fca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1e6      	bne.n	8001f9e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3308      	adds	r3, #8
 8001fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fda:	e853 3f00 	ldrex	r3, [r3]
 8001fde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	667b      	str	r3, [r7, #100]	@ 0x64
 8001fe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	3308      	adds	r3, #8
 8001fee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001ff0:	647a      	str	r2, [r7, #68]	@ 0x44
 8001ff2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001ff6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ff8:	e841 2300 	strex	r3, r2, [r1]
 8001ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1e5      	bne.n	8001fd0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002004:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3308      	adds	r3, #8
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800200c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200e:	e853 3f00 	ldrex	r3, [r3]
 8002012:	623b      	str	r3, [r7, #32]
   return(result);
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800201a:	663b      	str	r3, [r7, #96]	@ 0x60
 800201c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3308      	adds	r3, #8
 8002022:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002024:	633a      	str	r2, [r7, #48]	@ 0x30
 8002026:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002028:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800202a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800202c:	e841 2300 	strex	r3, r2, [r1]
 8002030:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1e5      	bne.n	8002004 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800203a:	2220      	movs	r2, #32
 800203c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002040:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002044:	2b01      	cmp	r3, #1
 8002046:	d118      	bne.n	800207a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002048:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	e853 3f00 	ldrex	r3, [r3]
 8002054:	60fb      	str	r3, [r7, #12]
   return(result);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f023 0310 	bic.w	r3, r3, #16
 800205c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800205e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800206a:	69b9      	ldr	r1, [r7, #24]
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	e841 2300 	strex	r3, r2, [r1]
 8002072:	617b      	str	r3, [r7, #20]
   return(result);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1e6      	bne.n	8002048 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800207a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800207c:	2200      	movs	r2, #0
 800207e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002080:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002084:	2b01      	cmp	r3, #1
 8002086:	d107      	bne.n	8002098 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002088:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800208a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800208e:	4619      	mov	r1, r3
 8002090:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002092:	f7ff f977 	bl	8001384 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002096:	e002      	b.n	800209e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002098:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800209a:	f7ff f955 	bl	8001348 <HAL_UART_RxCpltCallback>
}
 800209e:	bf00      	nop
 80020a0:	3770      	adds	r7, #112	@ 0x70
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d109      	bne.n	80020d6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80020c8:	085b      	lsrs	r3, r3, #1
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	4619      	mov	r1, r3
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f7ff f958 	bl	8001384 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80020d4:	e002      	b.n	80020dc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f7ff f940 	bl	800135c <HAL_UART_RxHalfCpltCallback>
}
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020f6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210a:	2b80      	cmp	r3, #128	@ 0x80
 800210c:	d109      	bne.n	8002122 <UART_DMAError+0x3e>
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	2b21      	cmp	r3, #33	@ 0x21
 8002112:	d106      	bne.n	8002122 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2200      	movs	r2, #0
 8002118:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800211c:	6978      	ldr	r0, [r7, #20]
 800211e:	f7ff fe47 	bl	8001db0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800212c:	2b40      	cmp	r3, #64	@ 0x40
 800212e:	d109      	bne.n	8002144 <UART_DMAError+0x60>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b22      	cmp	r3, #34	@ 0x22
 8002134:	d106      	bne.n	8002144 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2200      	movs	r2, #0
 800213a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800213e:	6978      	ldr	r0, [r7, #20]
 8002140:	f7ff fe5c 	bl	8001dfc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800214a:	f043 0210 	orr.w	r2, r3, #16
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002154:	6978      	ldr	r0, [r7, #20]
 8002156:	f7ff f90b 	bl	8001370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800215a:	bf00      	nop
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <main>:
void Error_Handler(void);



int main()
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	HAL_Init();
 8002168:	f7fe f9c6 	bl	80004f8 <HAL_Init>
	uart_init();
 800216c:	f000 f814 	bl	8002198 <uart_init>
	led_init();
 8002170:	f000 f8de 	bl	8002330 <led_init>

	HAL_UART_Transmit_DMA(&huart1, tx_buiffer, 10);
 8002174:	220a      	movs	r2, #10
 8002176:	4905      	ldr	r1, [pc, #20]	@ (800218c <main+0x28>)
 8002178:	4805      	ldr	r0, [pc, #20]	@ (8002190 <main+0x2c>)
 800217a:	f7ff f809 	bl	8001190 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&huart1, rx_buffer, 10);
 800217e:	220a      	movs	r2, #10
 8002180:	4904      	ldr	r1, [pc, #16]	@ (8002194 <main+0x30>)
 8002182:	4803      	ldr	r0, [pc, #12]	@ (8002190 <main+0x2c>)
 8002184:	f7ff f880 	bl	8001288 <HAL_UART_Receive_DMA>
	while(1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <main+0x24>
 800218c:	20000008 	.word	0x20000008
 8002190:	20000038 	.word	0x20000038
 8002194:	20000150 	.word	0x20000150

08002198 <uart_init>:

	}
}

void uart_init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
 80021ac:	611a      	str	r2, [r3, #16]
	//Enable clock for UART pins
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	4b59      	ldr	r3, [pc, #356]	@ (8002314 <uart_init+0x17c>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b2:	4a58      	ldr	r2, [pc, #352]	@ (8002314 <uart_init+0x17c>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ba:	4b56      	ldr	r3, [pc, #344]	@ (8002314 <uart_init+0x17c>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]

	//Enable UART module clock access
	__HAL_RCC_USART1_CLK_ENABLE();
 80021c6:	4b53      	ldr	r3, [pc, #332]	@ (8002314 <uart_init+0x17c>)
 80021c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ca:	4a52      	ldr	r2, [pc, #328]	@ (8002314 <uart_init+0x17c>)
 80021cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80021d2:	4b50      	ldr	r3, [pc, #320]	@ (8002314 <uart_init+0x17c>)
 80021d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]

	//Configure GPIO pins as alternate functionality pins for UART2
	GPIO_InitStruct.Pin   = GPIO_PIN_9 | GPIO_PIN_10;
 80021de:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80021e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ec:	2303      	movs	r3, #3
 80021ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021f0:	2307      	movs	r3, #7
 80021f2:	61fb      	str	r3, [r7, #28]

	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f107 030c 	add.w	r3, r7, #12
 80021f8:	4619      	mov	r1, r3
 80021fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021fe:	f7fe fd01 	bl	8000c04 <HAL_GPIO_Init>


	 __HAL_RCC_DMA1_CLK_ENABLE();
 8002202:	4b44      	ldr	r3, [pc, #272]	@ (8002314 <uart_init+0x17c>)
 8002204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002206:	4a43      	ldr	r2, [pc, #268]	@ (8002314 <uart_init+0x17c>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6493      	str	r3, [r2, #72]	@ 0x48
 800220e:	4b41      	ldr	r3, [pc, #260]	@ (8002314 <uart_init+0x17c>)
 8002210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
	  huart1.Instance = USART1;
 800221a:	4b3f      	ldr	r3, [pc, #252]	@ (8002318 <uart_init+0x180>)
 800221c:	4a3f      	ldr	r2, [pc, #252]	@ (800231c <uart_init+0x184>)
 800221e:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate = 115200;
 8002220:	4b3d      	ldr	r3, [pc, #244]	@ (8002318 <uart_init+0x180>)
 8002222:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002226:	605a      	str	r2, [r3, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002228:	4b3b      	ldr	r3, [pc, #236]	@ (8002318 <uart_init+0x180>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 800222e:	4b3a      	ldr	r3, [pc, #232]	@ (8002318 <uart_init+0x180>)
 8002230:	2200      	movs	r2, #0
 8002232:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 8002234:	4b38      	ldr	r3, [pc, #224]	@ (8002318 <uart_init+0x180>)
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 800223a:	4b37      	ldr	r3, [pc, #220]	@ (8002318 <uart_init+0x180>)
 800223c:	220c      	movs	r2, #12
 800223e:	615a      	str	r2, [r3, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002240:	4b35      	ldr	r3, [pc, #212]	@ (8002318 <uart_init+0x180>)
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002246:	4b34      	ldr	r3, [pc, #208]	@ (8002318 <uart_init+0x180>)
 8002248:	2200      	movs	r2, #0
 800224a:	61da      	str	r2, [r3, #28]
	  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800224c:	4b32      	ldr	r3, [pc, #200]	@ (8002318 <uart_init+0x180>)
 800224e:	2200      	movs	r2, #0
 8002250:	621a      	str	r2, [r3, #32]
	  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002252:	4b31      	ldr	r3, [pc, #196]	@ (8002318 <uart_init+0x180>)
 8002254:	2200      	movs	r2, #0
 8002256:	625a      	str	r2, [r3, #36]	@ 0x24


	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002258:	482f      	ldr	r0, [pc, #188]	@ (8002318 <uart_init+0x180>)
 800225a:	f7fe ff41 	bl	80010e0 <HAL_UART_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <uart_init+0xd0>
	  {
	    Error_Handler();
 8002264:	f000 f8a8 	bl	80023b8 <Error_Handler>
	  }

	  hdma_usart1_rx.Instance=DMA1_Channel5;
 8002268:	4b2d      	ldr	r3, [pc, #180]	@ (8002320 <uart_init+0x188>)
 800226a:	4a2e      	ldr	r2, [pc, #184]	@ (8002324 <uart_init+0x18c>)
 800226c:	601a      	str	r2, [r3, #0]
	  hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800226e:	4b2c      	ldr	r3, [pc, #176]	@ (8002320 <uart_init+0x188>)
 8002270:	2202      	movs	r2, #2
 8002272:	605a      	str	r2, [r3, #4]
	  hdma_usart1_rx.Init.Direction=DMA_PERIPH_TO_MEMORY;
 8002274:	4b2a      	ldr	r3, [pc, #168]	@ (8002320 <uart_init+0x188>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
	  hdma_usart1_rx.Init.PeriphInc=DMA_PINC_DISABLE;
 800227a:	4b29      	ldr	r3, [pc, #164]	@ (8002320 <uart_init+0x188>)
 800227c:	2200      	movs	r2, #0
 800227e:	60da      	str	r2, [r3, #12]
	  hdma_usart1_rx.Init.MemInc=DMA_MINC_ENABLE;
 8002280:	4b27      	ldr	r3, [pc, #156]	@ (8002320 <uart_init+0x188>)
 8002282:	2280      	movs	r2, #128	@ 0x80
 8002284:	611a      	str	r2, [r3, #16]
	  hdma_usart1_rx.Init.PeriphDataAlignment=DMA_PDATAALIGN_BYTE;
 8002286:	4b26      	ldr	r3, [pc, #152]	@ (8002320 <uart_init+0x188>)
 8002288:	2200      	movs	r2, #0
 800228a:	615a      	str	r2, [r3, #20]
	  hdma_usart1_rx.Init.MemDataAlignment=DMA_MDATAALIGN_BYTE;
 800228c:	4b24      	ldr	r3, [pc, #144]	@ (8002320 <uart_init+0x188>)
 800228e:	2200      	movs	r2, #0
 8002290:	619a      	str	r2, [r3, #24]
	  hdma_usart1_rx.Init.Mode=DMA_NORMAL;
 8002292:	4b23      	ldr	r3, [pc, #140]	@ (8002320 <uart_init+0x188>)
 8002294:	2200      	movs	r2, #0
 8002296:	61da      	str	r2, [r3, #28]
	  hdma_usart1_rx.Init.Priority=DMA_PRIORITY_LOW;
 8002298:	4b21      	ldr	r3, [pc, #132]	@ (8002320 <uart_init+0x188>)
 800229a:	2200      	movs	r2, #0
 800229c:	621a      	str	r2, [r3, #32]

	  HAL_DMA_Init(&hdma_usart1_rx);
 800229e:	4820      	ldr	r0, [pc, #128]	@ (8002320 <uart_init+0x188>)
 80022a0:	f7fe fab8 	bl	8000814 <HAL_DMA_Init>

	  //link uart1 rx to dma
	  huart1.hdmarx = &hdma_usart1_rx;
 80022a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002318 <uart_init+0x180>)
 80022a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002320 <uart_init+0x188>)
 80022a8:	675a      	str	r2, [r3, #116]	@ 0x74

	  hdma_usart1_tx.Instance=DMA1_Channel4;
 80022aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002328 <uart_init+0x190>)
 80022ac:	4a1f      	ldr	r2, [pc, #124]	@ (800232c <uart_init+0x194>)
 80022ae:	601a      	str	r2, [r3, #0]
	  hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80022b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002328 <uart_init+0x190>)
 80022b2:	2202      	movs	r2, #2
 80022b4:	605a      	str	r2, [r3, #4]
	  hdma_usart1_tx.Init.Direction=DMA_MEMORY_TO_PERIPH;
 80022b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002328 <uart_init+0x190>)
 80022b8:	2210      	movs	r2, #16
 80022ba:	609a      	str	r2, [r3, #8]
	  hdma_usart1_tx.Init.PeriphInc=DMA_PINC_DISABLE;
 80022bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002328 <uart_init+0x190>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
	  hdma_usart1_tx.Init.MemInc=DMA_MINC_ENABLE;
 80022c2:	4b19      	ldr	r3, [pc, #100]	@ (8002328 <uart_init+0x190>)
 80022c4:	2280      	movs	r2, #128	@ 0x80
 80022c6:	611a      	str	r2, [r3, #16]
	  hdma_usart1_tx.Init.PeriphDataAlignment=DMA_PDATAALIGN_BYTE;
 80022c8:	4b17      	ldr	r3, [pc, #92]	@ (8002328 <uart_init+0x190>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	615a      	str	r2, [r3, #20]
	  hdma_usart1_tx.Init.MemDataAlignment=DMA_MDATAALIGN_BYTE;
 80022ce:	4b16      	ldr	r3, [pc, #88]	@ (8002328 <uart_init+0x190>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
	  hdma_usart1_tx.Init.Mode=DMA_NORMAL;
 80022d4:	4b14      	ldr	r3, [pc, #80]	@ (8002328 <uart_init+0x190>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]
	  hdma_usart1_tx.Init.Priority=DMA_PRIORITY_LOW;
 80022da:	4b13      	ldr	r3, [pc, #76]	@ (8002328 <uart_init+0x190>)
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]

	  HAL_DMA_Init(&hdma_usart1_tx);
 80022e0:	4811      	ldr	r0, [pc, #68]	@ (8002328 <uart_init+0x190>)
 80022e2:	f7fe fa97 	bl	8000814 <HAL_DMA_Init>

	  	  //link uart1 rx to dma
	  huart1.hdmatx = &hdma_usart1_tx;
 80022e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002318 <uart_init+0x180>)
 80022e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002328 <uart_init+0x190>)
 80022ea:	671a      	str	r2, [r3, #112]	@ 0x70
	  //DMA1_Channel4_IRQn configuration
	  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	200e      	movs	r0, #14
 80022f2:	f7fe fa58 	bl	80007a6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80022f6:	200e      	movs	r0, #14
 80022f8:	f7fe fa71 	bl	80007de <HAL_NVIC_EnableIRQ>

      //DMA1_Channel5_IRQn configuration
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	200f      	movs	r0, #15
 8002302:	f7fe fa50 	bl	80007a6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002306:	200f      	movs	r0, #15
 8002308:	f7fe fa69 	bl	80007de <HAL_NVIC_EnableIRQ>


}
 800230c:	bf00      	nop
 800230e:	3720      	adds	r7, #32
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	20000038 	.word	0x20000038
 800231c:	40013800 	.word	0x40013800
 8002320:	20000108 	.word	0x20000108
 8002324:	40020058 	.word	0x40020058
 8002328:	200000c0 	.word	0x200000c0
 800232c:	40020044 	.word	0x40020044

08002330 <led_init>:
void led_init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
	//1. Configure PA5 as GPIO output for LED
	//Enable Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002344:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <led_init+0x50>)
 8002346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002348:	4a0d      	ldr	r2, [pc, #52]	@ (8002380 <led_init+0x50>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002350:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <led_init+0x50>)
 8002352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = LED_PIN;
 800235c:	2320      	movs	r3, #32
 800235e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002360:	2301      	movs	r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	4619      	mov	r1, r3
 8002370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002374:	f7fe fc46 	bl	8000c04 <HAL_GPIO_Init>
}
 8002378:	bf00      	nop
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000

08002384 <DMA1_CH4_IRQHandler>:


void DMA1_CH4_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002388:	4802      	ldr	r0, [pc, #8]	@ (8002394 <DMA1_CH4_IRQHandler+0x10>)
 800238a:	f7fe fb5b 	bl	8000a44 <HAL_DMA_IRQHandler>
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200000c0 	.word	0x200000c0

08002398 <DMA1_CH5_IRQHandler>:
void DMA1_CH5_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800239c:	4802      	ldr	r0, [pc, #8]	@ (80023a8 <DMA1_CH5_IRQHandler+0x10>)
 800239e:	f7fe fb51 	bl	8000a44 <HAL_DMA_IRQHandler>
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000108 	.word	0x20000108

080023ac <SysTick_Handler>:
void SysTick_Handler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80023b0:	f7fe f8fe 	bl	80005b0 <HAL_IncTick>
}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <Error_Handler>:
void Error_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0

}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023c8:	480d      	ldr	r0, [pc, #52]	@ (8002400 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d0:	480c      	ldr	r0, [pc, #48]	@ (8002404 <LoopForever+0x6>)
  ldr r1, =_edata
 80023d2:	490d      	ldr	r1, [pc, #52]	@ (8002408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023d4:	4a0d      	ldr	r2, [pc, #52]	@ (800240c <LoopForever+0xe>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d8:	e002      	b.n	80023e0 <LoopCopyDataInit>

080023da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023de:	3304      	adds	r3, #4

080023e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e4:	d3f9      	bcc.n	80023da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002414 <LoopForever+0x16>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ec:	e001      	b.n	80023f2 <LoopFillZerobss>

080023ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f0:	3204      	adds	r2, #4

080023f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f4:	d3fb      	bcc.n	80023ee <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80023f6:	f000 f811 	bl	800241c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80023fa:	f7ff feb3 	bl	8002164 <main>

080023fe <LoopForever>:

LoopForever:
  b LoopForever
 80023fe:	e7fe      	b.n	80023fe <LoopForever>
  ldr   r0, =_estack
 8002400:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002408:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800240c:	080024c4 	.word	0x080024c4
  ldr r2, =_sbss
 8002410:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002414:	2000015c 	.word	0x2000015c

08002418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002418:	e7fe      	b.n	8002418 <ADC1_2_IRQHandler>
	...

0800241c <__libc_init_array>:
 800241c:	b570      	push	{r4, r5, r6, lr}
 800241e:	4d0d      	ldr	r5, [pc, #52]	@ (8002454 <__libc_init_array+0x38>)
 8002420:	4c0d      	ldr	r4, [pc, #52]	@ (8002458 <__libc_init_array+0x3c>)
 8002422:	1b64      	subs	r4, r4, r5
 8002424:	10a4      	asrs	r4, r4, #2
 8002426:	2600      	movs	r6, #0
 8002428:	42a6      	cmp	r6, r4
 800242a:	d109      	bne.n	8002440 <__libc_init_array+0x24>
 800242c:	4d0b      	ldr	r5, [pc, #44]	@ (800245c <__libc_init_array+0x40>)
 800242e:	4c0c      	ldr	r4, [pc, #48]	@ (8002460 <__libc_init_array+0x44>)
 8002430:	f000 f818 	bl	8002464 <_init>
 8002434:	1b64      	subs	r4, r4, r5
 8002436:	10a4      	asrs	r4, r4, #2
 8002438:	2600      	movs	r6, #0
 800243a:	42a6      	cmp	r6, r4
 800243c:	d105      	bne.n	800244a <__libc_init_array+0x2e>
 800243e:	bd70      	pop	{r4, r5, r6, pc}
 8002440:	f855 3b04 	ldr.w	r3, [r5], #4
 8002444:	4798      	blx	r3
 8002446:	3601      	adds	r6, #1
 8002448:	e7ee      	b.n	8002428 <__libc_init_array+0xc>
 800244a:	f855 3b04 	ldr.w	r3, [r5], #4
 800244e:	4798      	blx	r3
 8002450:	3601      	adds	r6, #1
 8002452:	e7f2      	b.n	800243a <__libc_init_array+0x1e>
 8002454:	080024bc 	.word	0x080024bc
 8002458:	080024bc 	.word	0x080024bc
 800245c:	080024bc 	.word	0x080024bc
 8002460:	080024c0 	.word	0x080024c0

08002464 <_init>:
 8002464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002466:	bf00      	nop
 8002468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800246a:	bc08      	pop	{r3}
 800246c:	469e      	mov	lr, r3
 800246e:	4770      	bx	lr

08002470 <_fini>:
 8002470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002472:	bf00      	nop
 8002474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002476:	bc08      	pop	{r3}
 8002478:	469e      	mov	lr, r3
 800247a:	4770      	bx	lr
