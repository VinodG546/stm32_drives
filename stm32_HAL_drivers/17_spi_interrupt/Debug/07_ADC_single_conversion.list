
07_ADC_single_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d10  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001e9c  08001e9c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001e9c  08001e9c  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001e9c  08001e9c  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001e9c  08001e9c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e9c  08001e9c  00002e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ea0  08001ea0  00002ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001ea4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          000000d4  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e0  200000e0  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b9c7  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017c9  00000000  00000000  0000ea03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  000101d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b8  00000000  00000000  00010e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001337  00000000  00000000  00011818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc12  00000000  00000000  00012b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb80c  00000000  00000000  00020761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011bf6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003640  00000000  00000000  0011bfb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0011f5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001e84 	.word	0x08001e84

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08001e84 	.word	0x08001e84

080001cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d6:	2003      	movs	r0, #3
 80001d8:	f001 fa26 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001dc:	200f      	movs	r0, #15
 80001de:	f000 f815 	bl	800020c <HAL_InitTick>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e8:	2301      	movs	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e001      	b.n	80001f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ee:	f000 f805 	bl	80001fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
	...

0800020c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000214:	2300      	movs	r3, #0
 8000216:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000218:	4b17      	ldr	r3, [pc, #92]	@ (8000278 <HAL_InitTick+0x6c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d023      	beq.n	8000268 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000220:	4b16      	ldr	r3, [pc, #88]	@ (800027c <HAL_InitTick+0x70>)
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b14      	ldr	r3, [pc, #80]	@ (8000278 <HAL_InitTick+0x6c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	4619      	mov	r1, r3
 800022a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800022e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000232:	fbb2 f3f3 	udiv	r3, r2, r3
 8000236:	4618      	mov	r0, r3
 8000238:	f001 fa1d 	bl	8001676 <HAL_SYSTICK_Config>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d10f      	bne.n	8000262 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b0f      	cmp	r3, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	2200      	movs	r2, #0
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f001 f9f5 	bl	800163e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000254:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <HAL_InitTick+0x74>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	6013      	str	r3, [r2, #0]
 800025a:	e007      	b.n	800026c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800025c:	2301      	movs	r3, #1
 800025e:	73fb      	strb	r3, [r7, #15]
 8000260:	e004      	b.n	800026c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	e001      	b.n	800026c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000268:	2301      	movs	r3, #1
 800026a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000004 	.word	0x20000004
 800027c:	20000008 	.word	0x20000008
 8000280:	20000000 	.word	0x20000000

08000284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <HAL_IncTick+0x20>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	461a      	mov	r2, r3
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <HAL_IncTick+0x24>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4413      	add	r3, r2
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <HAL_IncTick+0x24>)
 8000296:	6013      	str	r3, [r2, #0]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000004 	.word	0x20000004
 80002a8:	20000028 	.word	0x20000028

080002ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  return uwTick;
 80002b0:	4b03      	ldr	r3, [pc, #12]	@ (80002c0 <HAL_GetTick+0x14>)
 80002b2:	681b      	ldr	r3, [r3, #0]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	20000028 	.word	0x20000028

080002c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	431a      	orrs	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	609a      	str	r2, [r3, #8]
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr

080002ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80002ea:	b480      	push	{r7}
 80002ec:	b083      	sub	sp, #12
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
 80002f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	431a      	orrs	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	609a      	str	r2, [r3, #8]
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000320:	4618      	mov	r0, r3
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800032c:	b480      	push	{r7}
 800032e:	b087      	sub	sp, #28
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]
 8000338:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	3360      	adds	r3, #96	@ 0x60
 800033e:	461a      	mov	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	4413      	add	r3, r2
 8000346:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	4b08      	ldr	r3, [pc, #32]	@ (8000370 <LL_ADC_SetOffset+0x44>)
 800034e:	4013      	ands	r3, r2
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000356:	683a      	ldr	r2, [r7, #0]
 8000358:	430a      	orrs	r2, r1
 800035a:	4313      	orrs	r3, r2
 800035c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000364:	bf00      	nop
 8000366:	371c      	adds	r7, #28
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	03fff000 	.word	0x03fff000

08000374 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	3360      	adds	r3, #96	@ 0x60
 8000382:	461a      	mov	r2, r3
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	4413      	add	r3, r2
 800038a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000394:	4618      	mov	r0, r3
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b087      	sub	sp, #28
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	3360      	adds	r3, #96	@ 0x60
 80003b0:	461a      	mov	r2, r3
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	4413      	add	r3, r2
 80003b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	431a      	orrs	r2, r3
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80003ca:	bf00      	nop
 80003cc:	371c      	adds	r7, #28
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b083      	sub	sp, #12
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d101      	bne.n	80003ee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80003ea:	2301      	movs	r3, #1
 80003ec:	e000      	b.n	80003f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80003ee:	2300      	movs	r3, #0
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b087      	sub	sp, #28
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	3330      	adds	r3, #48	@ 0x30
 800040c:	461a      	mov	r2, r3
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	0a1b      	lsrs	r3, r3, #8
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	f003 030c 	and.w	r3, r3, #12
 8000418:	4413      	add	r3, r2
 800041a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	f003 031f 	and.w	r3, r3, #31
 8000426:	211f      	movs	r1, #31
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	43db      	mvns	r3, r3
 800042e:	401a      	ands	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	0e9b      	lsrs	r3, r3, #26
 8000434:	f003 011f 	and.w	r1, r3, #31
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	f003 031f 	and.w	r3, r3, #31
 800043e:	fa01 f303 	lsl.w	r3, r1, r3
 8000442:	431a      	orrs	r2, r3
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000448:	bf00      	nop
 800044a:	371c      	adds	r7, #28
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000454:	b480      	push	{r7}
 8000456:	b087      	sub	sp, #28
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	3314      	adds	r3, #20
 8000464:	461a      	mov	r2, r3
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	0e5b      	lsrs	r3, r3, #25
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	4413      	add	r3, r2
 8000472:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	0d1b      	lsrs	r3, r3, #20
 800047c:	f003 031f 	and.w	r3, r3, #31
 8000480:	2107      	movs	r1, #7
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	43db      	mvns	r3, r3
 8000488:	401a      	ands	r2, r3
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	0d1b      	lsrs	r3, r3, #20
 800048e:	f003 031f 	and.w	r3, r3, #31
 8000492:	6879      	ldr	r1, [r7, #4]
 8000494:	fa01 f303 	lsl.w	r3, r1, r3
 8000498:	431a      	orrs	r2, r3
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800049e:	bf00      	nop
 80004a0:	371c      	adds	r7, #28
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
	...

080004ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80004c4:	43db      	mvns	r3, r3
 80004c6:	401a      	ands	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f003 0318 	and.w	r3, r3, #24
 80004ce:	4908      	ldr	r1, [pc, #32]	@ (80004f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80004d0:	40d9      	lsrs	r1, r3
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	400b      	ands	r3, r1
 80004d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80004da:	431a      	orrs	r2, r3
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	0007ffff 	.word	0x0007ffff

080004f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	f003 031f 	and.w	r3, r3, #31
}
 8000504:	4618      	mov	r0, r3
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000520:	4618      	mov	r0, r3
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800053c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	6093      	str	r3, [r2, #8]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000564:	d101      	bne.n	800056a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000566:	2301      	movs	r3, #1
 8000568:	e000      	b.n	800056c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800056a:	2300      	movs	r3, #0
}
 800056c:	4618      	mov	r0, r3
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000588:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800058c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80005b4:	d101      	bne.n	80005ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80005b6:	2301      	movs	r3, #1
 80005b8:	e000      	b.n	80005bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80005ba:	2300      	movs	r3, #0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80005d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80005dc:	f043 0202 	orr.w	r2, r3, #2
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	2b01      	cmp	r3, #1
 8000602:	d101      	bne.n	8000608 <LL_ADC_IsEnabled+0x18>
 8000604:	2301      	movs	r3, #1
 8000606:	e000      	b.n	800060a <LL_ADC_IsEnabled+0x1a>
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000616:	b480      	push	{r7}
 8000618:	b083      	sub	sp, #12
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	2b02      	cmp	r3, #2
 8000628:	d101      	bne.n	800062e <LL_ADC_IsDisableOngoing+0x18>
 800062a:	2301      	movs	r3, #1
 800062c:	e000      	b.n	8000630 <LL_ADC_IsDisableOngoing+0x1a>
 800062e:	2300      	movs	r3, #0
}
 8000630:	4618      	mov	r0, r3
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	f003 0304 	and.w	r3, r3, #4
 800064c:	2b04      	cmp	r3, #4
 800064e:	d101      	bne.n	8000654 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000650:	2301      	movs	r3, #1
 8000652:	e000      	b.n	8000656 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	f003 0308 	and.w	r3, r3, #8
 8000672:	2b08      	cmp	r3, #8
 8000674:	d101      	bne.n	800067a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000676:	2301      	movs	r3, #1
 8000678:	e000      	b.n	800067c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b089      	sub	sp, #36	@ 0x24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000690:	2300      	movs	r3, #0
 8000692:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d101      	bne.n	80006a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e130      	b.n	8000904 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	691b      	ldr	r3, [r3, #16]
 80006a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d109      	bne.n	80006c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 f939 	bl	8000928 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2200      	movs	r2, #0
 80006c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff41 	bl	8000550 <LL_ADC_IsDeepPowerDownEnabled>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d004      	beq.n	80006de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff27 	bl	800052c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff5c 	bl	80005a0 <LL_ADC_IsInternalRegulatorEnabled>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d115      	bne.n	800071a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff40 	bl	8000578 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80006f8:	4b84      	ldr	r3, [pc, #528]	@ (800090c <HAL_ADC_Init+0x284>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	099b      	lsrs	r3, r3, #6
 80006fe:	4a84      	ldr	r2, [pc, #528]	@ (8000910 <HAL_ADC_Init+0x288>)
 8000700:	fba2 2303 	umull	r2, r3, r2, r3
 8000704:	099b      	lsrs	r3, r3, #6
 8000706:	3301      	adds	r3, #1
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800070c:	e002      	b.n	8000714 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3b01      	subs	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1f9      	bne.n	800070e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff3e 	bl	80005a0 <LL_ADC_IsInternalRegulatorEnabled>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d10d      	bne.n	8000746 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800072e:	f043 0210 	orr.w	r2, r3, #16
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800073a:	f043 0201 	orr.w	r2, r3, #1
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff76 	bl	800063c <LL_ADC_REG_IsConversionOngoing>
 8000750:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000756:	f003 0310 	and.w	r3, r3, #16
 800075a:	2b00      	cmp	r3, #0
 800075c:	f040 80c9 	bne.w	80008f2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	2b00      	cmp	r3, #0
 8000764:	f040 80c5 	bne.w	80008f2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800076c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000770:	f043 0202 	orr.w	r2, r3, #2
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff37 	bl	80005f0 <LL_ADC_IsEnabled>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d115      	bne.n	80007b4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000788:	4862      	ldr	r0, [pc, #392]	@ (8000914 <HAL_ADC_Init+0x28c>)
 800078a:	f7ff ff31 	bl	80005f0 <LL_ADC_IsEnabled>
 800078e:	4604      	mov	r4, r0
 8000790:	4861      	ldr	r0, [pc, #388]	@ (8000918 <HAL_ADC_Init+0x290>)
 8000792:	f7ff ff2d 	bl	80005f0 <LL_ADC_IsEnabled>
 8000796:	4603      	mov	r3, r0
 8000798:	431c      	orrs	r4, r3
 800079a:	4860      	ldr	r0, [pc, #384]	@ (800091c <HAL_ADC_Init+0x294>)
 800079c:	f7ff ff28 	bl	80005f0 <LL_ADC_IsEnabled>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4323      	orrs	r3, r4
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d105      	bne.n	80007b4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	4619      	mov	r1, r3
 80007ae:	485c      	ldr	r0, [pc, #368]	@ (8000920 <HAL_ADC_Init+0x298>)
 80007b0:	f7ff fd88 	bl	80002c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	7e5b      	ldrb	r3, [r3, #25]
 80007b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80007be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80007c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80007ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80007d4:	4313      	orrs	r3, r2
 80007d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d106      	bne.n	80007f0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007e6:	3b01      	subs	r3, #1
 80007e8:	045b      	lsls	r3, r3, #17
 80007ea:	69ba      	ldr	r2, [r7, #24]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d009      	beq.n	800080c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007fc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000804:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000806:	69ba      	ldr	r2, [r7, #24]
 8000808:	4313      	orrs	r3, r2
 800080a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68da      	ldr	r2, [r3, #12]
 8000812:	4b44      	ldr	r3, [pc, #272]	@ (8000924 <HAL_ADC_Init+0x29c>)
 8000814:	4013      	ands	r3, r2
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	6812      	ldr	r2, [r2, #0]
 800081a:	69b9      	ldr	r1, [r7, #24]
 800081c:	430b      	orrs	r3, r1
 800081e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff1c 	bl	8000662 <LL_ADC_INJ_IsConversionOngoing>
 800082a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d13d      	bne.n	80008ae <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d13a      	bne.n	80008ae <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800083c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000844:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000846:	4313      	orrs	r3, r2
 8000848:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000854:	f023 0302 	bic.w	r3, r3, #2
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	6812      	ldr	r2, [r2, #0]
 800085c:	69b9      	ldr	r1, [r7, #24]
 800085e:	430b      	orrs	r3, r1
 8000860:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000868:	2b01      	cmp	r3, #1
 800086a:	d118      	bne.n	800089e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	691b      	ldr	r3, [r3, #16]
 8000872:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000876:	f023 0304 	bic.w	r3, r3, #4
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000882:	4311      	orrs	r1, r2
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000888:	4311      	orrs	r1, r2
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800088e:	430a      	orrs	r2, r1
 8000890:	431a      	orrs	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f042 0201 	orr.w	r2, r2, #1
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	e007      	b.n	80008ae <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	691a      	ldr	r2, [r3, #16]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f022 0201 	bic.w	r2, r2, #1
 80008ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	691b      	ldr	r3, [r3, #16]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d10c      	bne.n	80008d0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008bc:	f023 010f 	bic.w	r1, r3, #15
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	69db      	ldr	r3, [r3, #28]
 80008c4:	1e5a      	subs	r2, r3, #1
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	430a      	orrs	r2, r1
 80008cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80008ce:	e007      	b.n	80008e0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f022 020f 	bic.w	r2, r2, #15
 80008de:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008e4:	f023 0303 	bic.w	r3, r3, #3
 80008e8:	f043 0201 	orr.w	r2, r3, #1
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80008f0:	e007      	b.n	8000902 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008f6:	f043 0210 	orr.w	r2, r3, #16
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000902:	7ffb      	ldrb	r3, [r7, #31]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3724      	adds	r7, #36	@ 0x24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd90      	pop	{r4, r7, pc}
 800090c:	20000008 	.word	0x20000008
 8000910:	053e2d63 	.word	0x053e2d63
 8000914:	50040000 	.word	0x50040000
 8000918:	50040100 	.word	0x50040100
 800091c:	50040200 	.word	0x50040200
 8000920:	50040300 	.word	0x50040300
 8000924:	fff0c007 	.word	0xfff0c007

08000928 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000946:	4866      	ldr	r0, [pc, #408]	@ (8000ae0 <HAL_ADC_PollForConversion+0x1a4>)
 8000948:	f7ff fdd4 	bl	80004f4 <LL_ADC_GetMultimode>
 800094c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	2b08      	cmp	r3, #8
 8000954:	d102      	bne.n	800095c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000956:	2308      	movs	r3, #8
 8000958:	61fb      	str	r3, [r7, #28]
 800095a:	e02a      	b.n	80009b2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d005      	beq.n	800096e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	2b05      	cmp	r3, #5
 8000966:	d002      	beq.n	800096e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	2b09      	cmp	r3, #9
 800096c:	d111      	bne.n	8000992 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	2b00      	cmp	r3, #0
 800097a:	d007      	beq.n	800098c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000980:	f043 0220 	orr.w	r2, r3, #32
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	e0a4      	b.n	8000ad6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800098c:	2304      	movs	r3, #4
 800098e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000990:	e00f      	b.n	80009b2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000992:	4853      	ldr	r0, [pc, #332]	@ (8000ae0 <HAL_ADC_PollForConversion+0x1a4>)
 8000994:	f7ff fdbc 	bl	8000510 <LL_ADC_GetMultiDMATransfer>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d007      	beq.n	80009ae <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009a2:	f043 0220 	orr.w	r2, r3, #32
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e093      	b.n	8000ad6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80009ae:	2304      	movs	r3, #4
 80009b0:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80009b2:	f7ff fc7b 	bl	80002ac <HAL_GetTick>
 80009b6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80009b8:	e021      	b.n	80009fe <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c0:	d01d      	beq.n	80009fe <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80009c2:	f7ff fc73 	bl	80002ac <HAL_GetTick>
 80009c6:	4602      	mov	r2, r0
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d302      	bcc.n	80009d8 <HAL_ADC_PollForConversion+0x9c>
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d112      	bne.n	80009fe <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	4013      	ands	r3, r2
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d10b      	bne.n	80009fe <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009ea:	f043 0204 	orr.w	r2, r3, #4
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80009fa:	2303      	movs	r3, #3
 80009fc:	e06b      	b.n	8000ad6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	4013      	ands	r3, r2
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0d6      	beq.n	80009ba <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a10:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fcda 	bl	80003d6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d01c      	beq.n	8000a62 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	7e5b      	ldrb	r3, [r3, #25]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d118      	bne.n	8000a62 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	2b08      	cmp	r3, #8
 8000a3c:	d111      	bne.n	8000a62 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a42:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d105      	bne.n	8000a62 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a5a:	f043 0201 	orr.w	r2, r3, #1
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae4 <HAL_ADC_PollForConversion+0x1a8>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d002      	beq.n	8000a72 <HAL_ADC_PollForConversion+0x136>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	e000      	b.n	8000a74 <HAL_ADC_PollForConversion+0x138>
 8000a72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae8 <HAL_ADC_PollForConversion+0x1ac>)
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	6812      	ldr	r2, [r2, #0]
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d008      	beq.n	8000a8e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d005      	beq.n	8000a8e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	2b05      	cmp	r3, #5
 8000a86:	d002      	beq.n	8000a8e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	2b09      	cmp	r3, #9
 8000a8c:	d104      	bne.n	8000a98 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	61bb      	str	r3, [r7, #24]
 8000a96:	e00c      	b.n	8000ab2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a11      	ldr	r2, [pc, #68]	@ (8000ae4 <HAL_ADC_PollForConversion+0x1a8>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d002      	beq.n	8000aa8 <HAL_ADC_PollForConversion+0x16c>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	e000      	b.n	8000aaa <HAL_ADC_PollForConversion+0x16e>
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <HAL_ADC_PollForConversion+0x1ac>)
 8000aaa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	2b08      	cmp	r3, #8
 8000ab6:	d104      	bne.n	8000ac2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2208      	movs	r2, #8
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e008      	b.n	8000ad4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d103      	bne.n	8000ad4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	220c      	movs	r2, #12
 8000ad2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3720      	adds	r7, #32
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	50040300 	.word	0x50040300
 8000ae4:	50040100 	.word	0x50040100
 8000ae8:	50040000 	.word	0x50040000

08000aec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0b6      	sub	sp, #216	@ 0xd8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d101      	bne.n	8000b2a <HAL_ADC_ConfigChannel+0x22>
 8000b26:	2302      	movs	r3, #2
 8000b28:	e3c9      	b.n	80012be <HAL_ADC_ConfigChannel+0x7b6>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fd80 	bl	800063c <LL_ADC_REG_IsConversionOngoing>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 83aa 	bne.w	8001298 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b05      	cmp	r3, #5
 8000b52:	d824      	bhi.n	8000b9e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	3b02      	subs	r3, #2
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d81b      	bhi.n	8000b96 <HAL_ADC_ConfigChannel+0x8e>
 8000b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b64 <HAL_ADC_ConfigChannel+0x5c>)
 8000b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b64:	08000b75 	.word	0x08000b75
 8000b68:	08000b7d 	.word	0x08000b7d
 8000b6c:	08000b85 	.word	0x08000b85
 8000b70:	08000b8d 	.word	0x08000b8d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8000b74:	230c      	movs	r3, #12
 8000b76:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000b7a:	e010      	b.n	8000b9e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8000b7c:	2312      	movs	r3, #18
 8000b7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000b82:	e00c      	b.n	8000b9e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8000b84:	2318      	movs	r3, #24
 8000b86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000b8a:	e008      	b.n	8000b9e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8000b8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000b94:	e003      	b.n	8000b9e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8000b96:	2306      	movs	r3, #6
 8000b98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000b9c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6818      	ldr	r0, [r3, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8000bac:	f7ff fc26 	bl	80003fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fd41 	bl	800063c <LL_ADC_REG_IsConversionOngoing>
 8000bba:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fd4d 	bl	8000662 <LL_ADC_INJ_IsConversionOngoing>
 8000bc8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000bcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f040 81a4 	bne.w	8000f1e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000bd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f040 819f 	bne.w	8000f1e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	6819      	ldr	r1, [r3, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	461a      	mov	r2, r3
 8000bee:	f7ff fc31 	bl	8000454 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	695a      	ldr	r2, [r3, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	08db      	lsrs	r3, r3, #3
 8000bfe:	f003 0303 	and.w	r3, r3, #3
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d00a      	beq.n	8000c2a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6818      	ldr	r0, [r3, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	6919      	ldr	r1, [r3, #16]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000c24:	f7ff fb82 	bl	800032c <LL_ADC_SetOffset>
 8000c28:	e179      	b.n	8000f1e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fb9f 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d10a      	bne.n	8000c56 <HAL_ADC_ConfigChannel+0x14e>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fb94 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	0e9b      	lsrs	r3, r3, #26
 8000c50:	f003 021f 	and.w	r2, r3, #31
 8000c54:	e01e      	b.n	8000c94 <HAL_ADC_ConfigChannel+0x18c>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fb89 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000c6c:	fa93 f3a3 	rbit	r3, r3
 8000c70:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000c78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000c7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d101      	bne.n	8000c88 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8000c84:	2320      	movs	r3, #32
 8000c86:	e004      	b.n	8000c92 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8000c88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000c8c:	fab3 f383 	clz	r3, r3
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d105      	bne.n	8000cac <HAL_ADC_ConfigChannel+0x1a4>
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	0e9b      	lsrs	r3, r3, #26
 8000ca6:	f003 031f 	and.w	r3, r3, #31
 8000caa:	e018      	b.n	8000cde <HAL_ADC_ConfigChannel+0x1d6>
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000cb8:	fa93 f3a3 	rbit	r3, r3
 8000cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8000cc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8000cc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d101      	bne.n	8000cd4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8000cd0:	2320      	movs	r3, #32
 8000cd2:	e004      	b.n	8000cde <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8000cd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000cd8:	fab3 f383 	clz	r3, r3
 8000cdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d106      	bne.n	8000cf0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fb58 	bl	80003a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fb3c 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10a      	bne.n	8000d1c <HAL_ADC_ConfigChannel+0x214>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fb31 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000d12:	4603      	mov	r3, r0
 8000d14:	0e9b      	lsrs	r3, r3, #26
 8000d16:	f003 021f 	and.w	r2, r3, #31
 8000d1a:	e01e      	b.n	8000d5a <HAL_ADC_ConfigChannel+0x252>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2101      	movs	r1, #1
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fb26 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d32:	fa93 f3a3 	rbit	r3, r3
 8000d36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8000d3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8000d42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8000d4a:	2320      	movs	r3, #32
 8000d4c:	e004      	b.n	8000d58 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8000d4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000d52:	fab3 f383 	clz	r3, r3
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d105      	bne.n	8000d72 <HAL_ADC_ConfigChannel+0x26a>
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	0e9b      	lsrs	r3, r3, #26
 8000d6c:	f003 031f 	and.w	r3, r3, #31
 8000d70:	e018      	b.n	8000da4 <HAL_ADC_ConfigChannel+0x29c>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d7e:	fa93 f3a3 	rbit	r3, r3
 8000d82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8000d86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8000d8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8000d96:	2320      	movs	r3, #32
 8000d98:	e004      	b.n	8000da4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8000d9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000d9e:	fab3 f383 	clz	r3, r3
 8000da2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d106      	bne.n	8000db6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2200      	movs	r2, #0
 8000dae:	2101      	movs	r1, #1
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff faf5 	bl	80003a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2102      	movs	r1, #2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fad9 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d10a      	bne.n	8000de2 <HAL_ADC_ConfigChannel+0x2da>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2102      	movs	r1, #2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff face 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	0e9b      	lsrs	r3, r3, #26
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	e01e      	b.n	8000e20 <HAL_ADC_ConfigChannel+0x318>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2102      	movs	r1, #2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fac3 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000df8:	fa93 f3a3 	rbit	r3, r3
 8000dfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8000e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8000e08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8000e10:	2320      	movs	r3, #32
 8000e12:	e004      	b.n	8000e1e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8000e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e18:	fab3 f383 	clz	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d105      	bne.n	8000e38 <HAL_ADC_ConfigChannel+0x330>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	0e9b      	lsrs	r3, r3, #26
 8000e32:	f003 031f 	and.w	r3, r3, #31
 8000e36:	e014      	b.n	8000e62 <HAL_ADC_ConfigChannel+0x35a>
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e40:	fa93 f3a3 	rbit	r3, r3
 8000e44:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8000e46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8000e4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d101      	bne.n	8000e58 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8000e54:	2320      	movs	r3, #32
 8000e56:	e004      	b.n	8000e62 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8000e58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e5c:	fab3 f383 	clz	r3, r3
 8000e60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d106      	bne.n	8000e74 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fa96 	bl	80003a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2103      	movs	r1, #3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fa7a 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10a      	bne.n	8000ea0 <HAL_ADC_ConfigChannel+0x398>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2103      	movs	r1, #3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fa6f 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	0e9b      	lsrs	r3, r3, #26
 8000e9a:	f003 021f 	and.w	r2, r3, #31
 8000e9e:	e017      	b.n	8000ed0 <HAL_ADC_ConfigChannel+0x3c8>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2103      	movs	r1, #3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fa64 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000eb2:	fa93 f3a3 	rbit	r3, r3
 8000eb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8000eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000eba:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8000ebc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8000ec2:	2320      	movs	r3, #32
 8000ec4:	e003      	b.n	8000ece <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8000ec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ec8:	fab3 f383 	clz	r3, r3
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d105      	bne.n	8000ee8 <HAL_ADC_ConfigChannel+0x3e0>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	0e9b      	lsrs	r3, r3, #26
 8000ee2:	f003 031f 	and.w	r3, r3, #31
 8000ee6:	e011      	b.n	8000f0c <HAL_ADC_ConfigChannel+0x404>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000ef0:	fa93 f3a3 	rbit	r3, r3
 8000ef4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8000ef6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8000efa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d101      	bne.n	8000f04 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8000f00:	2320      	movs	r3, #32
 8000f02:	e003      	b.n	8000f0c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8000f04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f06:	fab3 f383 	clz	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d106      	bne.n	8000f1e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2200      	movs	r2, #0
 8000f16:	2103      	movs	r1, #3
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fa41 	bl	80003a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fb64 	bl	80005f0 <LL_ADC_IsEnabled>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f040 8140 	bne.w	80011b0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	f7ff fab5 	bl	80004ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	4a8f      	ldr	r2, [pc, #572]	@ (8001184 <HAL_ADC_ConfigChannel+0x67c>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	f040 8131 	bne.w	80011b0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10b      	bne.n	8000f76 <HAL_ADC_ConfigChannel+0x46e>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	0e9b      	lsrs	r3, r3, #26
 8000f64:	3301      	adds	r3, #1
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	2b09      	cmp	r3, #9
 8000f6c:	bf94      	ite	ls
 8000f6e:	2301      	movls	r3, #1
 8000f70:	2300      	movhi	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	e019      	b.n	8000faa <HAL_ADC_ConfigChannel+0x4a2>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f7e:	fa93 f3a3 	rbit	r3, r3
 8000f82:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8000f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f86:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8000f88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8000f8e:	2320      	movs	r3, #32
 8000f90:	e003      	b.n	8000f9a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8000f92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f94:	fab3 f383 	clz	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	f003 031f 	and.w	r3, r3, #31
 8000fa0:	2b09      	cmp	r3, #9
 8000fa2:	bf94      	ite	ls
 8000fa4:	2301      	movls	r3, #1
 8000fa6:	2300      	movhi	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d079      	beq.n	80010a2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d107      	bne.n	8000fca <HAL_ADC_ConfigChannel+0x4c2>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	0e9b      	lsrs	r3, r3, #26
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	069b      	lsls	r3, r3, #26
 8000fc4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000fc8:	e015      	b.n	8000ff6 <HAL_ADC_ConfigChannel+0x4ee>
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fd2:	fa93 f3a3 	rbit	r3, r3
 8000fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8000fd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000fda:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8000fdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8000fe2:	2320      	movs	r3, #32
 8000fe4:	e003      	b.n	8000fee <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8000fe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000fe8:	fab3 f383 	clz	r3, r3
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	3301      	adds	r3, #1
 8000ff0:	069b      	lsls	r3, r3, #26
 8000ff2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d109      	bne.n	8001016 <HAL_ADC_ConfigChannel+0x50e>
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	0e9b      	lsrs	r3, r3, #26
 8001008:	3301      	adds	r3, #1
 800100a:	f003 031f 	and.w	r3, r3, #31
 800100e:	2101      	movs	r1, #1
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	e017      	b.n	8001046 <HAL_ADC_ConfigChannel+0x53e>
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800101e:	fa93 f3a3 	rbit	r3, r3
 8001022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001026:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800102e:	2320      	movs	r3, #32
 8001030:	e003      	b.n	800103a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001034:	fab3 f383 	clz	r3, r3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	3301      	adds	r3, #1
 800103c:	f003 031f 	and.w	r3, r3, #31
 8001040:	2101      	movs	r1, #1
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	ea42 0103 	orr.w	r1, r2, r3
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10a      	bne.n	800106c <HAL_ADC_ConfigChannel+0x564>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	0e9b      	lsrs	r3, r3, #26
 800105c:	3301      	adds	r3, #1
 800105e:	f003 021f 	and.w	r2, r3, #31
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	051b      	lsls	r3, r3, #20
 800106a:	e018      	b.n	800109e <HAL_ADC_ConfigChannel+0x596>
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001074:	fa93 f3a3 	rbit	r3, r3
 8001078:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800107a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800107c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800107e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001084:	2320      	movs	r3, #32
 8001086:	e003      	b.n	8001090 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800108a:	fab3 f383 	clz	r3, r3
 800108e:	b2db      	uxtb	r3, r3
 8001090:	3301      	adds	r3, #1
 8001092:	f003 021f 	and.w	r2, r3, #31
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800109e:	430b      	orrs	r3, r1
 80010a0:	e081      	b.n	80011a6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d107      	bne.n	80010be <HAL_ADC_ConfigChannel+0x5b6>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	0e9b      	lsrs	r3, r3, #26
 80010b4:	3301      	adds	r3, #1
 80010b6:	069b      	lsls	r3, r3, #26
 80010b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80010bc:	e015      	b.n	80010ea <HAL_ADC_ConfigChannel+0x5e2>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c6:	fa93 f3a3 	rbit	r3, r3
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80010cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80010d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80010d6:	2320      	movs	r3, #32
 80010d8:	e003      	b.n	80010e2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80010da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010dc:	fab3 f383 	clz	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	3301      	adds	r3, #1
 80010e4:	069b      	lsls	r3, r3, #26
 80010e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <HAL_ADC_ConfigChannel+0x602>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	0e9b      	lsrs	r3, r3, #26
 80010fc:	3301      	adds	r3, #1
 80010fe:	f003 031f 	and.w	r3, r3, #31
 8001102:	2101      	movs	r1, #1
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	e017      	b.n	800113a <HAL_ADC_ConfigChannel+0x632>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	fa93 f3a3 	rbit	r3, r3
 8001116:	61bb      	str	r3, [r7, #24]
  return result;
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001122:	2320      	movs	r3, #32
 8001124:	e003      	b.n	800112e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001126:	6a3b      	ldr	r3, [r7, #32]
 8001128:	fab3 f383 	clz	r3, r3
 800112c:	b2db      	uxtb	r3, r3
 800112e:	3301      	adds	r3, #1
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	2101      	movs	r1, #1
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	ea42 0103 	orr.w	r1, r2, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10d      	bne.n	8001166 <HAL_ADC_ConfigChannel+0x65e>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	0e9b      	lsrs	r3, r3, #26
 8001150:	3301      	adds	r3, #1
 8001152:	f003 021f 	and.w	r2, r3, #31
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	3b1e      	subs	r3, #30
 800115e:	051b      	lsls	r3, r3, #20
 8001160:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001164:	e01e      	b.n	80011a4 <HAL_ADC_ConfigChannel+0x69c>
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	fa93 f3a3 	rbit	r3, r3
 8001172:	60fb      	str	r3, [r7, #12]
  return result;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d104      	bne.n	8001188 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800117e:	2320      	movs	r3, #32
 8001180:	e006      	b.n	8001190 <HAL_ADC_ConfigChannel+0x688>
 8001182:	bf00      	nop
 8001184:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fab3 f383 	clz	r3, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	3301      	adds	r3, #1
 8001192:	f003 021f 	and.w	r2, r3, #31
 8001196:	4613      	mov	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	4413      	add	r3, r2
 800119c:	3b1e      	subs	r3, #30
 800119e:	051b      	lsls	r3, r3, #20
 80011a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011a4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff f952 	bl	8000454 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <HAL_ADC_ConfigChannel+0x7c0>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d07a      	beq.n	80012b2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80011bc:	4843      	ldr	r0, [pc, #268]	@ (80012cc <HAL_ADC_ConfigChannel+0x7c4>)
 80011be:	f7ff f8a7 	bl	8000310 <LL_ADC_GetCommonPathInternalCh>
 80011c2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a41      	ldr	r2, [pc, #260]	@ (80012d0 <HAL_ADC_ConfigChannel+0x7c8>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d12c      	bne.n	800122a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80011d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80011d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d126      	bne.n	800122a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a3c      	ldr	r2, [pc, #240]	@ (80012d4 <HAL_ADC_ConfigChannel+0x7cc>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d004      	beq.n	80011f0 <HAL_ADC_ConfigChannel+0x6e8>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a3b      	ldr	r2, [pc, #236]	@ (80012d8 <HAL_ADC_ConfigChannel+0x7d0>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d15d      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80011f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80011f8:	4619      	mov	r1, r3
 80011fa:	4834      	ldr	r0, [pc, #208]	@ (80012cc <HAL_ADC_ConfigChannel+0x7c4>)
 80011fc:	f7ff f875 	bl	80002ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001200:	4b36      	ldr	r3, [pc, #216]	@ (80012dc <HAL_ADC_ConfigChannel+0x7d4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	099b      	lsrs	r3, r3, #6
 8001206:	4a36      	ldr	r2, [pc, #216]	@ (80012e0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001208:	fba2 2303 	umull	r2, r3, r2, r3
 800120c:	099b      	lsrs	r3, r3, #6
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800121a:	e002      	b.n	8001222 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	3b01      	subs	r3, #1
 8001220:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f9      	bne.n	800121c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001228:	e040      	b.n	80012ac <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a2d      	ldr	r2, [pc, #180]	@ (80012e4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d118      	bne.n	8001266 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001234:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001238:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d112      	bne.n	8001266 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a23      	ldr	r2, [pc, #140]	@ (80012d4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d004      	beq.n	8001254 <HAL_ADC_ConfigChannel+0x74c>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a22      	ldr	r2, [pc, #136]	@ (80012d8 <HAL_ADC_ConfigChannel+0x7d0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d12d      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001254:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001258:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800125c:	4619      	mov	r1, r3
 800125e:	481b      	ldr	r0, [pc, #108]	@ (80012cc <HAL_ADC_ConfigChannel+0x7c4>)
 8001260:	f7ff f843 	bl	80002ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001264:	e024      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a1f      	ldr	r2, [pc, #124]	@ (80012e8 <HAL_ADC_ConfigChannel+0x7e0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d120      	bne.n	80012b2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001270:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001274:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d11a      	bne.n	80012b2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a14      	ldr	r2, [pc, #80]	@ (80012d4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d115      	bne.n	80012b2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001286:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800128a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800128e:	4619      	mov	r1, r3
 8001290:	480e      	ldr	r0, [pc, #56]	@ (80012cc <HAL_ADC_ConfigChannel+0x7c4>)
 8001292:	f7ff f82a 	bl	80002ea <LL_ADC_SetCommonPathInternalCh>
 8001296:	e00c      	b.n	80012b2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800129c:	f043 0220 	orr.w	r2, r3, #32
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80012aa:	e002      	b.n	80012b2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80012ac:	bf00      	nop
 80012ae:	e000      	b.n	80012b2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80012b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80012ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	37d8      	adds	r7, #216	@ 0xd8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	80080000 	.word	0x80080000
 80012cc:	50040300 	.word	0x50040300
 80012d0:	c7520000 	.word	0xc7520000
 80012d4:	50040000 	.word	0x50040000
 80012d8:	50040200 	.word	0x50040200
 80012dc:	20000008 	.word	0x20000008
 80012e0:	053e2d63 	.word	0x053e2d63
 80012e4:	cb840000 	.word	0xcb840000
 80012e8:	80000001 	.word	0x80000001

080012ec <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f98c 	bl	8000616 <LL_ADC_IsDisableOngoing>
 80012fe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f973 	bl	80005f0 <LL_ADC_IsEnabled>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d047      	beq.n	80013a0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d144      	bne.n	80013a0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 030d 	and.w	r3, r3, #13
 8001320:	2b01      	cmp	r3, #1
 8001322:	d10c      	bne.n	800133e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f94d 	bl	80005c8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2203      	movs	r2, #3
 8001334:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001336:	f7fe ffb9 	bl	80002ac <HAL_GetTick>
 800133a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800133c:	e029      	b.n	8001392 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001342:	f043 0210 	orr.w	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134e:	f043 0201 	orr.w	r2, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e023      	b.n	80013a2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800135a:	f7fe ffa7 	bl	80002ac <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d914      	bls.n	8001392 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00d      	beq.n	8001392 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800137a:	f043 0210 	orr.w	r2, r3, #16
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e007      	b.n	80013a2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1dc      	bne.n	800135a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <LL_ADC_StartCalibration>:
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80013bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80013c6:	4313      	orrs	r3, r2
 80013c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_ADC_IsCalibrationOnGoing>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80013ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80013f0:	d101      	bne.n	80013f6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001418:	2b01      	cmp	r3, #1
 800141a:	d101      	bne.n	8001420 <HAL_ADCEx_Calibration_Start+0x1c>
 800141c:	2302      	movs	r3, #2
 800141e:	e04d      	b.n	80014bc <HAL_ADCEx_Calibration_Start+0xb8>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff5f 	bl	80012ec <ADC_Disable>
 800142e:	4603      	mov	r3, r0
 8001430:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d136      	bne.n	80014a6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800143c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001440:	f023 0302 	bic.w	r3, r3, #2
 8001444:	f043 0202 	orr.w	r2, r3, #2
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6839      	ldr	r1, [r7, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ffa9 	bl	80013aa <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001458:	e014      	b.n	8001484 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3301      	adds	r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8001466:	d30d      	bcc.n	8001484 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800146c:	f023 0312 	bic.w	r3, r3, #18
 8001470:	f043 0210 	orr.w	r2, r3, #16
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e01b      	b.n	80014bc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ffa7 	bl	80013dc <LL_ADC_IsCalibrationOnGoing>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1e2      	bne.n	800145a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001498:	f023 0303 	bic.w	r3, r3, #3
 800149c:	f043 0201 	orr.w	r2, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80014a4:	e005      	b.n	80014b2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014aa:	f043 0210 	orr.w	r2, r3, #16
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	@ (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	@ (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	@ 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
         );
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	@ 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015f4:	d301      	bcc.n	80015fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00f      	b.n	800161a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <SysTick_Config+0x40>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001602:	210f      	movs	r1, #15
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f7ff ff8e 	bl	8001528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <SysTick_Config+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001612:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <SysTick_Config+0x40>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff47 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001650:	f7ff ff5c 	bl	800150c <__NVIC_GetPriorityGrouping>
 8001654:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	6978      	ldr	r0, [r7, #20]
 800165c:	f7ff ff8e 	bl	800157c <NVIC_EncodePriority>
 8001660:	4602      	mov	r2, r0
 8001662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff5d 	bl	8001528 <__NVIC_SetPriority>
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffb0 	bl	80015e4 <SysTick_Config>
 8001684:	4603      	mov	r3, r0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169e:	e17f      	b.n	80019a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2101      	movs	r1, #1
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	4013      	ands	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8171 	beq.w	800199a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d005      	beq.n	80016d0 <HAL_GPIO_Init+0x40>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d130      	bne.n	8001732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001706:	2201      	movs	r2, #1
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	091b      	lsrs	r3, r3, #4
 800171c:	f003 0201 	and.w	r2, r3, #1
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	2b03      	cmp	r3, #3
 800173c:	d118      	bne.n	8001770 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001744:	2201      	movs	r2, #1
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	08db      	lsrs	r3, r3, #3
 800175a:	f003 0201 	and.w	r2, r3, #1
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b03      	cmp	r3, #3
 800177a:	d017      	beq.n	80017ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d123      	bne.n	8001800 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	08da      	lsrs	r2, r3, #3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3208      	adds	r2, #8
 80017c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	220f      	movs	r2, #15
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	08da      	lsrs	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3208      	adds	r2, #8
 80017fa:	6939      	ldr	r1, [r7, #16]
 80017fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	2203      	movs	r2, #3
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0203 	and.w	r2, r3, #3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80ac 	beq.w	800199a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	4b5f      	ldr	r3, [pc, #380]	@ (80019c0 <HAL_GPIO_Init+0x330>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001846:	4a5e      	ldr	r2, [pc, #376]	@ (80019c0 <HAL_GPIO_Init+0x330>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6613      	str	r3, [r2, #96]	@ 0x60
 800184e:	4b5c      	ldr	r3, [pc, #368]	@ (80019c0 <HAL_GPIO_Init+0x330>)
 8001850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800185a:	4a5a      	ldr	r2, [pc, #360]	@ (80019c4 <HAL_GPIO_Init+0x334>)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	3302      	adds	r3, #2
 8001862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	220f      	movs	r2, #15
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001884:	d025      	beq.n	80018d2 <HAL_GPIO_Init+0x242>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4f      	ldr	r2, [pc, #316]	@ (80019c8 <HAL_GPIO_Init+0x338>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d01f      	beq.n	80018ce <HAL_GPIO_Init+0x23e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4e      	ldr	r2, [pc, #312]	@ (80019cc <HAL_GPIO_Init+0x33c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d019      	beq.n	80018ca <HAL_GPIO_Init+0x23a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4d      	ldr	r2, [pc, #308]	@ (80019d0 <HAL_GPIO_Init+0x340>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d013      	beq.n	80018c6 <HAL_GPIO_Init+0x236>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4c      	ldr	r2, [pc, #304]	@ (80019d4 <HAL_GPIO_Init+0x344>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00d      	beq.n	80018c2 <HAL_GPIO_Init+0x232>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4b      	ldr	r2, [pc, #300]	@ (80019d8 <HAL_GPIO_Init+0x348>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d007      	beq.n	80018be <HAL_GPIO_Init+0x22e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4a      	ldr	r2, [pc, #296]	@ (80019dc <HAL_GPIO_Init+0x34c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d101      	bne.n	80018ba <HAL_GPIO_Init+0x22a>
 80018b6:	2306      	movs	r3, #6
 80018b8:	e00c      	b.n	80018d4 <HAL_GPIO_Init+0x244>
 80018ba:	2307      	movs	r3, #7
 80018bc:	e00a      	b.n	80018d4 <HAL_GPIO_Init+0x244>
 80018be:	2305      	movs	r3, #5
 80018c0:	e008      	b.n	80018d4 <HAL_GPIO_Init+0x244>
 80018c2:	2304      	movs	r3, #4
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x244>
 80018c6:	2303      	movs	r3, #3
 80018c8:	e004      	b.n	80018d4 <HAL_GPIO_Init+0x244>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e002      	b.n	80018d4 <HAL_GPIO_Init+0x244>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_GPIO_Init+0x244>
 80018d2:	2300      	movs	r3, #0
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	f002 0203 	and.w	r2, r2, #3
 80018da:	0092      	lsls	r2, r2, #2
 80018dc:	4093      	lsls	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018e4:	4937      	ldr	r1, [pc, #220]	@ (80019c4 <HAL_GPIO_Init+0x334>)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	3302      	adds	r3, #2
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018f2:	4b3b      	ldr	r3, [pc, #236]	@ (80019e0 <HAL_GPIO_Init+0x350>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001916:	4a32      	ldr	r2, [pc, #200]	@ (80019e0 <HAL_GPIO_Init+0x350>)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800191c:	4b30      	ldr	r3, [pc, #192]	@ (80019e0 <HAL_GPIO_Init+0x350>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43db      	mvns	r3, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001940:	4a27      	ldr	r2, [pc, #156]	@ (80019e0 <HAL_GPIO_Init+0x350>)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001946:	4b26      	ldr	r3, [pc, #152]	@ (80019e0 <HAL_GPIO_Init+0x350>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800196a:	4a1d      	ldr	r2, [pc, #116]	@ (80019e0 <HAL_GPIO_Init+0x350>)
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001970:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <HAL_GPIO_Init+0x350>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001994:	4a12      	ldr	r2, [pc, #72]	@ (80019e0 <HAL_GPIO_Init+0x350>)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa22 f303 	lsr.w	r3, r2, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f47f ae78 	bne.w	80016a0 <HAL_GPIO_Init+0x10>
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000
 80019c8:	48000400 	.word	0x48000400
 80019cc:	48000800 	.word	0x48000800
 80019d0:	48000c00 	.word	0x48000c00
 80019d4:	48001000 	.word	0x48001000
 80019d8:	48001400 	.word	0x48001400
 80019dc:	48001800 	.word	0x48001800
 80019e0:	40010400 	.word	0x40010400

080019e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d020      	beq.n	8001a48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01b      	beq.n	8001a48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 0202 	mvn.w	r2, #2
 8001a18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f8ee 	bl	8001c10 <HAL_TIM_IC_CaptureCallback>
 8001a34:	e005      	b.n	8001a42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f8e0 	bl	8001bfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f8f1 	bl	8001c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d020      	beq.n	8001a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d01b      	beq.n	8001a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f06f 0204 	mvn.w	r2, #4
 8001a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2202      	movs	r2, #2
 8001a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f8c8 	bl	8001c10 <HAL_TIM_IC_CaptureCallback>
 8001a80:	e005      	b.n	8001a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f8ba 	bl	8001bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f8cb 	bl	8001c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d020      	beq.n	8001ae0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d01b      	beq.n	8001ae0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f06f 0208 	mvn.w	r2, #8
 8001ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f8a2 	bl	8001c10 <HAL_TIM_IC_CaptureCallback>
 8001acc:	e005      	b.n	8001ada <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f894 	bl	8001bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f8a5 	bl	8001c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d020      	beq.n	8001b2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d01b      	beq.n	8001b2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0210 	mvn.w	r2, #16
 8001afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2208      	movs	r2, #8
 8001b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f87c 	bl	8001c10 <HAL_TIM_IC_CaptureCallback>
 8001b18:	e005      	b.n	8001b26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f86e 	bl	8001bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f87f 	bl	8001c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00c      	beq.n	8001b50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0201 	mvn.w	r2, #1
 8001b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f84c 	bl	8001be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00c      	beq.n	8001b74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f876 	bl	8001c60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00c      	beq.n	8001b98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d007      	beq.n	8001b98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f86e 	bl	8001c74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00c      	beq.n	8001bbc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f83e 	bl	8001c38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f003 0320 	and.w	r3, r3, #32
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00c      	beq.n	8001be0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f003 0320 	and.w	r3, r3, #32
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d007      	beq.n	8001be0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0220 	mvn.w	r2, #32
 8001bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f836 	bl	8001c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001be0:	bf00      	nop
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <adc_read>:
#include "stm32l4xx_hal.h"
#include "adc.h"

extern ADC_HandleTypeDef hadc1;

uint32_t adc_read(void) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8001c8c:	210a      	movs	r1, #10
 8001c8e:	4807      	ldr	r0, [pc, #28]	@ (8001cac <adc_read+0x24>)
 8001c90:	f7fe fe54 	bl	800093c <HAL_ADC_PollForConversion>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d104      	bne.n	8001ca4 <adc_read+0x1c>
        return HAL_ADC_GetValue(&hadc1);
 8001c9a:	4804      	ldr	r0, [pc, #16]	@ (8001cac <adc_read+0x24>)
 8001c9c:	f7fe ff26 	bl	8000aec <HAL_ADC_GetValue>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	e000      	b.n	8001ca6 <adc_read+0x1e>
    }
    return 0;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000002c 	.word	0x2000002c

08001cb0 <adc_single_conv>:
    sConfig.Rank = ADC_REGULAR_RANK_1;
    sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;

    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
}
void adc_single_conv(void){
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08e      	sub	sp, #56	@ 0x38
 8001cb4:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	4b36      	ldr	r3, [pc, #216]	@ (8001d90 <adc_single_conv+0xe0>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cba:	4a35      	ldr	r2, [pc, #212]	@ (8001d90 <adc_single_conv+0xe0>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc2:	4b33      	ldr	r3, [pc, #204]	@ (8001d90 <adc_single_conv+0xe0>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]

	    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ce2:	230b      	movs	r3, #11
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf4:	f7ff fccc 	bl	8001690 <HAL_GPIO_Init>

	    // Enable ADC clock
	    __HAL_RCC_ADC_CLK_ENABLE();
 8001cf8:	4b25      	ldr	r3, [pc, #148]	@ (8001d90 <adc_single_conv+0xe0>)
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfc:	4a24      	ldr	r2, [pc, #144]	@ (8001d90 <adc_single_conv+0xe0>)
 8001cfe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d04:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <adc_single_conv+0xe0>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]

	    hadc1.Instance = ADC1;
 8001d10:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <adc_single_conv+0xe4>)
 8001d12:	4a21      	ldr	r2, [pc, #132]	@ (8001d98 <adc_single_conv+0xe8>)
 8001d14:	601a      	str	r2, [r3, #0]
	    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d16:	4b1f      	ldr	r3, [pc, #124]	@ (8001d94 <adc_single_conv+0xe4>)
 8001d18:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d1c:	605a      	str	r2, [r3, #4]
	    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d94 <adc_single_conv+0xe4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
	    hadc1.Init.ContinuousConvMode = DISABLE;
 8001d24:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <adc_single_conv+0xe4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	765a      	strb	r2, [r3, #25]
	    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <adc_single_conv+0xe4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2020 	strb.w	r2, [r3, #32]
	    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d32:	4b18      	ldr	r3, [pc, #96]	@ (8001d94 <adc_single_conv+0xe4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	62da      	str	r2, [r3, #44]	@ 0x2c
	    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d38:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <adc_single_conv+0xe4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	629a      	str	r2, [r3, #40]	@ 0x28
	    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d3e:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <adc_single_conv+0xe4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	60da      	str	r2, [r3, #12]
	    hadc1.Init.NbrOfConversion = 1;
 8001d44:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <adc_single_conv+0xe4>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	61da      	str	r2, [r3, #28]
	    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d4a:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <adc_single_conv+0xe4>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <adc_single_conv+0xe4>)
 8001d54:	2204      	movs	r2, #4
 8001d56:	615a      	str	r2, [r3, #20]

	    HAL_ADC_Init(&hadc1);
 8001d58:	480e      	ldr	r0, [pc, #56]	@ (8001d94 <adc_single_conv+0xe4>)
 8001d5a:	f7fe fc95 	bl	8000688 <HAL_ADC_Init>

	    ADC_ChannelConfTypeDef sConfig = {0};
 8001d5e:	f107 030c 	add.w	r3, r7, #12
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	611a      	str	r2, [r3, #16]
 8001d6e:	615a      	str	r2, [r3, #20]
	    sConfig.Channel = ADC_CHANNEL_5;  // PA0 = ADC1_IN5
 8001d70:	4b0a      	ldr	r3, [pc, #40]	@ (8001d9c <adc_single_conv+0xec>)
 8001d72:	60fb      	str	r3, [r7, #12]
	    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d74:	2306      	movs	r3, #6
 8001d76:	613b      	str	r3, [r7, #16]
	    sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	617b      	str	r3, [r7, #20]

	    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	4619      	mov	r1, r3
 8001d82:	4804      	ldr	r0, [pc, #16]	@ (8001d94 <adc_single_conv+0xe4>)
 8001d84:	f7fe fec0 	bl	8000b08 <HAL_ADC_ConfigChannel>
}
 8001d88:	bf00      	nop
 8001d8a:	3738      	adds	r7, #56	@ 0x38
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	2000002c 	.word	0x2000002c
 8001d98:	50040000 	.word	0x50040000
 8001d9c:	14f00020 	.word	0x14f00020

08001da0 <main>:

uint32_t sensor_value;


int main()
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	HAL_Init();
 8001da4:	f7fe fa12 	bl	80001cc <HAL_Init>
	adc_single_conv();
 8001da8:	f7ff ff82 	bl	8001cb0 <adc_single_conv>
	 HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001dac:	217f      	movs	r1, #127	@ 0x7f
 8001dae:	4804      	ldr	r0, [pc, #16]	@ (8001dc0 <main+0x20>)
 8001db0:	f7ff fb28 	bl	8001404 <HAL_ADCEx_Calibration_Start>
	{
		//HAL_ADC_Start(&hadc1);

		//HAL_ADC_PollForConversion(&hadc1,1);

		sensor_value = adc_read();
 8001db4:	f7ff ff68 	bl	8001c88 <adc_read>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4a02      	ldr	r2, [pc, #8]	@ (8001dc4 <main+0x24>)
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e7f9      	b.n	8001db4 <main+0x14>
 8001dc0:	2000002c 	.word	0x2000002c
 8001dc4:	20000090 	.word	0x20000090

08001dc8 <SysTick_Handler>:
	}
}


void SysTick_Handler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001dcc:	f7fe fa5a 	bl	8000284 <HAL_IncTick>
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <TIM3_IRQHandler>:
	HAL_NVIC_EnableIRQ(TIMx_IRQn);

	HAL_TIM_Base_Start_IT(&TimHandle);
}

void TIMx_IRQHandler(void){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 8001dd8:	4802      	ldr	r0, [pc, #8]	@ (8001de4 <TIM3_IRQHandler+0x10>)
 8001dda:	f7ff fe03 	bl	80019e4 <HAL_TIM_IRQHandler>
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000094 	.word	0x20000094

08001de8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001de8:	480d      	ldr	r0, [pc, #52]	@ (8001e20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df0:	480c      	ldr	r0, [pc, #48]	@ (8001e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001df2:	490d      	ldr	r1, [pc, #52]	@ (8001e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <LoopForever+0xe>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e08:	4c0a      	ldr	r4, [pc, #40]	@ (8001e34 <LoopForever+0x16>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001e16:	f000 f811 	bl	8001e3c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8001e1a:	f7ff ffc1 	bl	8001da0 <main>

08001e1e <LoopForever>:

LoopForever:
  b LoopForever
 8001e1e:	e7fe      	b.n	8001e1e <LoopForever>
  ldr   r0, =_estack
 8001e20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e2c:	08001ea4 	.word	0x08001ea4
  ldr r2, =_sbss
 8001e30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e34:	200000e0 	.word	0x200000e0

08001e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC1_2_IRQHandler>
	...

08001e3c <__libc_init_array>:
 8001e3c:	b570      	push	{r4, r5, r6, lr}
 8001e3e:	4d0d      	ldr	r5, [pc, #52]	@ (8001e74 <__libc_init_array+0x38>)
 8001e40:	4c0d      	ldr	r4, [pc, #52]	@ (8001e78 <__libc_init_array+0x3c>)
 8001e42:	1b64      	subs	r4, r4, r5
 8001e44:	10a4      	asrs	r4, r4, #2
 8001e46:	2600      	movs	r6, #0
 8001e48:	42a6      	cmp	r6, r4
 8001e4a:	d109      	bne.n	8001e60 <__libc_init_array+0x24>
 8001e4c:	4d0b      	ldr	r5, [pc, #44]	@ (8001e7c <__libc_init_array+0x40>)
 8001e4e:	4c0c      	ldr	r4, [pc, #48]	@ (8001e80 <__libc_init_array+0x44>)
 8001e50:	f000 f818 	bl	8001e84 <_init>
 8001e54:	1b64      	subs	r4, r4, r5
 8001e56:	10a4      	asrs	r4, r4, #2
 8001e58:	2600      	movs	r6, #0
 8001e5a:	42a6      	cmp	r6, r4
 8001e5c:	d105      	bne.n	8001e6a <__libc_init_array+0x2e>
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}
 8001e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e64:	4798      	blx	r3
 8001e66:	3601      	adds	r6, #1
 8001e68:	e7ee      	b.n	8001e48 <__libc_init_array+0xc>
 8001e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e6e:	4798      	blx	r3
 8001e70:	3601      	adds	r6, #1
 8001e72:	e7f2      	b.n	8001e5a <__libc_init_array+0x1e>
 8001e74:	08001e9c 	.word	0x08001e9c
 8001e78:	08001e9c 	.word	0x08001e9c
 8001e7c:	08001e9c 	.word	0x08001e9c
 8001e80:	08001ea0 	.word	0x08001ea0

08001e84 <_init>:
 8001e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e86:	bf00      	nop
 8001e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e8a:	bc08      	pop	{r3}
 8001e8c:	469e      	mov	lr, r3
 8001e8e:	4770      	bx	lr

08001e90 <_fini>:
 8001e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e92:	bf00      	nop
 8001e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e96:	bc08      	pop	{r3}
 8001e98:	469e      	mov	lr, r3
 8001e9a:	4770      	bx	lr
