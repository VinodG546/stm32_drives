
13_ADC_multiple_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003014  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080031a0  080031a0  000041a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031e0  080031e0  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080031e0  080031e0  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080031e0  080031e0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031e0  080031e0  000041e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031e4  080031e4  000041e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080031e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000120  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000012c  2000012c  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c64c  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c3f  00000000  00000000  00011688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  000132c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a84  00000000  00000000  00014068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000173b  00000000  00000000  00014aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f148  00000000  00000000  00016227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fbe86  00000000  00000000  0002536f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001211f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003990  00000000  00000000  00121238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00124bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003188 	.word	0x08003188

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003188 	.word	0x08003188

080001cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d6:	2003      	movs	r0, #3
 80001d8:	f001 fa50 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001dc:	200f      	movs	r0, #15
 80001de:	f000 f815 	bl	800020c <HAL_InitTick>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e8:	2301      	movs	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e001      	b.n	80001f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ee:	f000 f805 	bl	80001fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
	...

0800020c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000214:	2300      	movs	r3, #0
 8000216:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000218:	4b17      	ldr	r3, [pc, #92]	@ (8000278 <HAL_InitTick+0x6c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d023      	beq.n	8000268 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000220:	4b16      	ldr	r3, [pc, #88]	@ (800027c <HAL_InitTick+0x70>)
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b14      	ldr	r3, [pc, #80]	@ (8000278 <HAL_InitTick+0x6c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	4619      	mov	r1, r3
 800022a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800022e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000232:	fbb2 f3f3 	udiv	r3, r2, r3
 8000236:	4618      	mov	r0, r3
 8000238:	f001 fa55 	bl	80016e6 <HAL_SYSTICK_Config>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d10f      	bne.n	8000262 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b0f      	cmp	r3, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	2200      	movs	r2, #0
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f001 fa1f 	bl	8001692 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000254:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <HAL_InitTick+0x74>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	6013      	str	r3, [r2, #0]
 800025a:	e007      	b.n	800026c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800025c:	2301      	movs	r3, #1
 800025e:	73fb      	strb	r3, [r7, #15]
 8000260:	e004      	b.n	800026c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	e001      	b.n	800026c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000268:	2301      	movs	r3, #1
 800026a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000004 	.word	0x20000004
 800027c:	20000008 	.word	0x20000008
 8000280:	20000000 	.word	0x20000000

08000284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <HAL_IncTick+0x20>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	461a      	mov	r2, r3
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <HAL_IncTick+0x24>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4413      	add	r3, r2
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <HAL_IncTick+0x24>)
 8000296:	6013      	str	r3, [r2, #0]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000004 	.word	0x20000004
 80002a8:	20000028 	.word	0x20000028

080002ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  return uwTick;
 80002b0:	4b03      	ldr	r3, [pc, #12]	@ (80002c0 <HAL_GetTick+0x14>)
 80002b2:	681b      	ldr	r3, [r3, #0]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	20000028 	.word	0x20000028

080002c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	431a      	orrs	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	609a      	str	r2, [r3, #8]
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr

080002ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80002ea:	b480      	push	{r7}
 80002ec:	b083      	sub	sp, #12
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
 80002f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	431a      	orrs	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	609a      	str	r2, [r3, #8]
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000320:	4618      	mov	r0, r3
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800032c:	b480      	push	{r7}
 800032e:	b087      	sub	sp, #28
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]
 8000338:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	3360      	adds	r3, #96	@ 0x60
 800033e:	461a      	mov	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	4413      	add	r3, r2
 8000346:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	4b08      	ldr	r3, [pc, #32]	@ (8000370 <LL_ADC_SetOffset+0x44>)
 800034e:	4013      	ands	r3, r2
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000356:	683a      	ldr	r2, [r7, #0]
 8000358:	430a      	orrs	r2, r1
 800035a:	4313      	orrs	r3, r2
 800035c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000364:	bf00      	nop
 8000366:	371c      	adds	r7, #28
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	03fff000 	.word	0x03fff000

08000374 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	3360      	adds	r3, #96	@ 0x60
 8000382:	461a      	mov	r2, r3
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	4413      	add	r3, r2
 800038a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000394:	4618      	mov	r0, r3
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b087      	sub	sp, #28
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	3360      	adds	r3, #96	@ 0x60
 80003b0:	461a      	mov	r2, r3
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	4413      	add	r3, r2
 80003b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	431a      	orrs	r2, r3
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80003ca:	bf00      	nop
 80003cc:	371c      	adds	r7, #28
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b083      	sub	sp, #12
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d101      	bne.n	80003ee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80003ea:	2301      	movs	r3, #1
 80003ec:	e000      	b.n	80003f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80003ee:	2300      	movs	r3, #0
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b087      	sub	sp, #28
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	3330      	adds	r3, #48	@ 0x30
 800040c:	461a      	mov	r2, r3
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	0a1b      	lsrs	r3, r3, #8
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	f003 030c 	and.w	r3, r3, #12
 8000418:	4413      	add	r3, r2
 800041a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	f003 031f 	and.w	r3, r3, #31
 8000426:	211f      	movs	r1, #31
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	43db      	mvns	r3, r3
 800042e:	401a      	ands	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	0e9b      	lsrs	r3, r3, #26
 8000434:	f003 011f 	and.w	r1, r3, #31
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	f003 031f 	and.w	r3, r3, #31
 800043e:	fa01 f303 	lsl.w	r3, r1, r3
 8000442:	431a      	orrs	r2, r3
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000448:	bf00      	nop
 800044a:	371c      	adds	r7, #28
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000454:	b480      	push	{r7}
 8000456:	b087      	sub	sp, #28
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	3314      	adds	r3, #20
 8000464:	461a      	mov	r2, r3
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	0e5b      	lsrs	r3, r3, #25
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	4413      	add	r3, r2
 8000472:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	0d1b      	lsrs	r3, r3, #20
 800047c:	f003 031f 	and.w	r3, r3, #31
 8000480:	2107      	movs	r1, #7
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	43db      	mvns	r3, r3
 8000488:	401a      	ands	r2, r3
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	0d1b      	lsrs	r3, r3, #20
 800048e:	f003 031f 	and.w	r3, r3, #31
 8000492:	6879      	ldr	r1, [r7, #4]
 8000494:	fa01 f303 	lsl.w	r3, r1, r3
 8000498:	431a      	orrs	r2, r3
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800049e:	bf00      	nop
 80004a0:	371c      	adds	r7, #28
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
	...

080004ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80004c4:	43db      	mvns	r3, r3
 80004c6:	401a      	ands	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f003 0318 	and.w	r3, r3, #24
 80004ce:	4908      	ldr	r1, [pc, #32]	@ (80004f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80004d0:	40d9      	lsrs	r1, r3
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	400b      	ands	r3, r1
 80004d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80004da:	431a      	orrs	r2, r3
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	0007ffff 	.word	0x0007ffff

080004f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	f003 031f 	and.w	r3, r3, #31
}
 8000504:	4618      	mov	r0, r3
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000520:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	6093      	str	r3, [r2, #8]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000548:	d101      	bne.n	800054e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800054a:	2301      	movs	r3, #1
 800054c:	e000      	b.n	8000550 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800056c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000570:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000598:	d101      	bne.n	800059e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800059a:	2301      	movs	r3, #1
 800059c:	e000      	b.n	80005a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800059e:	2300      	movs	r3, #0
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80005bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80005c0:	f043 0201 	orr.w	r2, r3, #1
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d101      	bne.n	80005ec <LL_ADC_IsEnabled+0x18>
 80005e8:	2301      	movs	r3, #1
 80005ea:	e000      	b.n	80005ee <LL_ADC_IsEnabled+0x1a>
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800060a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800060e:	f043 0204 	orr.w	r2, r3, #4
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	2b04      	cmp	r3, #4
 8000634:	d101      	bne.n	800063a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000636:	2301      	movs	r3, #1
 8000638:	e000      	b.n	800063c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	f003 0308 	and.w	r3, r3, #8
 8000658:	2b08      	cmp	r3, #8
 800065a:	d101      	bne.n	8000660 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800065c:	2301      	movs	r3, #1
 800065e:	e000      	b.n	8000662 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
	...

08000670 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b089      	sub	sp, #36	@ 0x24
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000678:	2300      	movs	r3, #0
 800067a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d101      	bne.n	800068a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e130      	b.n	80008ec <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	691b      	ldr	r3, [r3, #16]
 800068e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000694:	2b00      	cmp	r3, #0
 8000696:	d109      	bne.n	80006ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 f939 	bl	8000910 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2200      	movs	r2, #0
 80006a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff3f 	bl	8000534 <LL_ADC_IsDeepPowerDownEnabled>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d004      	beq.n	80006c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ff25 	bl	8000510 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ff5a 	bl	8000584 <LL_ADC_IsInternalRegulatorEnabled>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d115      	bne.n	8000702 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff3e 	bl	800055c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80006e0:	4b84      	ldr	r3, [pc, #528]	@ (80008f4 <HAL_ADC_Init+0x284>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	099b      	lsrs	r3, r3, #6
 80006e6:	4a84      	ldr	r2, [pc, #528]	@ (80008f8 <HAL_ADC_Init+0x288>)
 80006e8:	fba2 2303 	umull	r2, r3, r2, r3
 80006ec:	099b      	lsrs	r3, r3, #6
 80006ee:	3301      	adds	r3, #1
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80006f4:	e002      	b.n	80006fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d1f9      	bne.n	80006f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff3c 	bl	8000584 <LL_ADC_IsInternalRegulatorEnabled>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d10d      	bne.n	800072e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000716:	f043 0210 	orr.w	r2, r3, #16
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000722:	f043 0201 	orr.w	r2, r3, #1
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800072a:	2301      	movs	r3, #1
 800072c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff75 	bl	8000622 <LL_ADC_REG_IsConversionOngoing>
 8000738:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800073e:	f003 0310 	and.w	r3, r3, #16
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 80c9 	bne.w	80008da <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	2b00      	cmp	r3, #0
 800074c:	f040 80c5 	bne.w	80008da <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000754:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000758:	f043 0202 	orr.w	r2, r3, #2
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff35 	bl	80005d4 <LL_ADC_IsEnabled>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d115      	bne.n	800079c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000770:	4862      	ldr	r0, [pc, #392]	@ (80008fc <HAL_ADC_Init+0x28c>)
 8000772:	f7ff ff2f 	bl	80005d4 <LL_ADC_IsEnabled>
 8000776:	4604      	mov	r4, r0
 8000778:	4861      	ldr	r0, [pc, #388]	@ (8000900 <HAL_ADC_Init+0x290>)
 800077a:	f7ff ff2b 	bl	80005d4 <LL_ADC_IsEnabled>
 800077e:	4603      	mov	r3, r0
 8000780:	431c      	orrs	r4, r3
 8000782:	4860      	ldr	r0, [pc, #384]	@ (8000904 <HAL_ADC_Init+0x294>)
 8000784:	f7ff ff26 	bl	80005d4 <LL_ADC_IsEnabled>
 8000788:	4603      	mov	r3, r0
 800078a:	4323      	orrs	r3, r4
 800078c:	2b00      	cmp	r3, #0
 800078e:	d105      	bne.n	800079c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	4619      	mov	r1, r3
 8000796:	485c      	ldr	r0, [pc, #368]	@ (8000908 <HAL_ADC_Init+0x298>)
 8000798:	f7ff fd94 	bl	80002c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7e5b      	ldrb	r3, [r3, #25]
 80007a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80007a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80007ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80007b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80007bc:	4313      	orrs	r3, r2
 80007be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d106      	bne.n	80007d8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007ce:	3b01      	subs	r3, #1
 80007d0:	045b      	lsls	r3, r3, #17
 80007d2:	69ba      	ldr	r2, [r7, #24]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d009      	beq.n	80007f4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007e4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80007ee:	69ba      	ldr	r2, [r7, #24]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	68da      	ldr	r2, [r3, #12]
 80007fa:	4b44      	ldr	r3, [pc, #272]	@ (800090c <HAL_ADC_Init+0x29c>)
 80007fc:	4013      	ands	r3, r2
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	6812      	ldr	r2, [r2, #0]
 8000802:	69b9      	ldr	r1, [r7, #24]
 8000804:	430b      	orrs	r3, r1
 8000806:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff1b 	bl	8000648 <LL_ADC_INJ_IsConversionOngoing>
 8000812:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d13d      	bne.n	8000896 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d13a      	bne.n	8000896 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000824:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800082c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800082e:	4313      	orrs	r3, r2
 8000830:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800083c:	f023 0302 	bic.w	r3, r3, #2
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	6812      	ldr	r2, [r2, #0]
 8000844:	69b9      	ldr	r1, [r7, #24]
 8000846:	430b      	orrs	r3, r1
 8000848:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000850:	2b01      	cmp	r3, #1
 8000852:	d118      	bne.n	8000886 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	691b      	ldr	r3, [r3, #16]
 800085a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800085e:	f023 0304 	bic.w	r3, r3, #4
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800086a:	4311      	orrs	r1, r2
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000870:	4311      	orrs	r1, r2
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000876:	430a      	orrs	r2, r1
 8000878:	431a      	orrs	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f042 0201 	orr.w	r2, r2, #1
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	e007      	b.n	8000896 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	691a      	ldr	r2, [r3, #16]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f022 0201 	bic.w	r2, r2, #1
 8000894:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	691b      	ldr	r3, [r3, #16]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d10c      	bne.n	80008b8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a4:	f023 010f 	bic.w	r1, r3, #15
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69db      	ldr	r3, [r3, #28]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80008b6:	e007      	b.n	80008c8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f022 020f 	bic.w	r2, r2, #15
 80008c6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008cc:	f023 0303 	bic.w	r3, r3, #3
 80008d0:	f043 0201 	orr.w	r2, r3, #1
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80008d8:	e007      	b.n	80008ea <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008de:	f043 0210 	orr.w	r2, r3, #16
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80008ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3724      	adds	r7, #36	@ 0x24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	20000008 	.word	0x20000008
 80008f8:	053e2d63 	.word	0x053e2d63
 80008fc:	50040000 	.word	0x50040000
 8000900:	50040100 	.word	0x50040100
 8000904:	50040200 	.word	0x50040200
 8000908:	50040300 	.word	0x50040300
 800090c:	fff0c007 	.word	0xfff0c007

08000910 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000930:	4853      	ldr	r0, [pc, #332]	@ (8000a80 <HAL_ADC_Start_DMA+0x15c>)
 8000932:	f7ff fddf 	bl	80004f4 <LL_ADC_GetMultimode>
 8000936:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fe70 	bl	8000622 <LL_ADC_REG_IsConversionOngoing>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	f040 8093 	bne.w	8000a70 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000950:	2b01      	cmp	r3, #1
 8000952:	d101      	bne.n	8000958 <HAL_ADC_Start_DMA+0x34>
 8000954:	2302      	movs	r3, #2
 8000956:	e08e      	b.n	8000a76 <HAL_ADC_Start_DMA+0x152>
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2201      	movs	r2, #1
 800095c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a47      	ldr	r2, [pc, #284]	@ (8000a84 <HAL_ADC_Start_DMA+0x160>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d008      	beq.n	800097c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d005      	beq.n	800097c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	2b05      	cmp	r3, #5
 8000974:	d002      	beq.n	800097c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	2b09      	cmp	r3, #9
 800097a:	d172      	bne.n	8000a62 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800097c:	68f8      	ldr	r0, [r7, #12]
 800097e:	f000 fc93 	bl	80012a8 <ADC_Enable>
 8000982:	4603      	mov	r3, r0
 8000984:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000986:	7dfb      	ldrb	r3, [r7, #23]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d165      	bne.n	8000a58 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000990:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000994:	f023 0301 	bic.w	r3, r3, #1
 8000998:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a38      	ldr	r2, [pc, #224]	@ (8000a88 <HAL_ADC_Start_DMA+0x164>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d002      	beq.n	80009b0 <HAL_ADC_Start_DMA+0x8c>
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	e000      	b.n	80009b2 <HAL_ADC_Start_DMA+0x8e>
 80009b0:	4b36      	ldr	r3, [pc, #216]	@ (8000a8c <HAL_ADC_Start_DMA+0x168>)
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d002      	beq.n	80009c0 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d105      	bne.n	80009cc <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d006      	beq.n	80009e6 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009dc:	f023 0206 	bic.w	r2, r3, #6
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80009e4:	e002      	b.n	80009ec <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2200      	movs	r2, #0
 80009ea:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f0:	4a27      	ldr	r2, [pc, #156]	@ (8000a90 <HAL_ADC_Start_DMA+0x16c>)
 80009f2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f8:	4a26      	ldr	r2, [pc, #152]	@ (8000a94 <HAL_ADC_Start_DMA+0x170>)
 80009fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a00:	4a25      	ldr	r2, [pc, #148]	@ (8000a98 <HAL_ADC_Start_DMA+0x174>)
 8000a02:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	221c      	movs	r2, #28
 8000a0a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	685a      	ldr	r2, [r3, #4]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f042 0210 	orr.w	r2, r2, #16
 8000a22:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	68da      	ldr	r2, [r3, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f042 0201 	orr.w	r2, r2, #1
 8000a32:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	3340      	adds	r3, #64	@ 0x40
 8000a3e:	4619      	mov	r1, r3
 8000a40:	68ba      	ldr	r2, [r7, #8]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f000 ff30 	bl	80018a8 <HAL_DMA_Start_IT>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fdd2 	bl	80005fa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8000a56:	e00d      	b.n	8000a74 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8000a60:	e008      	b.n	8000a74 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8000a6e:	e001      	b.n	8000a74 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000a70:	2302      	movs	r3, #2
 8000a72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	50040300 	.word	0x50040300
 8000a84:	50040200 	.word	0x50040200
 8000a88:	50040100 	.word	0x50040100
 8000a8c:	50040000 	.word	0x50040000
 8000a90:	080013b5 	.word	0x080013b5
 8000a94:	0800148d 	.word	0x0800148d
 8000a98:	080014a9 	.word	0x080014a9

08000a9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b0b6      	sub	sp, #216	@ 0xd8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d101      	bne.n	8000ae6 <HAL_ADC_ConfigChannel+0x22>
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	e3c9      	b.n	800127a <HAL_ADC_ConfigChannel+0x7b6>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fd95 	bl	8000622 <LL_ADC_REG_IsConversionOngoing>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f040 83aa 	bne.w	8001254 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	2b05      	cmp	r3, #5
 8000b0e:	d824      	bhi.n	8000b5a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	3b02      	subs	r3, #2
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d81b      	bhi.n	8000b52 <HAL_ADC_ConfigChannel+0x8e>
 8000b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b20 <HAL_ADC_ConfigChannel+0x5c>)
 8000b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b20:	08000b31 	.word	0x08000b31
 8000b24:	08000b39 	.word	0x08000b39
 8000b28:	08000b41 	.word	0x08000b41
 8000b2c:	08000b49 	.word	0x08000b49
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8000b30:	230c      	movs	r3, #12
 8000b32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000b36:	e010      	b.n	8000b5a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8000b38:	2312      	movs	r3, #18
 8000b3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000b3e:	e00c      	b.n	8000b5a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8000b40:	2318      	movs	r3, #24
 8000b42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000b46:	e008      	b.n	8000b5a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8000b48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000b50:	e003      	b.n	8000b5a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8000b52:	2306      	movs	r3, #6
 8000b54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000b58:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6818      	ldr	r0, [r3, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8000b68:	f7ff fc48 	bl	80003fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fd56 	bl	8000622 <LL_ADC_REG_IsConversionOngoing>
 8000b76:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fd62 	bl	8000648 <LL_ADC_INJ_IsConversionOngoing>
 8000b84:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f040 81a4 	bne.w	8000eda <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 819f 	bne.w	8000eda <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	6819      	ldr	r1, [r3, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	f7ff fc53 	bl	8000454 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	695a      	ldr	r2, [r3, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	08db      	lsrs	r3, r3, #3
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	2b04      	cmp	r3, #4
 8000bce:	d00a      	beq.n	8000be6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	6919      	ldr	r1, [r3, #16]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000be0:	f7ff fba4 	bl	800032c <LL_ADC_SetOffset>
 8000be4:	e179      	b.n	8000eda <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fbc1 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d10a      	bne.n	8000c12 <HAL_ADC_ConfigChannel+0x14e>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fbb6 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	0e9b      	lsrs	r3, r3, #26
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	e01e      	b.n	8000c50 <HAL_ADC_ConfigChannel+0x18c>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fbab 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000c28:	fa93 f3a3 	rbit	r3, r3
 8000c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000c38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d101      	bne.n	8000c44 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8000c40:	2320      	movs	r3, #32
 8000c42:	e004      	b.n	8000c4e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8000c44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000c48:	fab3 f383 	clz	r3, r3
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d105      	bne.n	8000c68 <HAL_ADC_ConfigChannel+0x1a4>
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	0e9b      	lsrs	r3, r3, #26
 8000c62:	f003 031f 	and.w	r3, r3, #31
 8000c66:	e018      	b.n	8000c9a <HAL_ADC_ConfigChannel+0x1d6>
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000c74:	fa93 f3a3 	rbit	r3, r3
 8000c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8000c7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8000c84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8000c8c:	2320      	movs	r3, #32
 8000c8e:	e004      	b.n	8000c9a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8000c90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000c94:	fab3 f383 	clz	r3, r3
 8000c98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d106      	bne.n	8000cac <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fb7a 	bl	80003a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fb5e 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10a      	bne.n	8000cd8 <HAL_ADC_ConfigChannel+0x214>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fb53 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	0e9b      	lsrs	r3, r3, #26
 8000cd2:	f003 021f 	and.w	r2, r3, #31
 8000cd6:	e01e      	b.n	8000d16 <HAL_ADC_ConfigChannel+0x252>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fb48 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000cee:	fa93 f3a3 	rbit	r3, r3
 8000cf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8000cf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8000cfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8000d06:	2320      	movs	r3, #32
 8000d08:	e004      	b.n	8000d14 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8000d0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000d0e:	fab3 f383 	clz	r3, r3
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d105      	bne.n	8000d2e <HAL_ADC_ConfigChannel+0x26a>
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	0e9b      	lsrs	r3, r3, #26
 8000d28:	f003 031f 	and.w	r3, r3, #31
 8000d2c:	e018      	b.n	8000d60 <HAL_ADC_ConfigChannel+0x29c>
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000d3a:	fa93 f3a3 	rbit	r3, r3
 8000d3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8000d42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8000d4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8000d52:	2320      	movs	r3, #32
 8000d54:	e004      	b.n	8000d60 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8000d56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000d5a:	fab3 f383 	clz	r3, r3
 8000d5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d106      	bne.n	8000d72 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fb17 	bl	80003a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2102      	movs	r1, #2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fafb 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10a      	bne.n	8000d9e <HAL_ADC_ConfigChannel+0x2da>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff faf0 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	0e9b      	lsrs	r3, r3, #26
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	e01e      	b.n	8000ddc <HAL_ADC_ConfigChannel+0x318>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2102      	movs	r1, #2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fae5 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000daa:	4603      	mov	r3, r0
 8000dac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000db4:	fa93 f3a3 	rbit	r3, r3
 8000db8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8000dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000dc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8000dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8000dcc:	2320      	movs	r3, #32
 8000dce:	e004      	b.n	8000dda <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8000dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dd4:	fab3 f383 	clz	r3, r3
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d105      	bne.n	8000df4 <HAL_ADC_ConfigChannel+0x330>
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	0e9b      	lsrs	r3, r3, #26
 8000dee:	f003 031f 	and.w	r3, r3, #31
 8000df2:	e014      	b.n	8000e1e <HAL_ADC_ConfigChannel+0x35a>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000dfc:	fa93 f3a3 	rbit	r3, r3
 8000e00:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8000e02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8000e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8000e10:	2320      	movs	r3, #32
 8000e12:	e004      	b.n	8000e1e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8000e14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e18:	fab3 f383 	clz	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d106      	bne.n	8000e30 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2200      	movs	r2, #0
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fab8 	bl	80003a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2103      	movs	r1, #3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fa9c 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10a      	bne.n	8000e5c <HAL_ADC_ConfigChannel+0x398>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2103      	movs	r1, #3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fa91 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	0e9b      	lsrs	r3, r3, #26
 8000e56:	f003 021f 	and.w	r2, r3, #31
 8000e5a:	e017      	b.n	8000e8c <HAL_ADC_ConfigChannel+0x3c8>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2103      	movs	r1, #3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fa86 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8000e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e76:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8000e78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8000e7e:	2320      	movs	r3, #32
 8000e80:	e003      	b.n	8000e8a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8000e82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000e84:	fab3 f383 	clz	r3, r3
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d105      	bne.n	8000ea4 <HAL_ADC_ConfigChannel+0x3e0>
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	0e9b      	lsrs	r3, r3, #26
 8000e9e:	f003 031f 	and.w	r3, r3, #31
 8000ea2:	e011      	b.n	8000ec8 <HAL_ADC_ConfigChannel+0x404>
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000eac:	fa93 f3a3 	rbit	r3, r3
 8000eb0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8000eb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8000eb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8000ebc:	2320      	movs	r3, #32
 8000ebe:	e003      	b.n	8000ec8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8000ec0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000ec2:	fab3 f383 	clz	r3, r3
 8000ec6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d106      	bne.n	8000eda <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2103      	movs	r1, #3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fa63 	bl	80003a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fb78 	bl	80005d4 <LL_ADC_IsEnabled>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f040 8140 	bne.w	800116c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	6819      	ldr	r1, [r3, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	f7ff fad7 	bl	80004ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	4a8f      	ldr	r2, [pc, #572]	@ (8001140 <HAL_ADC_ConfigChannel+0x67c>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	f040 8131 	bne.w	800116c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10b      	bne.n	8000f32 <HAL_ADC_ConfigChannel+0x46e>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	0e9b      	lsrs	r3, r3, #26
 8000f20:	3301      	adds	r3, #1
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	2b09      	cmp	r3, #9
 8000f28:	bf94      	ite	ls
 8000f2a:	2301      	movls	r3, #1
 8000f2c:	2300      	movhi	r3, #0
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	e019      	b.n	8000f66 <HAL_ADC_ConfigChannel+0x4a2>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f3a:	fa93 f3a3 	rbit	r3, r3
 8000f3e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8000f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f42:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8000f44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8000f4a:	2320      	movs	r3, #32
 8000f4c:	e003      	b.n	8000f56 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8000f4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f50:	fab3 f383 	clz	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	3301      	adds	r3, #1
 8000f58:	f003 031f 	and.w	r3, r3, #31
 8000f5c:	2b09      	cmp	r3, #9
 8000f5e:	bf94      	ite	ls
 8000f60:	2301      	movls	r3, #1
 8000f62:	2300      	movhi	r3, #0
 8000f64:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d079      	beq.n	800105e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d107      	bne.n	8000f86 <HAL_ADC_ConfigChannel+0x4c2>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	0e9b      	lsrs	r3, r3, #26
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	069b      	lsls	r3, r3, #26
 8000f80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000f84:	e015      	b.n	8000fb2 <HAL_ADC_ConfigChannel+0x4ee>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f8e:	fa93 f3a3 	rbit	r3, r3
 8000f92:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8000f94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f96:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8000f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8000f9e:	2320      	movs	r3, #32
 8000fa0:	e003      	b.n	8000faa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8000fa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000fa4:	fab3 f383 	clz	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	3301      	adds	r3, #1
 8000fac:	069b      	lsls	r3, r3, #26
 8000fae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d109      	bne.n	8000fd2 <HAL_ADC_ConfigChannel+0x50e>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	0e9b      	lsrs	r3, r3, #26
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	2101      	movs	r1, #1
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	e017      	b.n	8001002 <HAL_ADC_ConfigChannel+0x53e>
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fda:	fa93 f3a3 	rbit	r3, r3
 8000fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8000fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fe2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8000fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8000fea:	2320      	movs	r3, #32
 8000fec:	e003      	b.n	8000ff6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8000fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ff0:	fab3 f383 	clz	r3, r3
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	f003 031f 	and.w	r3, r3, #31
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	ea42 0103 	orr.w	r1, r2, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10a      	bne.n	8001028 <HAL_ADC_ConfigChannel+0x564>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	0e9b      	lsrs	r3, r3, #26
 8001018:	3301      	adds	r3, #1
 800101a:	f003 021f 	and.w	r2, r3, #31
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	051b      	lsls	r3, r3, #20
 8001026:	e018      	b.n	800105a <HAL_ADC_ConfigChannel+0x596>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001038:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800103a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800103c:	2b00      	cmp	r3, #0
 800103e:	d101      	bne.n	8001044 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001040:	2320      	movs	r3, #32
 8001042:	e003      	b.n	800104c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001046:	fab3 f383 	clz	r3, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	3301      	adds	r3, #1
 800104e:	f003 021f 	and.w	r2, r3, #31
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800105a:	430b      	orrs	r3, r1
 800105c:	e081      	b.n	8001162 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001066:	2b00      	cmp	r3, #0
 8001068:	d107      	bne.n	800107a <HAL_ADC_ConfigChannel+0x5b6>
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	0e9b      	lsrs	r3, r3, #26
 8001070:	3301      	adds	r3, #1
 8001072:	069b      	lsls	r3, r3, #26
 8001074:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001078:	e015      	b.n	80010a6 <HAL_ADC_ConfigChannel+0x5e2>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800108c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001092:	2320      	movs	r3, #32
 8001094:	e003      	b.n	800109e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001098:	fab3 f383 	clz	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	3301      	adds	r3, #1
 80010a0:	069b      	lsls	r3, r3, #26
 80010a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d109      	bne.n	80010c6 <HAL_ADC_ConfigChannel+0x602>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	0e9b      	lsrs	r3, r3, #26
 80010b8:	3301      	adds	r3, #1
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	2101      	movs	r1, #1
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	e017      	b.n	80010f6 <HAL_ADC_ConfigChannel+0x632>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	fa93 f3a3 	rbit	r3, r3
 80010d2:	61bb      	str	r3, [r7, #24]
  return result;
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80010d8:	6a3b      	ldr	r3, [r7, #32]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80010de:	2320      	movs	r3, #32
 80010e0:	e003      	b.n	80010ea <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	fab3 f383 	clz	r3, r3
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	3301      	adds	r3, #1
 80010ec:	f003 031f 	and.w	r3, r3, #31
 80010f0:	2101      	movs	r1, #1
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	ea42 0103 	orr.w	r1, r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10d      	bne.n	8001122 <HAL_ADC_ConfigChannel+0x65e>
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	0e9b      	lsrs	r3, r3, #26
 800110c:	3301      	adds	r3, #1
 800110e:	f003 021f 	and.w	r2, r3, #31
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	3b1e      	subs	r3, #30
 800111a:	051b      	lsls	r3, r3, #20
 800111c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001120:	e01e      	b.n	8001160 <HAL_ADC_ConfigChannel+0x69c>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	60fb      	str	r3, [r7, #12]
  return result;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d104      	bne.n	8001144 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800113a:	2320      	movs	r3, #32
 800113c:	e006      	b.n	800114c <HAL_ADC_ConfigChannel+0x688>
 800113e:	bf00      	nop
 8001140:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fab3 f383 	clz	r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	3301      	adds	r3, #1
 800114e:	f003 021f 	and.w	r2, r3, #31
 8001152:	4613      	mov	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	3b1e      	subs	r3, #30
 800115a:	051b      	lsls	r3, r3, #20
 800115c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001160:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff f974 	bl	8000454 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b44      	ldr	r3, [pc, #272]	@ (8001284 <HAL_ADC_ConfigChannel+0x7c0>)
 8001172:	4013      	ands	r3, r2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d07a      	beq.n	800126e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001178:	4843      	ldr	r0, [pc, #268]	@ (8001288 <HAL_ADC_ConfigChannel+0x7c4>)
 800117a:	f7ff f8c9 	bl	8000310 <LL_ADC_GetCommonPathInternalCh>
 800117e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a41      	ldr	r2, [pc, #260]	@ (800128c <HAL_ADC_ConfigChannel+0x7c8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d12c      	bne.n	80011e6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800118c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d126      	bne.n	80011e6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a3c      	ldr	r2, [pc, #240]	@ (8001290 <HAL_ADC_ConfigChannel+0x7cc>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d004      	beq.n	80011ac <HAL_ADC_ConfigChannel+0x6e8>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a3b      	ldr	r2, [pc, #236]	@ (8001294 <HAL_ADC_ConfigChannel+0x7d0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d15d      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80011ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80011b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80011b4:	4619      	mov	r1, r3
 80011b6:	4834      	ldr	r0, [pc, #208]	@ (8001288 <HAL_ADC_ConfigChannel+0x7c4>)
 80011b8:	f7ff f897 	bl	80002ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011bc:	4b36      	ldr	r3, [pc, #216]	@ (8001298 <HAL_ADC_ConfigChannel+0x7d4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	099b      	lsrs	r3, r3, #6
 80011c2:	4a36      	ldr	r2, [pc, #216]	@ (800129c <HAL_ADC_ConfigChannel+0x7d8>)
 80011c4:	fba2 2303 	umull	r2, r3, r2, r3
 80011c8:	099b      	lsrs	r3, r3, #6
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80011d6:	e002      	b.n	80011de <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	3b01      	subs	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f9      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80011e4:	e040      	b.n	8001268 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a2d      	ldr	r2, [pc, #180]	@ (80012a0 <HAL_ADC_ConfigChannel+0x7dc>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d118      	bne.n	8001222 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80011f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80011f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d112      	bne.n	8001222 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a23      	ldr	r2, [pc, #140]	@ (8001290 <HAL_ADC_ConfigChannel+0x7cc>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d004      	beq.n	8001210 <HAL_ADC_ConfigChannel+0x74c>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a22      	ldr	r2, [pc, #136]	@ (8001294 <HAL_ADC_ConfigChannel+0x7d0>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d12d      	bne.n	800126c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001210:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001214:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001218:	4619      	mov	r1, r3
 800121a:	481b      	ldr	r0, [pc, #108]	@ (8001288 <HAL_ADC_ConfigChannel+0x7c4>)
 800121c:	f7ff f865 	bl	80002ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001220:	e024      	b.n	800126c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a1f      	ldr	r2, [pc, #124]	@ (80012a4 <HAL_ADC_ConfigChannel+0x7e0>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d120      	bne.n	800126e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800122c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001230:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d11a      	bne.n	800126e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a14      	ldr	r2, [pc, #80]	@ (8001290 <HAL_ADC_ConfigChannel+0x7cc>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d115      	bne.n	800126e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001242:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001246:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800124a:	4619      	mov	r1, r3
 800124c:	480e      	ldr	r0, [pc, #56]	@ (8001288 <HAL_ADC_ConfigChannel+0x7c4>)
 800124e:	f7ff f84c 	bl	80002ea <LL_ADC_SetCommonPathInternalCh>
 8001252:	e00c      	b.n	800126e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001258:	f043 0220 	orr.w	r2, r3, #32
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001266:	e002      	b.n	800126e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001268:	bf00      	nop
 800126a:	e000      	b.n	800126e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800126c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001276:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800127a:	4618      	mov	r0, r3
 800127c:	37d8      	adds	r7, #216	@ 0xd8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	80080000 	.word	0x80080000
 8001288:	50040300 	.word	0x50040300
 800128c:	c7520000 	.word	0xc7520000
 8001290:	50040000 	.word	0x50040000
 8001294:	50040200 	.word	0x50040200
 8001298:	20000008 	.word	0x20000008
 800129c:	053e2d63 	.word	0x053e2d63
 80012a0:	cb840000 	.word	0xcb840000
 80012a4:	80000001 	.word	0x80000001

080012a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f98b 	bl	80005d4 <LL_ADC_IsEnabled>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d169      	bne.n	8001398 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	4b36      	ldr	r3, [pc, #216]	@ (80013a4 <ADC_Enable+0xfc>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00d      	beq.n	80012ee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012d6:	f043 0210 	orr.w	r2, r3, #16
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e2:	f043 0201 	orr.w	r2, r3, #1
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e055      	b.n	800139a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f95a 	bl	80005ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80012f8:	482b      	ldr	r0, [pc, #172]	@ (80013a8 <ADC_Enable+0x100>)
 80012fa:	f7ff f809 	bl	8000310 <LL_ADC_GetCommonPathInternalCh>
 80012fe:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001300:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001304:	2b00      	cmp	r3, #0
 8001306:	d013      	beq.n	8001330 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <ADC_Enable+0x104>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	099b      	lsrs	r3, r3, #6
 800130e:	4a28      	ldr	r2, [pc, #160]	@ (80013b0 <ADC_Enable+0x108>)
 8001310:	fba2 2303 	umull	r2, r3, r2, r3
 8001314:	099b      	lsrs	r3, r3, #6
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001322:	e002      	b.n	800132a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	3b01      	subs	r3, #1
 8001328:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f9      	bne.n	8001324 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001330:	f7fe ffbc 	bl	80002ac <HAL_GetTick>
 8001334:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001336:	e028      	b.n	800138a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f949 	bl	80005d4 <LL_ADC_IsEnabled>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d104      	bne.n	8001352 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f92d 	bl	80005ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001352:	f7fe ffab 	bl	80002ac <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d914      	bls.n	800138a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b01      	cmp	r3, #1
 800136c:	d00d      	beq.n	800138a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001372:	f043 0210 	orr.w	r2, r3, #16
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137e:	f043 0201 	orr.w	r2, r3, #1
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e007      	b.n	800139a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b01      	cmp	r3, #1
 8001396:	d1cf      	bne.n	8001338 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	8000003f 	.word	0x8000003f
 80013a8:	50040300 	.word	0x50040300
 80013ac:	20000008 	.word	0x20000008
 80013b0:	053e2d63 	.word	0x053e2d63

080013b4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d14b      	bne.n	8001466 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d021      	beq.n	800142c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7fe fff2 	bl	80003d6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d032      	beq.n	800145e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d12b      	bne.n	800145e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800140a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001416:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d11f      	bne.n	800145e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001422:	f043 0201 	orr.w	r2, r3, #1
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	655a      	str	r2, [r3, #84]	@ 0x54
 800142a:	e018      	b.n	800145e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d111      	bne.n	800145e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800143e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800144a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001456:	f043 0201 	orr.w	r2, r3, #1
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f001 fd92 	bl	8002f88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001464:	e00e      	b.n	8001484 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff fb1c 	bl	8000ab0 <HAL_ADC_ErrorCallback>
}
 8001478:	e004      	b.n	8001484 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	4798      	blx	r3
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001498:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f7ff fafe 	bl	8000a9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	f043 0204 	orr.w	r2, r3, #4
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7ff faee 	bl	8000ab0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	@ (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4907      	ldr	r1, [pc, #28]	@ (8001578 <__NVIC_EnableIRQ+0x38>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	@ (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	@ (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	@ 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	@ 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f7ff ff8e 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	@ (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff29 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff3e 	bl	8001524 <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff8e 	bl	80015d0 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5d 	bl	800157c <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff31 	bl	8001540 <__NVIC_EnableIRQ>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffa2 	bl	8001638 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b04      	cmp	r3, #4
 800170c:	d106      	bne.n	800171c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a08      	ldr	r2, [pc, #32]	@ (8001734 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800171a:	e005      	b.n	8001728 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001722:	f023 0304 	bic.w	r3, r3, #4
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000e010 	.word	0xe000e010

08001738 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e098      	b.n	800187c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	4b4d      	ldr	r3, [pc, #308]	@ (8001888 <HAL_DMA_Init+0x150>)
 8001752:	429a      	cmp	r2, r3
 8001754:	d80f      	bhi.n	8001776 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	4b4b      	ldr	r3, [pc, #300]	@ (800188c <HAL_DMA_Init+0x154>)
 800175e:	4413      	add	r3, r2
 8001760:	4a4b      	ldr	r2, [pc, #300]	@ (8001890 <HAL_DMA_Init+0x158>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	091b      	lsrs	r3, r3, #4
 8001768:	009a      	lsls	r2, r3, #2
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a48      	ldr	r2, [pc, #288]	@ (8001894 <HAL_DMA_Init+0x15c>)
 8001772:	641a      	str	r2, [r3, #64]	@ 0x40
 8001774:	e00e      	b.n	8001794 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4b46      	ldr	r3, [pc, #280]	@ (8001898 <HAL_DMA_Init+0x160>)
 800177e:	4413      	add	r3, r2
 8001780:	4a43      	ldr	r2, [pc, #268]	@ (8001890 <HAL_DMA_Init+0x158>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	009a      	lsls	r2, r3, #2
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a42      	ldr	r2, [pc, #264]	@ (800189c <HAL_DMA_Init+0x164>)
 8001792:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2202      	movs	r2, #2
 8001798:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80017aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	4313      	orrs	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017ee:	d039      	beq.n	8001864 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f4:	4a27      	ldr	r2, [pc, #156]	@ (8001894 <HAL_DMA_Init+0x15c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d11a      	bne.n	8001830 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017fa:	4b29      	ldr	r3, [pc, #164]	@ (80018a0 <HAL_DMA_Init+0x168>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	f003 031c 	and.w	r3, r3, #28
 8001806:	210f      	movs	r1, #15
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	4924      	ldr	r1, [pc, #144]	@ (80018a0 <HAL_DMA_Init+0x168>)
 8001810:	4013      	ands	r3, r2
 8001812:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001814:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <HAL_DMA_Init+0x168>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6859      	ldr	r1, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001820:	f003 031c 	and.w	r3, r3, #28
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	491d      	ldr	r1, [pc, #116]	@ (80018a0 <HAL_DMA_Init+0x168>)
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]
 800182e:	e019      	b.n	8001864 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001830:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <HAL_DMA_Init+0x16c>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001838:	f003 031c 	and.w	r3, r3, #28
 800183c:	210f      	movs	r1, #15
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	4917      	ldr	r1, [pc, #92]	@ (80018a4 <HAL_DMA_Init+0x16c>)
 8001846:	4013      	ands	r3, r2
 8001848:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800184a:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <HAL_DMA_Init+0x16c>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6859      	ldr	r1, [r3, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	f003 031c 	and.w	r3, r3, #28
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	4911      	ldr	r1, [pc, #68]	@ (80018a4 <HAL_DMA_Init+0x16c>)
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	40020407 	.word	0x40020407
 800188c:	bffdfff8 	.word	0xbffdfff8
 8001890:	cccccccd 	.word	0xcccccccd
 8001894:	40020000 	.word	0x40020000
 8001898:	bffdfbf8 	.word	0xbffdfbf8
 800189c:	40020400 	.word	0x40020400
 80018a0:	400200a8 	.word	0x400200a8
 80018a4:	400204a8 	.word	0x400204a8

080018a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_DMA_Start_IT+0x20>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e04b      	b.n	8001960 <HAL_DMA_Start_IT+0xb8>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d13a      	bne.n	8001952 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2202      	movs	r2, #2
 80018e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0201 	bic.w	r2, r2, #1
 80018f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	68b9      	ldr	r1, [r7, #8]
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 f8e0 	bl	8001ac6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	2b00      	cmp	r3, #0
 800190c:	d008      	beq.n	8001920 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 020e 	orr.w	r2, r2, #14
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e00f      	b.n	8001940 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0204 	bic.w	r2, r2, #4
 800192e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 020a 	orr.w	r2, r2, #10
 800193e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0201 	orr.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	e005      	b.n	800195e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800195a:	2302      	movs	r3, #2
 800195c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800195e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001984:	f003 031c 	and.w	r3, r3, #28
 8001988:	2204      	movs	r2, #4
 800198a:	409a      	lsls	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d026      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x7a>
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	d021      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0320 	and.w	r3, r3, #32
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d107      	bne.n	80019bc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0204 	bic.w	r2, r2, #4
 80019ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c0:	f003 021c 	and.w	r2, r3, #28
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c8:	2104      	movs	r1, #4
 80019ca:	fa01 f202 	lsl.w	r2, r1, r2
 80019ce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d071      	beq.n	8001abc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80019e0:	e06c      	b.n	8001abc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e6:	f003 031c 	and.w	r3, r3, #28
 80019ea:	2202      	movs	r2, #2
 80019ec:	409a      	lsls	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d02e      	beq.n	8001a54 <HAL_DMA_IRQHandler+0xec>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d029      	beq.n	8001a54 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0320 	and.w	r3, r3, #32
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10b      	bne.n	8001a26 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 020a 	bic.w	r2, r2, #10
 8001a1c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	f003 021c 	and.w	r2, r3, #28
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	2102      	movs	r1, #2
 8001a34:	fa01 f202 	lsl.w	r2, r1, r2
 8001a38:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d038      	beq.n	8001abc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a52:	e033      	b.n	8001abc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a58:	f003 031c 	and.w	r3, r3, #28
 8001a5c:	2208      	movs	r2, #8
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d02a      	beq.n	8001abe <HAL_DMA_IRQHandler+0x156>
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d025      	beq.n	8001abe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 020e 	bic.w	r2, r2, #14
 8001a80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f003 021c 	and.w	r2, r3, #28
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
}
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b085      	sub	sp, #20
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad8:	f003 021c 	and.w	r2, r3, #28
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b10      	cmp	r3, #16
 8001af6:	d108      	bne.n	8001b0a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b08:	e007      	b.n	8001b1a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	60da      	str	r2, [r3, #12]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	e17f      	b.n	8001e38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fa01 f303 	lsl.w	r3, r1, r3
 8001b44:	4013      	ands	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8171 	beq.w	8001e32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d005      	beq.n	8001b68 <HAL_GPIO_Init+0x40>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d130      	bne.n	8001bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 0201 	and.w	r2, r3, #1
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d118      	bne.n	8001c08 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	08db      	lsrs	r3, r3, #3
 8001bf2:	f003 0201 	and.w	r2, r3, #1
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d017      	beq.n	8001c44 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d123      	bne.n	8001c98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	08da      	lsrs	r2, r3, #3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3208      	adds	r2, #8
 8001c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	220f      	movs	r2, #15
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	08da      	lsrs	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3208      	adds	r2, #8
 8001c92:	6939      	ldr	r1, [r7, #16]
 8001c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0203 	and.w	r2, r3, #3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80ac 	beq.w	8001e32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	4b5f      	ldr	r3, [pc, #380]	@ (8001e58 <HAL_GPIO_Init+0x330>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cde:	4a5e      	ldr	r2, [pc, #376]	@ (8001e58 <HAL_GPIO_Init+0x330>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ce6:	4b5c      	ldr	r3, [pc, #368]	@ (8001e58 <HAL_GPIO_Init+0x330>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cf2:	4a5a      	ldr	r2, [pc, #360]	@ (8001e5c <HAL_GPIO_Init+0x334>)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d1c:	d025      	beq.n	8001d6a <HAL_GPIO_Init+0x242>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4f      	ldr	r2, [pc, #316]	@ (8001e60 <HAL_GPIO_Init+0x338>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d01f      	beq.n	8001d66 <HAL_GPIO_Init+0x23e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4e      	ldr	r2, [pc, #312]	@ (8001e64 <HAL_GPIO_Init+0x33c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d019      	beq.n	8001d62 <HAL_GPIO_Init+0x23a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4d      	ldr	r2, [pc, #308]	@ (8001e68 <HAL_GPIO_Init+0x340>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_GPIO_Init+0x236>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4c      	ldr	r2, [pc, #304]	@ (8001e6c <HAL_GPIO_Init+0x344>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00d      	beq.n	8001d5a <HAL_GPIO_Init+0x232>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4b      	ldr	r2, [pc, #300]	@ (8001e70 <HAL_GPIO_Init+0x348>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d007      	beq.n	8001d56 <HAL_GPIO_Init+0x22e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4a      	ldr	r2, [pc, #296]	@ (8001e74 <HAL_GPIO_Init+0x34c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_GPIO_Init+0x22a>
 8001d4e:	2306      	movs	r3, #6
 8001d50:	e00c      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d52:	2307      	movs	r3, #7
 8001d54:	e00a      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d56:	2305      	movs	r3, #5
 8001d58:	e008      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e004      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e002      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	f002 0203 	and.w	r2, r2, #3
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	4093      	lsls	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d7c:	4937      	ldr	r1, [pc, #220]	@ (8001e5c <HAL_GPIO_Init+0x334>)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dae:	4a32      	ldr	r2, [pc, #200]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001db4:	4b30      	ldr	r3, [pc, #192]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dd8:	4a27      	ldr	r2, [pc, #156]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dde:	4b26      	ldr	r3, [pc, #152]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e02:	4a1d      	ldr	r2, [pc, #116]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e2c:	4a12      	ldr	r2, [pc, #72]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3301      	adds	r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f47f ae78 	bne.w	8001b38 <HAL_GPIO_Init+0x10>
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	371c      	adds	r7, #28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40010000 	.word	0x40010000
 8001e60:	48000400 	.word	0x48000400
 8001e64:	48000800 	.word	0x48000800
 8001e68:	48000c00 	.word	0x48000c00
 8001e6c:	48001000 	.word	0x48001000
 8001e70:	48001400 	.word	0x48001400
 8001e74:	48001800 	.word	0x48001800
 8001e78:	40010400 	.word	0x40010400

08001e7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e8e:	887a      	ldrh	r2, [r7, #2]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4013      	ands	r3, r2
 8001e94:	041a      	lsls	r2, r3, #16
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	43d9      	mvns	r1, r3
 8001e9a:	887b      	ldrh	r3, [r7, #2]
 8001e9c:	400b      	ands	r3, r1
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	619a      	str	r2, [r3, #24]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40007000 	.word	0x40007000

08001ecc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eda:	d130      	bne.n	8001f3e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001edc:	4b23      	ldr	r3, [pc, #140]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ee8:	d038      	beq.n	8001f5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eea:	4b20      	ldr	r3, [pc, #128]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ef8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001efa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2232      	movs	r2, #50	@ 0x32
 8001f00:	fb02 f303 	mul.w	r3, r2, r3
 8001f04:	4a1b      	ldr	r2, [pc, #108]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9b      	lsrs	r3, r3, #18
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f10:	e002      	b.n	8001f18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f18:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f24:	d102      	bne.n	8001f2c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f2      	bne.n	8001f12 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f38:	d110      	bne.n	8001f5c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e00f      	b.n	8001f5e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f4a:	d007      	beq.n	8001f5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f4c:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f54:	4a05      	ldr	r2, [pc, #20]	@ (8001f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40007000 	.word	0x40007000
 8001f70:	20000008 	.word	0x20000008
 8001f74:	431bde83 	.word	0x431bde83

08001f78 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e3ca      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f8a:	4b97      	ldr	r3, [pc, #604]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f94:	4b94      	ldr	r3, [pc, #592]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80e4 	beq.w	8002174 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x4a>
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b0c      	cmp	r3, #12
 8001fb6:	f040 808b 	bne.w	80020d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	f040 8087 	bne.w	80020d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fc2:	4b89      	ldr	r3, [pc, #548]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_RCC_OscConfig+0x62>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e3a2      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1a      	ldr	r2, [r3, #32]
 8001fde:	4b82      	ldr	r3, [pc, #520]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d004      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x7c>
 8001fea:	4b7f      	ldr	r3, [pc, #508]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ff2:	e005      	b.n	8002000 <HAL_RCC_OscConfig+0x88>
 8001ff4:	4b7c      	ldr	r3, [pc, #496]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002000:	4293      	cmp	r3, r2
 8002002:	d223      	bcs.n	800204c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 fd29 	bl	8002a60 <RCC_SetFlashLatencyFromMSIRange>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e383      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002018:	4b73      	ldr	r3, [pc, #460]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a72      	ldr	r2, [pc, #456]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 800201e:	f043 0308 	orr.w	r3, r3, #8
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	4b70      	ldr	r3, [pc, #448]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	496d      	ldr	r1, [pc, #436]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002036:	4b6c      	ldr	r3, [pc, #432]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	4968      	ldr	r1, [pc, #416]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
 800204a:	e025      	b.n	8002098 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800204c:	4b66      	ldr	r3, [pc, #408]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a65      	ldr	r2, [pc, #404]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002052:	f043 0308 	orr.w	r3, r3, #8
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b63      	ldr	r3, [pc, #396]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4960      	ldr	r1, [pc, #384]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800206a:	4b5f      	ldr	r3, [pc, #380]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	495b      	ldr	r1, [pc, #364]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d109      	bne.n	8002098 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fce9 	bl	8002a60 <RCC_SetFlashLatencyFromMSIRange>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e343      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002098:	f000 fc4a 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b52      	ldr	r3, [pc, #328]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	4950      	ldr	r1, [pc, #320]	@ (80021ec <HAL_RCC_OscConfig+0x274>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	4a4e      	ldr	r2, [pc, #312]	@ (80021f0 <HAL_RCC_OscConfig+0x278>)
 80020b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020b8:	4b4e      	ldr	r3, [pc, #312]	@ (80021f4 <HAL_RCC_OscConfig+0x27c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe f8a5 	bl	800020c <HAL_InitTick>
 80020c2:	4603      	mov	r3, r0
 80020c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d052      	beq.n	8002172 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	e327      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d032      	beq.n	800213e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020d8:	4b43      	ldr	r3, [pc, #268]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a42      	ldr	r2, [pc, #264]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020e4:	f7fe f8e2 	bl	80002ac <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ec:	f7fe f8de 	bl	80002ac <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e310      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020fe:	4b3a      	ldr	r3, [pc, #232]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800210a:	4b37      	ldr	r3, [pc, #220]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a36      	ldr	r2, [pc, #216]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002110:	f043 0308 	orr.w	r3, r3, #8
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b34      	ldr	r3, [pc, #208]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4931      	ldr	r1, [pc, #196]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002128:	4b2f      	ldr	r3, [pc, #188]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	492c      	ldr	r1, [pc, #176]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
 800213c:	e01a      	b.n	8002174 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800213e:	4b2a      	ldr	r3, [pc, #168]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a29      	ldr	r2, [pc, #164]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800214a:	f7fe f8af 	bl	80002ac <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002152:	f7fe f8ab 	bl	80002ac <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e2dd      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002164:	4b20      	ldr	r3, [pc, #128]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0x1da>
 8002170:	e000      	b.n	8002174 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002172:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d074      	beq.n	800226a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2b08      	cmp	r3, #8
 8002184:	d005      	beq.n	8002192 <HAL_RCC_OscConfig+0x21a>
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b0c      	cmp	r3, #12
 800218a:	d10e      	bne.n	80021aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d10b      	bne.n	80021aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002192:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d064      	beq.n	8002268 <HAL_RCC_OscConfig+0x2f0>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d160      	bne.n	8002268 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e2ba      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x24a>
 80021b4:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0b      	ldr	r2, [pc, #44]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 80021ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	e026      	b.n	8002210 <HAL_RCC_OscConfig+0x298>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021ca:	d115      	bne.n	80021f8 <HAL_RCC_OscConfig+0x280>
 80021cc:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a05      	ldr	r2, [pc, #20]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 80021d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b03      	ldr	r3, [pc, #12]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a02      	ldr	r2, [pc, #8]	@ (80021e8 <HAL_RCC_OscConfig+0x270>)
 80021de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	e014      	b.n	8002210 <HAL_RCC_OscConfig+0x298>
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	080031a0 	.word	0x080031a0
 80021f0:	20000008 	.word	0x20000008
 80021f4:	20000000 	.word	0x20000000
 80021f8:	4ba0      	ldr	r3, [pc, #640]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a9f      	ldr	r2, [pc, #636]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b9d      	ldr	r3, [pc, #628]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a9c      	ldr	r2, [pc, #624]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 800220a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800220e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7fe f848 	bl	80002ac <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7fe f844 	bl	80002ac <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	@ 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e276      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002232:	4b92      	ldr	r3, [pc, #584]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x2a8>
 800223e:	e014      	b.n	800226a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7fe f834 	bl	80002ac <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7fe f830 	bl	80002ac <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	@ 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e262      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800225a:	4b88      	ldr	r3, [pc, #544]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x2d0>
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d060      	beq.n	8002338 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2b04      	cmp	r3, #4
 800227a:	d005      	beq.n	8002288 <HAL_RCC_OscConfig+0x310>
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b0c      	cmp	r3, #12
 8002280:	d119      	bne.n	80022b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d116      	bne.n	80022b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002288:	4b7c      	ldr	r3, [pc, #496]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_OscConfig+0x328>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e23f      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a0:	4b76      	ldr	r3, [pc, #472]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	061b      	lsls	r3, r3, #24
 80022ae:	4973      	ldr	r1, [pc, #460]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b4:	e040      	b.n	8002338 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d023      	beq.n	8002306 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022be:	4b6f      	ldr	r3, [pc, #444]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a6e      	ldr	r2, [pc, #440]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 80022c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7fd ffef 	bl	80002ac <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d2:	f7fd ffeb 	bl	80002ac <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e21d      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e4:	4b65      	ldr	r3, [pc, #404]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f0:	4b62      	ldr	r3, [pc, #392]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	061b      	lsls	r3, r3, #24
 80022fe:	495f      	ldr	r1, [pc, #380]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
 8002304:	e018      	b.n	8002338 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002306:	4b5d      	ldr	r3, [pc, #372]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a5c      	ldr	r2, [pc, #368]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 800230c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002312:	f7fd ffcb 	bl	80002ac <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231a:	f7fd ffc7 	bl	80002ac <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e1f9      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800232c:	4b53      	ldr	r3, [pc, #332]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f0      	bne.n	800231a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d03c      	beq.n	80023be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d01c      	beq.n	8002386 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800234c:	4b4b      	ldr	r3, [pc, #300]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 800234e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002352:	4a4a      	ldr	r2, [pc, #296]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235c:	f7fd ffa6 	bl	80002ac <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002364:	f7fd ffa2 	bl	80002ac <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1d4      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002376:	4b41      	ldr	r3, [pc, #260]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 8002378:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ef      	beq.n	8002364 <HAL_RCC_OscConfig+0x3ec>
 8002384:	e01b      	b.n	80023be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002386:	4b3d      	ldr	r3, [pc, #244]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 8002388:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800238c:	4a3b      	ldr	r2, [pc, #236]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 800238e:	f023 0301 	bic.w	r3, r3, #1
 8002392:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002396:	f7fd ff89 	bl	80002ac <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800239e:	f7fd ff85 	bl	80002ac <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e1b7      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023b0:	4b32      	ldr	r3, [pc, #200]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 80023b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ef      	bne.n	800239e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 80a6 	beq.w	8002518 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023cc:	2300      	movs	r3, #0
 80023ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023d0:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 80023d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10d      	bne.n	80023f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023dc:	4b27      	ldr	r3, [pc, #156]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e0:	4a26      	ldr	r2, [pc, #152]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 80023e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80023e8:	4b24      	ldr	r3, [pc, #144]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f4:	2301      	movs	r3, #1
 80023f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f8:	4b21      	ldr	r3, [pc, #132]	@ (8002480 <HAL_RCC_OscConfig+0x508>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d118      	bne.n	8002436 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002404:	4b1e      	ldr	r3, [pc, #120]	@ (8002480 <HAL_RCC_OscConfig+0x508>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a1d      	ldr	r2, [pc, #116]	@ (8002480 <HAL_RCC_OscConfig+0x508>)
 800240a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800240e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002410:	f7fd ff4c 	bl	80002ac <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002418:	f7fd ff48 	bl	80002ac <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e17a      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800242a:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <HAL_RCC_OscConfig+0x508>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d108      	bne.n	8002450 <HAL_RCC_OscConfig+0x4d8>
 800243e:	4b0f      	ldr	r3, [pc, #60]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 8002440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002444:	4a0d      	ldr	r2, [pc, #52]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800244e:	e029      	b.n	80024a4 <HAL_RCC_OscConfig+0x52c>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d115      	bne.n	8002484 <HAL_RCC_OscConfig+0x50c>
 8002458:	4b08      	ldr	r3, [pc, #32]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245e:	4a07      	ldr	r2, [pc, #28]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002468:	4b04      	ldr	r3, [pc, #16]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246e:	4a03      	ldr	r2, [pc, #12]	@ (800247c <HAL_RCC_OscConfig+0x504>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002478:	e014      	b.n	80024a4 <HAL_RCC_OscConfig+0x52c>
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000
 8002480:	40007000 	.word	0x40007000
 8002484:	4b9c      	ldr	r3, [pc, #624]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248a:	4a9b      	ldr	r2, [pc, #620]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002494:	4b98      	ldr	r3, [pc, #608]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249a:	4a97      	ldr	r2, [pc, #604]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d016      	beq.n	80024da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7fd fefe 	bl	80002ac <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7fd fefa 	bl	80002ac <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e12a      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ca:	4b8b      	ldr	r3, [pc, #556]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ed      	beq.n	80024b4 <HAL_RCC_OscConfig+0x53c>
 80024d8:	e015      	b.n	8002506 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024da:	f7fd fee7 	bl	80002ac <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7fd fee3 	bl	80002ac <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e113      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f8:	4b7f      	ldr	r3, [pc, #508]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ed      	bne.n	80024e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002506:	7ffb      	ldrb	r3, [r7, #31]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250c:	4b7a      	ldr	r3, [pc, #488]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002510:	4a79      	ldr	r2, [pc, #484]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 8002512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002516:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80fe 	beq.w	800271e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002526:	2b02      	cmp	r3, #2
 8002528:	f040 80d0 	bne.w	80026cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800252c:	4b72      	ldr	r3, [pc, #456]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f003 0203 	and.w	r2, r3, #3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253c:	429a      	cmp	r2, r3
 800253e:	d130      	bne.n	80025a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	3b01      	subs	r3, #1
 800254c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d127      	bne.n	80025a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800255c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d11f      	bne.n	80025a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800256c:	2a07      	cmp	r2, #7
 800256e:	bf14      	ite	ne
 8002570:	2201      	movne	r2, #1
 8002572:	2200      	moveq	r2, #0
 8002574:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002576:	4293      	cmp	r3, r2
 8002578:	d113      	bne.n	80025a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	3b01      	subs	r3, #1
 8002588:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d109      	bne.n	80025a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002598:	085b      	lsrs	r3, r3, #1
 800259a:	3b01      	subs	r3, #1
 800259c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d06e      	beq.n	8002680 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	2b0c      	cmp	r3, #12
 80025a6:	d069      	beq.n	800267c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025a8:	4b53      	ldr	r3, [pc, #332]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d105      	bne.n	80025c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025b4:	4b50      	ldr	r3, [pc, #320]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0ad      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025c4:	4b4c      	ldr	r3, [pc, #304]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a4b      	ldr	r2, [pc, #300]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 80025ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025d0:	f7fd fe6c 	bl	80002ac <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fd fe68 	bl	80002ac <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e09a      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ea:	4b43      	ldr	r3, [pc, #268]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f6:	4b40      	ldr	r3, [pc, #256]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	4b40      	ldr	r3, [pc, #256]	@ (80026fc <HAL_RCC_OscConfig+0x784>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002606:	3a01      	subs	r2, #1
 8002608:	0112      	lsls	r2, r2, #4
 800260a:	4311      	orrs	r1, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002610:	0212      	lsls	r2, r2, #8
 8002612:	4311      	orrs	r1, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002618:	0852      	lsrs	r2, r2, #1
 800261a:	3a01      	subs	r2, #1
 800261c:	0552      	lsls	r2, r2, #21
 800261e:	4311      	orrs	r1, r2
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002624:	0852      	lsrs	r2, r2, #1
 8002626:	3a01      	subs	r2, #1
 8002628:	0652      	lsls	r2, r2, #25
 800262a:	4311      	orrs	r1, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002630:	0912      	lsrs	r2, r2, #4
 8002632:	0452      	lsls	r2, r2, #17
 8002634:	430a      	orrs	r2, r1
 8002636:	4930      	ldr	r1, [pc, #192]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 8002638:	4313      	orrs	r3, r2
 800263a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800263c:	4b2e      	ldr	r3, [pc, #184]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a2d      	ldr	r2, [pc, #180]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 8002642:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002646:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002648:	4b2b      	ldr	r3, [pc, #172]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4a2a      	ldr	r2, [pc, #168]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 800264e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002652:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002654:	f7fd fe2a 	bl	80002ac <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265c:	f7fd fe26 	bl	80002ac <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e058      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266e:	4b22      	ldr	r3, [pc, #136]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800267a:	e050      	b.n	800271e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e04f      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002680:	4b1d      	ldr	r3, [pc, #116]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d148      	bne.n	800271e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800268c:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a19      	ldr	r2, [pc, #100]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 8002692:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002696:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002698:	4b17      	ldr	r3, [pc, #92]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4a16      	ldr	r2, [pc, #88]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 800269e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026a4:	f7fd fe02 	bl	80002ac <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fd fdfe 	bl	80002ac <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e030      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026be:	4b0e      	ldr	r3, [pc, #56]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x734>
 80026ca:	e028      	b.n	800271e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d023      	beq.n	800271a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d2:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a08      	ldr	r2, [pc, #32]	@ (80026f8 <HAL_RCC_OscConfig+0x780>)
 80026d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026de:	f7fd fde5 	bl	80002ac <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e4:	e00c      	b.n	8002700 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fd fde1 	bl	80002ac <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d905      	bls.n	8002700 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e013      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
 80026f8:	40021000 	.word	0x40021000
 80026fc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002700:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <HAL_RCC_OscConfig+0x7b0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ec      	bne.n	80026e6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800270c:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <HAL_RCC_OscConfig+0x7b0>)
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	4905      	ldr	r1, [pc, #20]	@ (8002728 <HAL_RCC_OscConfig+0x7b0>)
 8002712:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_RCC_OscConfig+0x7b4>)
 8002714:	4013      	ands	r3, r2
 8002716:	60cb      	str	r3, [r1, #12]
 8002718:	e001      	b.n	800271e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000
 800272c:	feeefffc 	.word	0xfeeefffc

08002730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0e7      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002744:	4b75      	ldr	r3, [pc, #468]	@ (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d910      	bls.n	8002774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b72      	ldr	r3, [pc, #456]	@ (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 0207 	bic.w	r2, r3, #7
 800275a:	4970      	ldr	r1, [pc, #448]	@ (800291c <HAL_RCC_ClockConfig+0x1ec>)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b6e      	ldr	r3, [pc, #440]	@ (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0cf      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d010      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	4b66      	ldr	r3, [pc, #408]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800278c:	429a      	cmp	r2, r3
 800278e:	d908      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002790:	4b63      	ldr	r3, [pc, #396]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4960      	ldr	r1, [pc, #384]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d04c      	beq.n	8002848 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d121      	bne.n	8002806 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e0a6      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ce:	4b54      	ldr	r3, [pc, #336]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d115      	bne.n	8002806 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e09a      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e08e      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e086      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002806:	4b46      	ldr	r3, [pc, #280]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f023 0203 	bic.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4943      	ldr	r1, [pc, #268]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002814:	4313      	orrs	r3, r2
 8002816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002818:	f7fd fd48 	bl	80002ac <HAL_GetTick>
 800281c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	e00a      	b.n	8002836 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002820:	f7fd fd44 	bl	80002ac <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e06e      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	4b3a      	ldr	r3, [pc, #232]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 020c 	and.w	r2, r3, #12
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	429a      	cmp	r2, r3
 8002846:	d1eb      	bne.n	8002820 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d010      	beq.n	8002876 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	4b31      	ldr	r3, [pc, #196]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002860:	429a      	cmp	r2, r3
 8002862:	d208      	bcs.n	8002876 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002864:	4b2e      	ldr	r3, [pc, #184]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	492b      	ldr	r1, [pc, #172]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002876:	4b29      	ldr	r3, [pc, #164]	@ (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d210      	bcs.n	80028a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002884:	4b25      	ldr	r3, [pc, #148]	@ (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 0207 	bic.w	r2, r3, #7
 800288c:	4923      	ldr	r1, [pc, #140]	@ (800291c <HAL_RCC_ClockConfig+0x1ec>)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002894:	4b21      	ldr	r3, [pc, #132]	@ (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e036      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	4918      	ldr	r1, [pc, #96]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028d0:	4b13      	ldr	r3, [pc, #76]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4910      	ldr	r1, [pc, #64]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028e4:	f000 f824 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	490b      	ldr	r1, [pc, #44]	@ (8002924 <HAL_RCC_ClockConfig+0x1f4>)
 80028f6:	5ccb      	ldrb	r3, [r1, r3]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002900:	4a09      	ldr	r2, [pc, #36]	@ (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 8002902:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002904:	4b09      	ldr	r3, [pc, #36]	@ (800292c <HAL_RCC_ClockConfig+0x1fc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fc7f 	bl	800020c <HAL_InitTick>
 800290e:	4603      	mov	r3, r0
 8002910:	72fb      	strb	r3, [r7, #11]

  return status;
 8002912:	7afb      	ldrb	r3, [r7, #11]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40022000 	.word	0x40022000
 8002920:	40021000 	.word	0x40021000
 8002924:	080031a0 	.word	0x080031a0
 8002928:	20000008 	.word	0x20000008
 800292c:	20000000 	.word	0x20000000

08002930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	@ 0x24
 8002934:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800293e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002948:	4b3b      	ldr	r3, [pc, #236]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x34>
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2b0c      	cmp	r3, #12
 800295c:	d121      	bne.n	80029a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d11e      	bne.n	80029a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002964:	4b34      	ldr	r3, [pc, #208]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d107      	bne.n	8002980 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002970:	4b31      	ldr	r3, [pc, #196]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	e005      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002980:	4b2d      	ldr	r3, [pc, #180]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800298c:	4a2b      	ldr	r2, [pc, #172]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x10c>)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002994:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10d      	bne.n	80029b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029a0:	e00a      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029a8:	4b25      	ldr	r3, [pc, #148]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x110>)
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	e004      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029b4:	4b23      	ldr	r3, [pc, #140]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x114>)
 80029b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d134      	bne.n	8002a28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029be:	4b1e      	ldr	r3, [pc, #120]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d003      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0xac>
 80029d4:	e005      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x110>)
 80029d8:	617b      	str	r3, [r7, #20]
      break;
 80029da:	e005      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029dc:	4b19      	ldr	r3, [pc, #100]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x114>)
 80029de:	617b      	str	r3, [r7, #20]
      break;
 80029e0:	e002      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	617b      	str	r3, [r7, #20]
      break;
 80029e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029e8:	4b13      	ldr	r3, [pc, #76]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	3301      	adds	r3, #1
 80029f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029f6:	4b10      	ldr	r3, [pc, #64]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	fb03 f202 	mul.w	r2, r3, r2
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	0e5b      	lsrs	r3, r3, #25
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	3301      	adds	r3, #1
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a28:	69bb      	ldr	r3, [r7, #24]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3724      	adds	r7, #36	@ 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	080031b0 	.word	0x080031b0
 8002a40:	00f42400 	.word	0x00f42400
 8002a44:	007a1200 	.word	0x007a1200

08002a48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a4c:	4b03      	ldr	r3, [pc, #12]	@ (8002a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000008 	.word	0x20000008

08002a60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a68:	2300      	movs	r3, #0
 8002a6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a78:	f7ff fa1a 	bl	8001eb0 <HAL_PWREx_GetVoltageRange>
 8002a7c:	6178      	str	r0, [r7, #20]
 8002a7e:	e014      	b.n	8002aaa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a80:	4b25      	ldr	r3, [pc, #148]	@ (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a84:	4a24      	ldr	r2, [pc, #144]	@ (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a8c:	4b22      	ldr	r3, [pc, #136]	@ (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a98:	f7ff fa0a 	bl	8001eb0 <HAL_PWREx_GetVoltageRange>
 8002a9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aa8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ab0:	d10b      	bne.n	8002aca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b80      	cmp	r3, #128	@ 0x80
 8002ab6:	d919      	bls.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2ba0      	cmp	r3, #160	@ 0xa0
 8002abc:	d902      	bls.n	8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002abe:	2302      	movs	r3, #2
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	e013      	b.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	e010      	b.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b80      	cmp	r3, #128	@ 0x80
 8002ace:	d902      	bls.n	8002ad6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	e00a      	b.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b80      	cmp	r3, #128	@ 0x80
 8002ada:	d102      	bne.n	8002ae2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002adc:	2302      	movs	r3, #2
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	e004      	b.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b70      	cmp	r3, #112	@ 0x70
 8002ae6:	d101      	bne.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ae8:	2301      	movs	r3, #1
 8002aea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002aec:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 0207 	bic.w	r2, r3, #7
 8002af4:	4909      	ldr	r1, [pc, #36]	@ (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002afc:	4b07      	ldr	r3, [pc, #28]	@ (8002b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d001      	beq.n	8002b0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40022000 	.word	0x40022000

08002b20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d020      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01b      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0202 	mvn.w	r2, #2
 8002b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f8ee 	bl	8002d4c <HAL_TIM_IC_CaptureCallback>
 8002b70:	e005      	b.n	8002b7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f8e0 	bl	8002d38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f8f1 	bl	8002d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d020      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01b      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0204 	mvn.w	r2, #4
 8002ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f8c8 	bl	8002d4c <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e005      	b.n	8002bca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f8ba 	bl	8002d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f8cb 	bl	8002d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d020      	beq.n	8002c1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01b      	beq.n	8002c1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0208 	mvn.w	r2, #8
 8002bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f8a2 	bl	8002d4c <HAL_TIM_IC_CaptureCallback>
 8002c08:	e005      	b.n	8002c16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f894 	bl	8002d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8a5 	bl	8002d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d020      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01b      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0210 	mvn.w	r2, #16
 8002c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f87c 	bl	8002d4c <HAL_TIM_IC_CaptureCallback>
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f86e 	bl	8002d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f87f 	bl	8002d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00c      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d007      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0201 	mvn.w	r2, #1
 8002c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f84c 	bl	8002d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00c      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f876 	bl	8002d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00c      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f86e 	bl	8002db0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00c      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f83e 	bl	8002d74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00c      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0220 	mvn.w	r2, #32
 8002d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f836 	bl	8002d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <adc_CC_Multiple_DMA_init>:
	hadc1.DMA_Handle = &hdma_adc;

}

void adc_CC_Multiple_DMA_init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08e      	sub	sp, #56	@ 0x38
 8002dc8:	af00      	add	r7, sp, #0
	//Enable clock for GPIOA port
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002dca:	4b58      	ldr	r3, [pc, #352]	@ (8002f2c <adc_CC_Multiple_DMA_init+0x168>)
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dce:	4a57      	ldr	r2, [pc, #348]	@ (8002f2c <adc_CC_Multiple_DMA_init+0x168>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dd6:	4b55      	ldr	r3, [pc, #340]	@ (8002f2c <adc_CC_Multiple_DMA_init+0x168>)
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
	//Configure PA0 as analog input pin
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	611a      	str	r2, [r3, #16]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002df2:	f107 030c 	add.w	r3, r7, #12
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
 8002dfc:	609a      	str	r2, [r3, #8]
 8002dfe:	60da      	str	r2, [r3, #12]
 8002e00:	611a      	str	r2, [r3, #16]
 8002e02:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_4;
 8002e04:	2311      	movs	r3, #17
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e14:	4619      	mov	r1, r3
 8002e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e1a:	f7fe fe85 	bl	8001b28 <HAL_GPIO_Init>


	//Enable clock for ADC1
	__HAL_RCC_ADC_CLK_ENABLE();
 8002e1e:	4b43      	ldr	r3, [pc, #268]	@ (8002f2c <adc_CC_Multiple_DMA_init+0x168>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e22:	4a42      	ldr	r2, [pc, #264]	@ (8002f2c <adc_CC_Multiple_DMA_init+0x168>)
 8002e24:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e2a:	4b40      	ldr	r3, [pc, #256]	@ (8002f2c <adc_CC_Multiple_DMA_init+0x168>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]

	//Configure ADC module for Continuous Conversion mode
	hadc1.Instance = ADC1;
 8002e36:	4b3e      	ldr	r3, [pc, #248]	@ (8002f30 <adc_CC_Multiple_DMA_init+0x16c>)
 8002e38:	4a3e      	ldr	r2, [pc, #248]	@ (8002f34 <adc_CC_Multiple_DMA_init+0x170>)
 8002e3a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002e3c:	4b3c      	ldr	r3, [pc, #240]	@ (8002f30 <adc_CC_Multiple_DMA_init+0x16c>)
 8002e3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e42:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e44:	4b3a      	ldr	r3, [pc, #232]	@ (8002f30 <adc_CC_Multiple_DMA_init+0x16c>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002e4a:	4b39      	ldr	r3, [pc, #228]	@ (8002f30 <adc_CC_Multiple_DMA_init+0x16c>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ScanConvMode = ENABLE;
 8002e50:	4b37      	ldr	r3, [pc, #220]	@ (8002f30 <adc_CC_Multiple_DMA_init+0x16c>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	611a      	str	r2, [r3, #16]
	hadc1.Init.DiscontinuousConvMode  = DISABLE;
 8002e56:	4b36      	ldr	r3, [pc, #216]	@ (8002f30 <adc_CC_Multiple_DMA_init+0x16c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e5e:	4b34      	ldr	r3, [pc, #208]	@ (8002f30 <adc_CC_Multiple_DMA_init+0x16c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e64:	4b32      	ldr	r3, [pc, #200]	@ (8002f30 <adc_CC_Multiple_DMA_init+0x16c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e6a:	4b31      	ldr	r3, [pc, #196]	@ (8002f30 <adc_CC_Multiple_DMA_init+0x16c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8002e70:	4b2f      	ldr	r3, [pc, #188]	@ (8002f30 <adc_CC_Multiple_DMA_init+0x16c>)
 8002e72:	2202      	movs	r2, #2
 8002e74:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e76:	4b2e      	ldr	r3, [pc, #184]	@ (8002f30 <adc_CC_Multiple_DMA_init+0x16c>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f30 <adc_CC_Multiple_DMA_init+0x16c>)
 8002e80:	2204      	movs	r2, #4
 8002e82:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&hadc1);
 8002e84:	482a      	ldr	r0, [pc, #168]	@ (8002f30 <adc_CC_Multiple_DMA_init+0x16c>)
 8002e86:	f7fd fbf3 	bl	8000670 <HAL_ADC_Init>

	//ADC channel congiguration
	sConfig.Channel = ADC_CHANNEL_5;
 8002e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f38 <adc_CC_Multiple_DMA_init+0x174>)
 8002e8c:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8002e92:	2302      	movs	r3, #2
 8002e94:	617b      	str	r3, [r7, #20]

	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002e96:	f107 030c 	add.w	r3, r7, #12
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4824      	ldr	r0, [pc, #144]	@ (8002f30 <adc_CC_Multiple_DMA_init+0x16c>)
 8002e9e:	f7fd fe11 	bl	8000ac4 <HAL_ADC_ConfigChannel>

	//ADC channel congiguration
	sConfig.Channel = ADC_CHANNEL_9;
 8002ea2:	4b26      	ldr	r3, [pc, #152]	@ (8002f3c <adc_CC_Multiple_DMA_init+0x178>)
 8002ea4:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 2;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002eaa:	f107 030c 	add.w	r3, r7, #12
 8002eae:	4619      	mov	r1, r3
 8002eb0:	481f      	ldr	r0, [pc, #124]	@ (8002f30 <adc_CC_Multiple_DMA_init+0x16c>)
 8002eb2:	f7fd fe07 	bl	8000ac4 <HAL_ADC_ConfigChannel>

	//Enable clock for DMA2
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f2c <adc_CC_Multiple_DMA_init+0x168>)
 8002eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eba:	4a1c      	ldr	r2, [pc, #112]	@ (8002f2c <adc_CC_Multiple_DMA_init+0x168>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6493      	str	r3, [r2, #72]	@ 0x48
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f2c <adc_CC_Multiple_DMA_init+0x168>)
 8002ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]

	hdma_adc.Instance = DMA1_Channel1;
 8002ece:	4b1c      	ldr	r3, [pc, #112]	@ (8002f40 <adc_CC_Multiple_DMA_init+0x17c>)
 8002ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f44 <adc_CC_Multiple_DMA_init+0x180>)
 8002ed2:	601a      	str	r2, [r3, #0]
	hdma_adc.Init.Request = DMA_REQUEST_0;
 8002ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f40 <adc_CC_Multiple_DMA_init+0x17c>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	605a      	str	r2, [r3, #4]
	hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eda:	4b19      	ldr	r3, [pc, #100]	@ (8002f40 <adc_CC_Multiple_DMA_init+0x17c>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
	hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ee0:	4b17      	ldr	r3, [pc, #92]	@ (8002f40 <adc_CC_Multiple_DMA_init+0x17c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	60da      	str	r2, [r3, #12]
	hdma_adc.Init.MemInc = DMA_MINC_DISABLE;
 8002ee6:	4b16      	ldr	r3, [pc, #88]	@ (8002f40 <adc_CC_Multiple_DMA_init+0x17c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
	hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002eec:	4b14      	ldr	r3, [pc, #80]	@ (8002f40 <adc_CC_Multiple_DMA_init+0x17c>)
 8002eee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ef2:	615a      	str	r2, [r3, #20]
	hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ef4:	4b12      	ldr	r3, [pc, #72]	@ (8002f40 <adc_CC_Multiple_DMA_init+0x17c>)
 8002ef6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002efa:	619a      	str	r2, [r3, #24]
	hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002efc:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <adc_CC_Multiple_DMA_init+0x17c>)
 8002efe:	2220      	movs	r2, #32
 8002f00:	61da      	str	r2, [r3, #28]
	hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002f02:	4b0f      	ldr	r3, [pc, #60]	@ (8002f40 <adc_CC_Multiple_DMA_init+0x17c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	621a      	str	r2, [r3, #32]

	HAL_DMA_Init(&hdma_adc);
 8002f08:	480d      	ldr	r0, [pc, #52]	@ (8002f40 <adc_CC_Multiple_DMA_init+0x17c>)
 8002f0a:	f7fe fc15 	bl	8001738 <HAL_DMA_Init>

	//Link adc to DMA
	//__HAL_LINKDMA(hadc1,DMA_Handle,&hdma_adc);
	hadc1.DMA_Handle = &hdma_adc;
 8002f0e:	4b08      	ldr	r3, [pc, #32]	@ (8002f30 <adc_CC_Multiple_DMA_init+0x16c>)
 8002f10:	4a0b      	ldr	r2, [pc, #44]	@ (8002f40 <adc_CC_Multiple_DMA_init+0x17c>)
 8002f12:	64da      	str	r2, [r3, #76]	@ 0x4c

	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2100      	movs	r1, #0
 8002f18:	200b      	movs	r0, #11
 8002f1a:	f7fe fbba 	bl	8001692 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002f1e:	200b      	movs	r0, #11
 8002f20:	f7fe fbd3 	bl	80016ca <HAL_NVIC_EnableIRQ>

}
 8002f24:	bf00      	nop
 8002f26:	3738      	adds	r7, #56	@ 0x38
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	20000074 	.word	0x20000074
 8002f34:	50040000 	.word	0x50040000
 8002f38:	14f00020 	.word	0x14f00020
 8002f3c:	25b00200 	.word	0x25b00200
 8002f40:	2000002c 	.word	0x2000002c
 8002f44:	40020008 	.word	0x40020008

08002f48 <DMA1_CH1_IRQHandler>:


void DMA1_CH1_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc);
 8002f4c:	4802      	ldr	r0, [pc, #8]	@ (8002f58 <DMA1_CH1_IRQHandler+0x10>)
 8002f4e:	f7fe fd0b 	bl	8001968 <HAL_DMA_IRQHandler>
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	2000002c 	.word	0x2000002c

08002f5c <main>:

ADC_HandleTypeDef hadc1;

uint32_t adc_val[2];
int main()
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
	HAL_Init();
 8002f60:	f7fd f934 	bl	80001cc <HAL_Init>
	SystemClock_Config();
 8002f64:	f000 f848 	bl	8002ff8 <SystemClock_Config>
	led_init();
 8002f68:	f000 f81c 	bl	8002fa4 <led_init>
	adc_CC_Multiple_DMA_init();
 8002f6c:	f7ff ff2a 	bl	8002dc4 <adc_CC_Multiple_DMA_init>
	//1.Start ADC_IT
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 2);
 8002f70:	2202      	movs	r2, #2
 8002f72:	4903      	ldr	r1, [pc, #12]	@ (8002f80 <main+0x24>)
 8002f74:	4803      	ldr	r0, [pc, #12]	@ (8002f84 <main+0x28>)
 8002f76:	f7fd fcd5 	bl	8000924 <HAL_ADC_Start_DMA>
	while(1)
 8002f7a:	bf00      	nop
 8002f7c:	e7fd      	b.n	8002f7a <main+0x1e>
 8002f7e:	bf00      	nop
 8002f80:	200000d8 	.word	0x200000d8
 8002f84:	20000074 	.word	0x20000074

08002f88 <HAL_ADC_ConvCpltCallback>:

	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8002f90:	2120      	movs	r1, #32
 8002f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f96:	f7fe ff71 	bl	8001e7c <HAL_GPIO_TogglePin>

}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <led_init>:

void led_init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002faa:	1d3b      	adds	r3, r7, #4
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
	//1. Configure PA5 as GPIO output for LED
	//Enable Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff4 <led_init+0x50>)
 8002fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff4 <led_init+0x50>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <led_init+0x50>)
 8002fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = LED_PIN;
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fe8:	f7fe fd9e 	bl	8001b28 <HAL_GPIO_Init>
}
 8002fec:	bf00      	nop
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b096      	sub	sp, #88	@ 0x58
 8002ffc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ffe:	f107 0314 	add.w	r3, r7, #20
 8003002:	2244      	movs	r2, #68	@ 0x44
 8003004:	2100      	movs	r1, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f000 f891 	bl	800312e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800300c:	463b      	mov	r3, r7
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	605a      	str	r2, [r3, #4]
 8003014:	609a      	str	r2, [r3, #8]
 8003016:	60da      	str	r2, [r3, #12]
 8003018:	611a      	str	r2, [r3, #16]

    /** Supply configuration update enable */
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);  // Required for high freq
 800301a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800301e:	f7fe ff55 	bl	8001ecc <HAL_PWREx_ControlVoltageScaling>

    /** Initializes the CPU, AHB and APB busses clocks */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003022:	2301      	movs	r3, #1
 8003024:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS; // MCO from ST-Link
 8003026:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800302a:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800302c:	2302      	movs	r3, #2
 800302e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003030:	2303      	movs	r3, #3
 8003032:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 8003034:	2301      	movs	r3, #1
 8003036:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 20;
 8003038:	2314      	movs	r3, #20
 800303a:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2; // 8/1*20/2 = 80 MHz
 800303c:	2302      	movs	r3, #2
 800303e:	657b      	str	r3, [r7, #84]	@ 0x54
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7; // Not used
 8003040:	2307      	movs	r3, #7
 8003042:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2; // Optional (for USB, RNG etc.)
 8003044:	2302      	movs	r3, #2
 8003046:	653b      	str	r3, [r7, #80]	@ 0x50

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe ff93 	bl	8001f78 <HAL_RCC_OscConfig>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <SystemClock_Config+0x64>
    {
        Error_Handler();
 8003058:	f000 f82e 	bl	80030b8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB busses clocks */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800305c:	230f      	movs	r3, #15
 800305e:	603b      	str	r3, [r7, #0]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; // Use PLL as system clock
 8003060:	2303      	movs	r3, #3
 8003062:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003064:	2300      	movs	r3, #0
 8003066:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003070:	463b      	mov	r3, r7
 8003072:	2104      	movs	r1, #4
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fb5b 	bl	8002730 <HAL_RCC_ClockConfig>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <SystemClock_Config+0x8c>
    {
        Error_Handler();
 8003080:	f000 f81a 	bl	80030b8 <Error_Handler>
    }

    // Update SysTick to reflect new frequency
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8003084:	f7ff fce0 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8003088:	4603      	mov	r3, r0
 800308a:	4a07      	ldr	r2, [pc, #28]	@ (80030a8 <SystemClock_Config+0xb0>)
 800308c:	fba2 2303 	umull	r2, r3, r2, r3
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe fb27 	bl	80016e6 <HAL_SYSTICK_Config>
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003098:	2004      	movs	r0, #4
 800309a:	f7fe fb31 	bl	8001700 <HAL_SYSTICK_CLKSourceConfig>
}
 800309e:	bf00      	nop
 80030a0:	3758      	adds	r7, #88	@ 0x58
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	10624dd3 	.word	0x10624dd3

080030ac <SysTick_Handler>:



void SysTick_Handler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80030b0:	f7fd f8e8 	bl	8000284 <HAL_IncTick>
}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <Error_Handler>:
void Error_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0

}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <TIM3_IRQHandler>:
	HAL_NVIC_EnableIRQ(TIMx_IRQn);

	HAL_TIM_Base_Start_IT(&TimHandle);
}

void TIMx_IRQHandler(void){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 80030cc:	4802      	ldr	r0, [pc, #8]	@ (80030d8 <TIM3_IRQHandler+0x10>)
 80030ce:	f7ff fd27 	bl	8002b20 <HAL_TIM_IRQHandler>
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200000e0 	.word	0x200000e0

080030dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030dc:	480d      	ldr	r0, [pc, #52]	@ (8003114 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80030e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030e4:	480c      	ldr	r0, [pc, #48]	@ (8003118 <LoopForever+0x6>)
  ldr r1, =_edata
 80030e6:	490d      	ldr	r1, [pc, #52]	@ (800311c <LoopForever+0xa>)
  ldr r2, =_sidata
 80030e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003120 <LoopForever+0xe>)
  movs r3, #0
 80030ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030ec:	e002      	b.n	80030f4 <LoopCopyDataInit>

080030ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030f2:	3304      	adds	r3, #4

080030f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030f8:	d3f9      	bcc.n	80030ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003124 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003128 <LoopForever+0x16>)
  movs r3, #0
 80030fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003100:	e001      	b.n	8003106 <LoopFillZerobss>

08003102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003104:	3204      	adds	r2, #4

08003106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003108:	d3fb      	bcc.n	8003102 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800310a:	f000 f819 	bl	8003140 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800310e:	f7ff ff25 	bl	8002f5c <main>

08003112 <LoopForever>:

LoopForever:
  b LoopForever
 8003112:	e7fe      	b.n	8003112 <LoopForever>
  ldr   r0, =_estack
 8003114:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800311c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003120:	080031e8 	.word	0x080031e8
  ldr r2, =_sbss
 8003124:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003128:	2000012c 	.word	0x2000012c

0800312c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800312c:	e7fe      	b.n	800312c <ADC1_2_IRQHandler>

0800312e <memset>:
 800312e:	4402      	add	r2, r0
 8003130:	4603      	mov	r3, r0
 8003132:	4293      	cmp	r3, r2
 8003134:	d100      	bne.n	8003138 <memset+0xa>
 8003136:	4770      	bx	lr
 8003138:	f803 1b01 	strb.w	r1, [r3], #1
 800313c:	e7f9      	b.n	8003132 <memset+0x4>
	...

08003140 <__libc_init_array>:
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	4d0d      	ldr	r5, [pc, #52]	@ (8003178 <__libc_init_array+0x38>)
 8003144:	4c0d      	ldr	r4, [pc, #52]	@ (800317c <__libc_init_array+0x3c>)
 8003146:	1b64      	subs	r4, r4, r5
 8003148:	10a4      	asrs	r4, r4, #2
 800314a:	2600      	movs	r6, #0
 800314c:	42a6      	cmp	r6, r4
 800314e:	d109      	bne.n	8003164 <__libc_init_array+0x24>
 8003150:	4d0b      	ldr	r5, [pc, #44]	@ (8003180 <__libc_init_array+0x40>)
 8003152:	4c0c      	ldr	r4, [pc, #48]	@ (8003184 <__libc_init_array+0x44>)
 8003154:	f000 f818 	bl	8003188 <_init>
 8003158:	1b64      	subs	r4, r4, r5
 800315a:	10a4      	asrs	r4, r4, #2
 800315c:	2600      	movs	r6, #0
 800315e:	42a6      	cmp	r6, r4
 8003160:	d105      	bne.n	800316e <__libc_init_array+0x2e>
 8003162:	bd70      	pop	{r4, r5, r6, pc}
 8003164:	f855 3b04 	ldr.w	r3, [r5], #4
 8003168:	4798      	blx	r3
 800316a:	3601      	adds	r6, #1
 800316c:	e7ee      	b.n	800314c <__libc_init_array+0xc>
 800316e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003172:	4798      	blx	r3
 8003174:	3601      	adds	r6, #1
 8003176:	e7f2      	b.n	800315e <__libc_init_array+0x1e>
 8003178:	080031e0 	.word	0x080031e0
 800317c:	080031e0 	.word	0x080031e0
 8003180:	080031e0 	.word	0x080031e0
 8003184:	080031e4 	.word	0x080031e4

08003188 <_init>:
 8003188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318a:	bf00      	nop
 800318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318e:	bc08      	pop	{r3}
 8003190:	469e      	mov	lr, r3
 8003192:	4770      	bx	lr

08003194 <_fini>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	bf00      	nop
 8003198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319a:	bc08      	pop	{r3}
 800319c:	469e      	mov	lr, r3
 800319e:	4770      	bx	lr
