
10_ADC_Interrupt_exti3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d20  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001eac  08001eac  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001eac  08001eac  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001eac  08001eac  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001eac  08001eac  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001eac  08001eac  00002eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001eb0  08001eb0  00002eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001eb4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          000000d0  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a568  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000153f  00000000  00000000  0000d5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  0000eae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000889  00000000  00000000  0000f5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001168  00000000  00000000  0000fe79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c223  00000000  00000000  00010fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb194  00000000  00000000  0001d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118398  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f24  00000000  00000000  001183dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0011b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001e94 	.word	0x08001e94

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08001e94 	.word	0x08001e94

080001cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d6:	2003      	movs	r0, #3
 80001d8:	f001 fa06 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001dc:	200f      	movs	r0, #15
 80001de:	f000 f815 	bl	800020c <HAL_InitTick>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e8:	2301      	movs	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e001      	b.n	80001f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ee:	f000 f805 	bl	80001fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
	...

0800020c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000214:	2300      	movs	r3, #0
 8000216:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000218:	4b17      	ldr	r3, [pc, #92]	@ (8000278 <HAL_InitTick+0x6c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d023      	beq.n	8000268 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000220:	4b16      	ldr	r3, [pc, #88]	@ (800027c <HAL_InitTick+0x70>)
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b14      	ldr	r3, [pc, #80]	@ (8000278 <HAL_InitTick+0x6c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	4619      	mov	r1, r3
 800022a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800022e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000232:	fbb2 f3f3 	udiv	r3, r2, r3
 8000236:	4618      	mov	r0, r3
 8000238:	f001 fa0b 	bl	8001652 <HAL_SYSTICK_Config>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d10f      	bne.n	8000262 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b0f      	cmp	r3, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	2200      	movs	r2, #0
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f001 f9d5 	bl	80015fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000254:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <HAL_InitTick+0x74>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	6013      	str	r3, [r2, #0]
 800025a:	e007      	b.n	800026c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800025c:	2301      	movs	r3, #1
 800025e:	73fb      	strb	r3, [r7, #15]
 8000260:	e004      	b.n	800026c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	e001      	b.n	800026c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000268:	2301      	movs	r3, #1
 800026a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000004 	.word	0x20000004
 800027c:	20000008 	.word	0x20000008
 8000280:	20000000 	.word	0x20000000

08000284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <HAL_IncTick+0x20>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	461a      	mov	r2, r3
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <HAL_IncTick+0x24>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4413      	add	r3, r2
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <HAL_IncTick+0x24>)
 8000296:	6013      	str	r3, [r2, #0]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000004 	.word	0x20000004
 80002a8:	20000028 	.word	0x20000028

080002ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  return uwTick;
 80002b0:	4b03      	ldr	r3, [pc, #12]	@ (80002c0 <HAL_GetTick+0x14>)
 80002b2:	681b      	ldr	r3, [r3, #0]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	20000028 	.word	0x20000028

080002c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	431a      	orrs	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	609a      	str	r2, [r3, #8]
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr

080002ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80002ea:	b480      	push	{r7}
 80002ec:	b083      	sub	sp, #12
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
 80002f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	431a      	orrs	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	609a      	str	r2, [r3, #8]
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000320:	4618      	mov	r0, r3
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800032c:	b480      	push	{r7}
 800032e:	b087      	sub	sp, #28
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]
 8000338:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	3360      	adds	r3, #96	@ 0x60
 800033e:	461a      	mov	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	4413      	add	r3, r2
 8000346:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	4b08      	ldr	r3, [pc, #32]	@ (8000370 <LL_ADC_SetOffset+0x44>)
 800034e:	4013      	ands	r3, r2
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000356:	683a      	ldr	r2, [r7, #0]
 8000358:	430a      	orrs	r2, r1
 800035a:	4313      	orrs	r3, r2
 800035c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000364:	bf00      	nop
 8000366:	371c      	adds	r7, #28
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	03fff000 	.word	0x03fff000

08000374 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	3360      	adds	r3, #96	@ 0x60
 8000382:	461a      	mov	r2, r3
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	4413      	add	r3, r2
 800038a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000394:	4618      	mov	r0, r3
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b087      	sub	sp, #28
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	3360      	adds	r3, #96	@ 0x60
 80003b0:	461a      	mov	r2, r3
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	4413      	add	r3, r2
 80003b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	431a      	orrs	r2, r3
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80003ca:	bf00      	nop
 80003cc:	371c      	adds	r7, #28
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b087      	sub	sp, #28
 80003da:	af00      	add	r7, sp, #0
 80003dc:	60f8      	str	r0, [r7, #12]
 80003de:	60b9      	str	r1, [r7, #8]
 80003e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	3330      	adds	r3, #48	@ 0x30
 80003e6:	461a      	mov	r2, r3
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	0a1b      	lsrs	r3, r3, #8
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	f003 030c 	and.w	r3, r3, #12
 80003f2:	4413      	add	r3, r2
 80003f4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	f003 031f 	and.w	r3, r3, #31
 8000400:	211f      	movs	r1, #31
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	43db      	mvns	r3, r3
 8000408:	401a      	ands	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	0e9b      	lsrs	r3, r3, #26
 800040e:	f003 011f 	and.w	r1, r3, #31
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	f003 031f 	and.w	r3, r3, #31
 8000418:	fa01 f303 	lsl.w	r3, r1, r3
 800041c:	431a      	orrs	r2, r3
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000422:	bf00      	nop
 8000424:	371c      	adds	r7, #28
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr

0800042e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800042e:	b480      	push	{r7}
 8000430:	b087      	sub	sp, #28
 8000432:	af00      	add	r7, sp, #0
 8000434:	60f8      	str	r0, [r7, #12]
 8000436:	60b9      	str	r1, [r7, #8]
 8000438:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	3314      	adds	r3, #20
 800043e:	461a      	mov	r2, r3
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	0e5b      	lsrs	r3, r3, #25
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	f003 0304 	and.w	r3, r3, #4
 800044a:	4413      	add	r3, r2
 800044c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	0d1b      	lsrs	r3, r3, #20
 8000456:	f003 031f 	and.w	r3, r3, #31
 800045a:	2107      	movs	r1, #7
 800045c:	fa01 f303 	lsl.w	r3, r1, r3
 8000460:	43db      	mvns	r3, r3
 8000462:	401a      	ands	r2, r3
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	0d1b      	lsrs	r3, r3, #20
 8000468:	f003 031f 	and.w	r3, r3, #31
 800046c:	6879      	ldr	r1, [r7, #4]
 800046e:	fa01 f303 	lsl.w	r3, r1, r3
 8000472:	431a      	orrs	r2, r3
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000478:	bf00      	nop
 800047a:	371c      	adds	r7, #28
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800049c:	43db      	mvns	r3, r3
 800049e:	401a      	ands	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f003 0318 	and.w	r3, r3, #24
 80004a6:	4908      	ldr	r1, [pc, #32]	@ (80004c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80004a8:	40d9      	lsrs	r1, r3
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	400b      	ands	r3, r1
 80004ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80004b2:	431a      	orrs	r2, r3
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	0007ffff 	.word	0x0007ffff

080004cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	f003 031f 	and.w	r3, r3, #31
}
 80004dc:	4618      	mov	r0, r3
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80004f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	6093      	str	r3, [r2, #8]
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800051c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000520:	d101      	bne.n	8000526 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000522:	2301      	movs	r3, #1
 8000524:	e000      	b.n	8000528 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000526:	2300      	movs	r3, #0
}
 8000528:	4618      	mov	r0, r3
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000544:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000548:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000570:	d101      	bne.n	8000576 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000572:	2301      	movs	r3, #1
 8000574:	e000      	b.n	8000578 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000594:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000598:	f043 0201 	orr.w	r2, r3, #1
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d101      	bne.n	80005c4 <LL_ADC_IsEnabled+0x18>
 80005c0:	2301      	movs	r3, #1
 80005c2:	e000      	b.n	80005c6 <LL_ADC_IsEnabled+0x1a>
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80005d2:	b480      	push	{r7}
 80005d4:	b083      	sub	sp, #12
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80005e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80005e6:	f043 0204 	orr.w	r2, r3, #4
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	2b04      	cmp	r3, #4
 800060c:	d101      	bne.n	8000612 <LL_ADC_REG_IsConversionOngoing+0x18>
 800060e:	2301      	movs	r3, #1
 8000610:	e000      	b.n	8000614 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	f003 0308 	and.w	r3, r3, #8
 8000630:	2b08      	cmp	r3, #8
 8000632:	d101      	bne.n	8000638 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000634:	2301      	movs	r3, #1
 8000636:	e000      	b.n	800063a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
	...

08000648 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b089      	sub	sp, #36	@ 0x24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000650:	2300      	movs	r3, #0
 8000652:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d101      	bne.n	8000662 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e130      	b.n	80008c4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	691b      	ldr	r3, [r3, #16]
 8000666:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800066c:	2b00      	cmp	r3, #0
 800066e:	d109      	bne.n	8000684 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f939 	bl	80008e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff3f 	bl	800050c <LL_ADC_IsDeepPowerDownEnabled>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d004      	beq.n	800069e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff25 	bl	80004e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff5a 	bl	800055c <LL_ADC_IsInternalRegulatorEnabled>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d115      	bne.n	80006da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff3e 	bl	8000534 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80006b8:	4b84      	ldr	r3, [pc, #528]	@ (80008cc <HAL_ADC_Init+0x284>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	099b      	lsrs	r3, r3, #6
 80006be:	4a84      	ldr	r2, [pc, #528]	@ (80008d0 <HAL_ADC_Init+0x288>)
 80006c0:	fba2 2303 	umull	r2, r3, r2, r3
 80006c4:	099b      	lsrs	r3, r3, #6
 80006c6:	3301      	adds	r3, #1
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80006cc:	e002      	b.n	80006d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f9      	bne.n	80006ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff3c 	bl	800055c <LL_ADC_IsInternalRegulatorEnabled>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d10d      	bne.n	8000706 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80006ee:	f043 0210 	orr.w	r2, r3, #16
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006fa:	f043 0201 	orr.w	r2, r3, #1
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff75 	bl	80005fa <LL_ADC_REG_IsConversionOngoing>
 8000710:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000716:	f003 0310 	and.w	r3, r3, #16
 800071a:	2b00      	cmp	r3, #0
 800071c:	f040 80c9 	bne.w	80008b2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	2b00      	cmp	r3, #0
 8000724:	f040 80c5 	bne.w	80008b2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800072c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000730:	f043 0202 	orr.w	r2, r3, #2
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff35 	bl	80005ac <LL_ADC_IsEnabled>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d115      	bne.n	8000774 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000748:	4862      	ldr	r0, [pc, #392]	@ (80008d4 <HAL_ADC_Init+0x28c>)
 800074a:	f7ff ff2f 	bl	80005ac <LL_ADC_IsEnabled>
 800074e:	4604      	mov	r4, r0
 8000750:	4861      	ldr	r0, [pc, #388]	@ (80008d8 <HAL_ADC_Init+0x290>)
 8000752:	f7ff ff2b 	bl	80005ac <LL_ADC_IsEnabled>
 8000756:	4603      	mov	r3, r0
 8000758:	431c      	orrs	r4, r3
 800075a:	4860      	ldr	r0, [pc, #384]	@ (80008dc <HAL_ADC_Init+0x294>)
 800075c:	f7ff ff26 	bl	80005ac <LL_ADC_IsEnabled>
 8000760:	4603      	mov	r3, r0
 8000762:	4323      	orrs	r3, r4
 8000764:	2b00      	cmp	r3, #0
 8000766:	d105      	bne.n	8000774 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	4619      	mov	r1, r3
 800076e:	485c      	ldr	r0, [pc, #368]	@ (80008e0 <HAL_ADC_Init+0x298>)
 8000770:	f7ff fda8 	bl	80002c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	7e5b      	ldrb	r3, [r3, #25]
 8000778:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800077e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000784:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800078a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000792:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000794:	4313      	orrs	r3, r2
 8000796:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d106      	bne.n	80007b0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007a6:	3b01      	subs	r3, #1
 80007a8:	045b      	lsls	r3, r3, #17
 80007aa:	69ba      	ldr	r2, [r7, #24]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d009      	beq.n	80007cc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007bc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80007c6:	69ba      	ldr	r2, [r7, #24]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	68da      	ldr	r2, [r3, #12]
 80007d2:	4b44      	ldr	r3, [pc, #272]	@ (80008e4 <HAL_ADC_Init+0x29c>)
 80007d4:	4013      	ands	r3, r2
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	6812      	ldr	r2, [r2, #0]
 80007da:	69b9      	ldr	r1, [r7, #24]
 80007dc:	430b      	orrs	r3, r1
 80007de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff1b 	bl	8000620 <LL_ADC_INJ_IsConversionOngoing>
 80007ea:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d13d      	bne.n	800086e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d13a      	bne.n	800086e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80007fc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000804:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000806:	4313      	orrs	r3, r2
 8000808:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000814:	f023 0302 	bic.w	r3, r3, #2
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	6812      	ldr	r2, [r2, #0]
 800081c:	69b9      	ldr	r1, [r7, #24]
 800081e:	430b      	orrs	r3, r1
 8000820:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000828:	2b01      	cmp	r3, #1
 800082a:	d118      	bne.n	800085e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000836:	f023 0304 	bic.w	r3, r3, #4
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000842:	4311      	orrs	r1, r2
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000848:	4311      	orrs	r1, r2
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800084e:	430a      	orrs	r2, r1
 8000850:	431a      	orrs	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f042 0201 	orr.w	r2, r2, #1
 800085a:	611a      	str	r2, [r3, #16]
 800085c:	e007      	b.n	800086e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	691a      	ldr	r2, [r3, #16]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f022 0201 	bic.w	r2, r2, #1
 800086c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	691b      	ldr	r3, [r3, #16]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d10c      	bne.n	8000890 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087c:	f023 010f 	bic.w	r1, r3, #15
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	1e5a      	subs	r2, r3, #1
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	430a      	orrs	r2, r1
 800088c:	631a      	str	r2, [r3, #48]	@ 0x30
 800088e:	e007      	b.n	80008a0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f022 020f 	bic.w	r2, r2, #15
 800089e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008a4:	f023 0303 	bic.w	r3, r3, #3
 80008a8:	f043 0201 	orr.w	r2, r3, #1
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80008b0:	e007      	b.n	80008c2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008b6:	f043 0210 	orr.w	r2, r3, #16
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80008c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3724      	adds	r7, #36	@ 0x24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	20000008 	.word	0x20000008
 80008d0:	053e2d63 	.word	0x053e2d63
 80008d4:	50040000 	.word	0x50040000
 80008d8:	50040100 	.word	0x50040100
 80008dc:	50040200 	.word	0x50040200
 80008e0:	50040300 	.word	0x50040300
 80008e4:	fff0c007 	.word	0xfff0c007

080008e8 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000904:	4891      	ldr	r0, [pc, #580]	@ (8000b4c <HAL_ADC_Start_IT+0x250>)
 8000906:	f7ff fde1 	bl	80004cc <LL_ADC_GetMultimode>
 800090a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fe72 	bl	80005fa <LL_ADC_REG_IsConversionOngoing>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	f040 8110 	bne.w	8000b3e <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000924:	2b01      	cmp	r3, #1
 8000926:	d101      	bne.n	800092c <HAL_ADC_Start_IT+0x30>
 8000928:	2302      	movs	r3, #2
 800092a:	e10b      	b.n	8000b44 <HAL_ADC_Start_IT+0x248>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2201      	movs	r2, #1
 8000930:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f000 fd01 	bl	800133c <ADC_Enable>
 800093a:	4603      	mov	r3, r0
 800093c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800093e:	7dfb      	ldrb	r3, [r7, #23]
 8000940:	2b00      	cmp	r3, #0
 8000942:	f040 80f7 	bne.w	8000b34 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800094a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800094e:	f023 0301 	bic.w	r3, r3, #1
 8000952:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a7c      	ldr	r2, [pc, #496]	@ (8000b50 <HAL_ADC_Start_IT+0x254>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d002      	beq.n	800096a <HAL_ADC_Start_IT+0x6e>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	e000      	b.n	800096c <HAL_ADC_Start_IT+0x70>
 800096a:	4b7a      	ldr	r3, [pc, #488]	@ (8000b54 <HAL_ADC_Start_IT+0x258>)
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	6812      	ldr	r2, [r2, #0]
 8000970:	4293      	cmp	r3, r2
 8000972:	d002      	beq.n	800097a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d105      	bne.n	8000986 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800097e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800098a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800098e:	2b00      	cmp	r3, #0
 8000990:	d006      	beq.n	80009a0 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000996:	f023 0206 	bic.w	r2, r3, #6
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	659a      	str	r2, [r3, #88]	@ 0x58
 800099e:	e002      	b.n	80009a6 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	221c      	movs	r2, #28
 80009ac:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f022 021c 	bic.w	r2, r2, #28
 80009c4:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	2b08      	cmp	r3, #8
 80009cc:	d108      	bne.n	80009e0 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	685a      	ldr	r2, [r3, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f042 0208 	orr.w	r2, r2, #8
 80009dc:	605a      	str	r2, [r3, #4]
          break;
 80009de:	e008      	b.n	80009f2 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f042 0204 	orr.w	r2, r2, #4
 80009ee:	605a      	str	r2, [r3, #4]
          break;
 80009f0:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d107      	bne.n	8000a0a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f042 0210 	orr.w	r2, r2, #16
 8000a08:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a50      	ldr	r2, [pc, #320]	@ (8000b50 <HAL_ADC_Start_IT+0x254>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d002      	beq.n	8000a1a <HAL_ADC_Start_IT+0x11e>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	e000      	b.n	8000a1c <HAL_ADC_Start_IT+0x120>
 8000a1a:	4b4e      	ldr	r3, [pc, #312]	@ (8000b54 <HAL_ADC_Start_IT+0x258>)
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	6812      	ldr	r2, [r2, #0]
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d008      	beq.n	8000a36 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d005      	beq.n	8000a36 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	2b05      	cmp	r3, #5
 8000a2e:	d002      	beq.n	8000a36 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	2b09      	cmp	r3, #9
 8000a34:	d13a      	bne.n	8000aac <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d02d      	beq.n	8000aa0 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a48:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a4c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d110      	bne.n	8000a7e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	685a      	ldr	r2, [r3, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f022 0220 	bic.w	r2, r2, #32
 8000a6a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	685a      	ldr	r2, [r3, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a7a:	605a      	str	r2, [r3, #4]
              break;
 8000a7c:	e010      	b.n	8000aa0 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	685a      	ldr	r2, [r3, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000a8c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	685a      	ldr	r2, [r3, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f042 0220 	orr.w	r2, r2, #32
 8000a9c:	605a      	str	r2, [r3, #4]
              break;
 8000a9e:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fd94 	bl	80005d2 <LL_ADC_REG_StartConversion>
 8000aaa:	e04a      	b.n	8000b42 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ab0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a24      	ldr	r2, [pc, #144]	@ (8000b50 <HAL_ADC_Start_IT+0x254>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d002      	beq.n	8000ac8 <HAL_ADC_Start_IT+0x1cc>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	e000      	b.n	8000aca <HAL_ADC_Start_IT+0x1ce>
 8000ac8:	4b22      	ldr	r3, [pc, #136]	@ (8000b54 <HAL_ADC_Start_IT+0x258>)
 8000aca:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d034      	beq.n	8000b42 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000adc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000ae0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	695b      	ldr	r3, [r3, #20]
 8000aec:	2b08      	cmp	r3, #8
 8000aee:	d110      	bne.n	8000b12 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	685a      	ldr	r2, [r3, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f022 0220 	bic.w	r2, r2, #32
 8000afe:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b0e:	605a      	str	r2, [r3, #4]
              break;
 8000b10:	e017      	b.n	8000b42 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b20:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f042 0220 	orr.w	r2, r2, #32
 8000b30:	605a      	str	r2, [r3, #4]
              break;
 8000b32:	e006      	b.n	8000b42 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8000b3c:	e001      	b.n	8000b42 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	50040300 	.word	0x50040300
 8000b50:	50040100 	.word	0x50040100
 8000b54:	50040000 	.word	0x50040000

08000b58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0b6      	sub	sp, #216	@ 0xd8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d101      	bne.n	8000b7a <HAL_ADC_ConfigChannel+0x22>
 8000b76:	2302      	movs	r3, #2
 8000b78:	e3c9      	b.n	800130e <HAL_ADC_ConfigChannel+0x7b6>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fd37 	bl	80005fa <LL_ADC_REG_IsConversionOngoing>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f040 83aa 	bne.w	80012e8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b05      	cmp	r3, #5
 8000ba2:	d824      	bhi.n	8000bee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	3b02      	subs	r3, #2
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d81b      	bhi.n	8000be6 <HAL_ADC_ConfigChannel+0x8e>
 8000bae:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb4 <HAL_ADC_ConfigChannel+0x5c>)
 8000bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb4:	08000bc5 	.word	0x08000bc5
 8000bb8:	08000bcd 	.word	0x08000bcd
 8000bbc:	08000bd5 	.word	0x08000bd5
 8000bc0:	08000bdd 	.word	0x08000bdd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000bca:	e010      	b.n	8000bee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8000bcc:	2312      	movs	r3, #18
 8000bce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000bd2:	e00c      	b.n	8000bee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8000bd4:	2318      	movs	r3, #24
 8000bd6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000bda:	e008      	b.n	8000bee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8000bdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000be0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000be4:	e003      	b.n	8000bee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8000be6:	2306      	movs	r3, #6
 8000be8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000bec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6818      	ldr	r0, [r3, #0]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8000bfc:	f7ff fbeb 	bl	80003d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fcf8 	bl	80005fa <LL_ADC_REG_IsConversionOngoing>
 8000c0a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fd04 	bl	8000620 <LL_ADC_INJ_IsConversionOngoing>
 8000c18:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f040 81a4 	bne.w	8000f6e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000c26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f040 819f 	bne.w	8000f6e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	6819      	ldr	r1, [r3, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	f7ff fbf6 	bl	800042e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	695a      	ldr	r2, [r3, #20]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	08db      	lsrs	r3, r3, #3
 8000c4e:	f003 0303 	and.w	r3, r3, #3
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	2b04      	cmp	r3, #4
 8000c62:	d00a      	beq.n	8000c7a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6818      	ldr	r0, [r3, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	6919      	ldr	r1, [r3, #16]
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000c74:	f7ff fb5a 	bl	800032c <LL_ADC_SetOffset>
 8000c78:	e179      	b.n	8000f6e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fb77 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10a      	bne.n	8000ca6 <HAL_ADC_ConfigChannel+0x14e>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fb6c 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	0e9b      	lsrs	r3, r3, #26
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	e01e      	b.n	8000ce4 <HAL_ADC_ConfigChannel+0x18c>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fb61 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000cbc:	fa93 f3a3 	rbit	r3, r3
 8000cc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000ccc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d101      	bne.n	8000cd8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8000cd4:	2320      	movs	r3, #32
 8000cd6:	e004      	b.n	8000ce2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8000cd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000cdc:	fab3 f383 	clz	r3, r3
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d105      	bne.n	8000cfc <HAL_ADC_ConfigChannel+0x1a4>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	0e9b      	lsrs	r3, r3, #26
 8000cf6:	f003 031f 	and.w	r3, r3, #31
 8000cfa:	e018      	b.n	8000d2e <HAL_ADC_ConfigChannel+0x1d6>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000d08:	fa93 f3a3 	rbit	r3, r3
 8000d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8000d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000d14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8000d18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d101      	bne.n	8000d24 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8000d20:	2320      	movs	r3, #32
 8000d22:	e004      	b.n	8000d2e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8000d24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d28:	fab3 f383 	clz	r3, r3
 8000d2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d106      	bne.n	8000d40 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fb30 	bl	80003a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2101      	movs	r1, #1
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fb14 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10a      	bne.n	8000d6c <HAL_ADC_ConfigChannel+0x214>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fb09 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	0e9b      	lsrs	r3, r3, #26
 8000d66:	f003 021f 	and.w	r2, r3, #31
 8000d6a:	e01e      	b.n	8000daa <HAL_ADC_ConfigChannel+0x252>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2101      	movs	r1, #1
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fafe 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d82:	fa93 f3a3 	rbit	r3, r3
 8000d86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8000d8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8000d92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8000d9a:	2320      	movs	r3, #32
 8000d9c:	e004      	b.n	8000da8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8000d9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000da2:	fab3 f383 	clz	r3, r3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d105      	bne.n	8000dc2 <HAL_ADC_ConfigChannel+0x26a>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	0e9b      	lsrs	r3, r3, #26
 8000dbc:	f003 031f 	and.w	r3, r3, #31
 8000dc0:	e018      	b.n	8000df4 <HAL_ADC_ConfigChannel+0x29c>
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000dce:	fa93 f3a3 	rbit	r3, r3
 8000dd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8000dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000dda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8000dde:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8000de6:	2320      	movs	r3, #32
 8000de8:	e004      	b.n	8000df4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8000dea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000dee:	fab3 f383 	clz	r3, r3
 8000df2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d106      	bne.n	8000e06 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2101      	movs	r1, #1
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff facd 	bl	80003a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fab1 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d10a      	bne.n	8000e32 <HAL_ADC_ConfigChannel+0x2da>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2102      	movs	r1, #2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff faa6 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	0e9b      	lsrs	r3, r3, #26
 8000e2c:	f003 021f 	and.w	r2, r3, #31
 8000e30:	e01e      	b.n	8000e70 <HAL_ADC_ConfigChannel+0x318>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2102      	movs	r1, #2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fa9b 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000e48:	fa93 f3a3 	rbit	r3, r3
 8000e4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8000e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000e54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8000e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d101      	bne.n	8000e64 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8000e60:	2320      	movs	r3, #32
 8000e62:	e004      	b.n	8000e6e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8000e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e68:	fab3 f383 	clz	r3, r3
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d105      	bne.n	8000e88 <HAL_ADC_ConfigChannel+0x330>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	0e9b      	lsrs	r3, r3, #26
 8000e82:	f003 031f 	and.w	r3, r3, #31
 8000e86:	e014      	b.n	8000eb2 <HAL_ADC_ConfigChannel+0x35a>
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000e90:	fa93 f3a3 	rbit	r3, r3
 8000e94:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8000e96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8000e9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d101      	bne.n	8000ea8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8000ea4:	2320      	movs	r3, #32
 8000ea6:	e004      	b.n	8000eb2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8000ea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000eac:	fab3 f383 	clz	r3, r3
 8000eb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d106      	bne.n	8000ec4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fa6e 	bl	80003a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2103      	movs	r1, #3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fa52 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10a      	bne.n	8000ef0 <HAL_ADC_ConfigChannel+0x398>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2103      	movs	r1, #3
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fa47 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	0e9b      	lsrs	r3, r3, #26
 8000eea:	f003 021f 	and.w	r2, r3, #31
 8000eee:	e017      	b.n	8000f20 <HAL_ADC_ConfigChannel+0x3c8>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2103      	movs	r1, #3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fa3c 	bl	8000374 <LL_ADC_GetOffsetChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f02:	fa93 f3a3 	rbit	r3, r3
 8000f06:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8000f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f0a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8000f0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8000f12:	2320      	movs	r3, #32
 8000f14:	e003      	b.n	8000f1e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8000f16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f18:	fab3 f383 	clz	r3, r3
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d105      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x3e0>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	0e9b      	lsrs	r3, r3, #26
 8000f32:	f003 031f 	and.w	r3, r3, #31
 8000f36:	e011      	b.n	8000f5c <HAL_ADC_ConfigChannel+0x404>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f40:	fa93 f3a3 	rbit	r3, r3
 8000f44:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8000f46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f48:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8000f4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8000f50:	2320      	movs	r3, #32
 8000f52:	e003      	b.n	8000f5c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8000f54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f56:	fab3 f383 	clz	r3, r3
 8000f5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d106      	bne.n	8000f6e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2200      	movs	r2, #0
 8000f66:	2103      	movs	r1, #3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fa19 	bl	80003a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fb1a 	bl	80005ac <LL_ADC_IsEnabled>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f040 8140 	bne.w	8001200 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6818      	ldr	r0, [r3, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	6819      	ldr	r1, [r3, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f7ff fa79 	bl	8000484 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	4a8f      	ldr	r2, [pc, #572]	@ (80011d4 <HAL_ADC_ConfigChannel+0x67c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	f040 8131 	bne.w	8001200 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10b      	bne.n	8000fc6 <HAL_ADC_ConfigChannel+0x46e>
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	0e9b      	lsrs	r3, r3, #26
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	f003 031f 	and.w	r3, r3, #31
 8000fba:	2b09      	cmp	r3, #9
 8000fbc:	bf94      	ite	ls
 8000fbe:	2301      	movls	r3, #1
 8000fc0:	2300      	movhi	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	e019      	b.n	8000ffa <HAL_ADC_ConfigChannel+0x4a2>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8000fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8000fd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8000fde:	2320      	movs	r3, #32
 8000fe0:	e003      	b.n	8000fea <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8000fe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fe4:	fab3 f383 	clz	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	3301      	adds	r3, #1
 8000fec:	f003 031f 	and.w	r3, r3, #31
 8000ff0:	2b09      	cmp	r3, #9
 8000ff2:	bf94      	ite	ls
 8000ff4:	2301      	movls	r3, #1
 8000ff6:	2300      	movhi	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d079      	beq.n	80010f2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001006:	2b00      	cmp	r3, #0
 8001008:	d107      	bne.n	800101a <HAL_ADC_ConfigChannel+0x4c2>
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	0e9b      	lsrs	r3, r3, #26
 8001010:	3301      	adds	r3, #1
 8001012:	069b      	lsls	r3, r3, #26
 8001014:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001018:	e015      	b.n	8001046 <HAL_ADC_ConfigChannel+0x4ee>
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001022:	fa93 f3a3 	rbit	r3, r3
 8001026:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001028:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800102a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800102c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001032:	2320      	movs	r3, #32
 8001034:	e003      	b.n	800103e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001038:	fab3 f383 	clz	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	3301      	adds	r3, #1
 8001040:	069b      	lsls	r3, r3, #26
 8001042:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800104e:	2b00      	cmp	r3, #0
 8001050:	d109      	bne.n	8001066 <HAL_ADC_ConfigChannel+0x50e>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	0e9b      	lsrs	r3, r3, #26
 8001058:	3301      	adds	r3, #1
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	2101      	movs	r1, #1
 8001060:	fa01 f303 	lsl.w	r3, r1, r3
 8001064:	e017      	b.n	8001096 <HAL_ADC_ConfigChannel+0x53e>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001076:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800107e:	2320      	movs	r3, #32
 8001080:	e003      	b.n	800108a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001084:	fab3 f383 	clz	r3, r3
 8001088:	b2db      	uxtb	r3, r3
 800108a:	3301      	adds	r3, #1
 800108c:	f003 031f 	and.w	r3, r3, #31
 8001090:	2101      	movs	r1, #1
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	ea42 0103 	orr.w	r1, r2, r3
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10a      	bne.n	80010bc <HAL_ADC_ConfigChannel+0x564>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	0e9b      	lsrs	r3, r3, #26
 80010ac:	3301      	adds	r3, #1
 80010ae:	f003 021f 	and.w	r2, r3, #31
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	051b      	lsls	r3, r3, #20
 80010ba:	e018      	b.n	80010ee <HAL_ADC_ConfigChannel+0x596>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c4:	fa93 f3a3 	rbit	r3, r3
 80010c8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80010ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80010ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80010d4:	2320      	movs	r3, #32
 80010d6:	e003      	b.n	80010e0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80010d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010da:	fab3 f383 	clz	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	3301      	adds	r3, #1
 80010e2:	f003 021f 	and.w	r2, r3, #31
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80010ee:	430b      	orrs	r3, r1
 80010f0:	e081      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d107      	bne.n	800110e <HAL_ADC_ConfigChannel+0x5b6>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	0e9b      	lsrs	r3, r3, #26
 8001104:	3301      	adds	r3, #1
 8001106:	069b      	lsls	r3, r3, #26
 8001108:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800110c:	e015      	b.n	800113a <HAL_ADC_ConfigChannel+0x5e2>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001116:	fa93 f3a3 	rbit	r3, r3
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800111c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001126:	2320      	movs	r3, #32
 8001128:	e003      	b.n	8001132 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800112a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800112c:	fab3 f383 	clz	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	3301      	adds	r3, #1
 8001134:	069b      	lsls	r3, r3, #26
 8001136:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001142:	2b00      	cmp	r3, #0
 8001144:	d109      	bne.n	800115a <HAL_ADC_ConfigChannel+0x602>
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	0e9b      	lsrs	r3, r3, #26
 800114c:	3301      	adds	r3, #1
 800114e:	f003 031f 	and.w	r3, r3, #31
 8001152:	2101      	movs	r1, #1
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	e017      	b.n	800118a <HAL_ADC_ConfigChannel+0x632>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	61bb      	str	r3, [r7, #24]
  return result;
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800116c:	6a3b      	ldr	r3, [r7, #32]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001172:	2320      	movs	r3, #32
 8001174:	e003      	b.n	800117e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	fab3 f383 	clz	r3, r3
 800117c:	b2db      	uxtb	r3, r3
 800117e:	3301      	adds	r3, #1
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	2101      	movs	r1, #1
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	ea42 0103 	orr.w	r1, r2, r3
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10d      	bne.n	80011b6 <HAL_ADC_ConfigChannel+0x65e>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	0e9b      	lsrs	r3, r3, #26
 80011a0:	3301      	adds	r3, #1
 80011a2:	f003 021f 	and.w	r2, r3, #31
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	3b1e      	subs	r3, #30
 80011ae:	051b      	lsls	r3, r3, #20
 80011b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011b4:	e01e      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x69c>
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	60fb      	str	r3, [r7, #12]
  return result;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d104      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80011ce:	2320      	movs	r3, #32
 80011d0:	e006      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x688>
 80011d2:	bf00      	nop
 80011d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fab3 f383 	clz	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	3301      	adds	r3, #1
 80011e2:	f003 021f 	and.w	r2, r3, #31
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	3b1e      	subs	r3, #30
 80011ee:	051b      	lsls	r3, r3, #20
 80011f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011f4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff f917 	bl	800042e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b44      	ldr	r3, [pc, #272]	@ (8001318 <HAL_ADC_ConfigChannel+0x7c0>)
 8001206:	4013      	ands	r3, r2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d07a      	beq.n	8001302 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800120c:	4843      	ldr	r0, [pc, #268]	@ (800131c <HAL_ADC_ConfigChannel+0x7c4>)
 800120e:	f7ff f87f 	bl	8000310 <LL_ADC_GetCommonPathInternalCh>
 8001212:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a41      	ldr	r2, [pc, #260]	@ (8001320 <HAL_ADC_ConfigChannel+0x7c8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d12c      	bne.n	800127a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001220:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001224:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d126      	bne.n	800127a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a3c      	ldr	r2, [pc, #240]	@ (8001324 <HAL_ADC_ConfigChannel+0x7cc>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d004      	beq.n	8001240 <HAL_ADC_ConfigChannel+0x6e8>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a3b      	ldr	r2, [pc, #236]	@ (8001328 <HAL_ADC_ConfigChannel+0x7d0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d15d      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001240:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001244:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001248:	4619      	mov	r1, r3
 800124a:	4834      	ldr	r0, [pc, #208]	@ (800131c <HAL_ADC_ConfigChannel+0x7c4>)
 800124c:	f7ff f84d 	bl	80002ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001250:	4b36      	ldr	r3, [pc, #216]	@ (800132c <HAL_ADC_ConfigChannel+0x7d4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	099b      	lsrs	r3, r3, #6
 8001256:	4a36      	ldr	r2, [pc, #216]	@ (8001330 <HAL_ADC_ConfigChannel+0x7d8>)
 8001258:	fba2 2303 	umull	r2, r3, r2, r3
 800125c:	099b      	lsrs	r3, r3, #6
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800126a:	e002      	b.n	8001272 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	3b01      	subs	r3, #1
 8001270:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f9      	bne.n	800126c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001278:	e040      	b.n	80012fc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a2d      	ldr	r2, [pc, #180]	@ (8001334 <HAL_ADC_ConfigChannel+0x7dc>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d118      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001284:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001288:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d112      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a23      	ldr	r2, [pc, #140]	@ (8001324 <HAL_ADC_ConfigChannel+0x7cc>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d004      	beq.n	80012a4 <HAL_ADC_ConfigChannel+0x74c>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a22      	ldr	r2, [pc, #136]	@ (8001328 <HAL_ADC_ConfigChannel+0x7d0>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d12d      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80012a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012ac:	4619      	mov	r1, r3
 80012ae:	481b      	ldr	r0, [pc, #108]	@ (800131c <HAL_ADC_ConfigChannel+0x7c4>)
 80012b0:	f7ff f81b 	bl	80002ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80012b4:	e024      	b.n	8001300 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001338 <HAL_ADC_ConfigChannel+0x7e0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d120      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80012c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80012c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d11a      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a14      	ldr	r2, [pc, #80]	@ (8001324 <HAL_ADC_ConfigChannel+0x7cc>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d115      	bne.n	8001302 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80012da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012de:	4619      	mov	r1, r3
 80012e0:	480e      	ldr	r0, [pc, #56]	@ (800131c <HAL_ADC_ConfigChannel+0x7c4>)
 80012e2:	f7ff f802 	bl	80002ea <LL_ADC_SetCommonPathInternalCh>
 80012e6:	e00c      	b.n	8001302 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ec:	f043 0220 	orr.w	r2, r3, #32
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80012fa:	e002      	b.n	8001302 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80012fc:	bf00      	nop
 80012fe:	e000      	b.n	8001302 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001300:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800130a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800130e:	4618      	mov	r0, r3
 8001310:	37d8      	adds	r7, #216	@ 0xd8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	80080000 	.word	0x80080000
 800131c:	50040300 	.word	0x50040300
 8001320:	c7520000 	.word	0xc7520000
 8001324:	50040000 	.word	0x50040000
 8001328:	50040200 	.word	0x50040200
 800132c:	20000008 	.word	0x20000008
 8001330:	053e2d63 	.word	0x053e2d63
 8001334:	cb840000 	.word	0xcb840000
 8001338:	80000001 	.word	0x80000001

0800133c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f92d 	bl	80005ac <LL_ADC_IsEnabled>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d169      	bne.n	800142c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	4b36      	ldr	r3, [pc, #216]	@ (8001438 <ADC_Enable+0xfc>)
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00d      	beq.n	8001382 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800136a:	f043 0210 	orr.w	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	f043 0201 	orr.w	r2, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e055      	b.n	800142e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f8fc 	bl	8000584 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800138c:	482b      	ldr	r0, [pc, #172]	@ (800143c <ADC_Enable+0x100>)
 800138e:	f7fe ffbf 	bl	8000310 <LL_ADC_GetCommonPathInternalCh>
 8001392:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001394:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001398:	2b00      	cmp	r3, #0
 800139a:	d013      	beq.n	80013c4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800139c:	4b28      	ldr	r3, [pc, #160]	@ (8001440 <ADC_Enable+0x104>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	4a28      	ldr	r2, [pc, #160]	@ (8001444 <ADC_Enable+0x108>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	099b      	lsrs	r3, r3, #6
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80013b6:	e002      	b.n	80013be <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f9      	bne.n	80013b8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80013c4:	f7fe ff72 	bl	80002ac <HAL_GetTick>
 80013c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013ca:	e028      	b.n	800141e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8eb 	bl	80005ac <LL_ADC_IsEnabled>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d104      	bne.n	80013e6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f8cf 	bl	8000584 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013e6:	f7fe ff61 	bl	80002ac <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d914      	bls.n	800141e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d00d      	beq.n	800141e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001406:	f043 0210 	orr.w	r2, r3, #16
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001412:	f043 0201 	orr.w	r2, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e007      	b.n	800142e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	d1cf      	bne.n	80013cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	8000003f 	.word	0x8000003f
 800143c:	50040300 	.word	0x50040300
 8001440:	20000008 	.word	0x20000008
 8001444:	053e2d63 	.word	0x053e2d63

08001448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001464:	4013      	ands	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001470:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147a:	4a04      	ldr	r2, [pc, #16]	@ (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	60d3      	str	r3, [r2, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001494:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	f003 0307 	and.w	r3, r3, #7
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db0b      	blt.n	80014d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	f003 021f 	and.w	r2, r3, #31
 80014c4:	4907      	ldr	r1, [pc, #28]	@ (80014e4 <__NVIC_EnableIRQ+0x38>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	2001      	movs	r0, #1
 80014ce:	fa00 f202 	lsl.w	r2, r0, r2
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000e100 	.word	0xe000e100

080014e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	db0a      	blt.n	8001512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	490c      	ldr	r1, [pc, #48]	@ (8001534 <__NVIC_SetPriority+0x4c>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	440b      	add	r3, r1
 800150c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001510:	e00a      	b.n	8001528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4908      	ldr	r1, [pc, #32]	@ (8001538 <__NVIC_SetPriority+0x50>)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	3b04      	subs	r3, #4
 8001520:	0112      	lsls	r2, r2, #4
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	440b      	add	r3, r1
 8001526:	761a      	strb	r2, [r3, #24]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	@ 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f1c3 0307 	rsb	r3, r3, #7
 8001556:	2b04      	cmp	r3, #4
 8001558:	bf28      	it	cs
 800155a:	2304      	movcs	r3, #4
 800155c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3304      	adds	r3, #4
 8001562:	2b06      	cmp	r3, #6
 8001564:	d902      	bls.n	800156c <NVIC_EncodePriority+0x30>
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3b03      	subs	r3, #3
 800156a:	e000      	b.n	800156e <NVIC_EncodePriority+0x32>
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	f04f 32ff 	mov.w	r2, #4294967295
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	401a      	ands	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001584:	f04f 31ff 	mov.w	r1, #4294967295
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	43d9      	mvns	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	4313      	orrs	r3, r2
         );
}
 8001596:	4618      	mov	r0, r3
 8001598:	3724      	adds	r7, #36	@ 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015b4:	d301      	bcc.n	80015ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00f      	b.n	80015da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ba:	4a0a      	ldr	r2, [pc, #40]	@ (80015e4 <SysTick_Config+0x40>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c2:	210f      	movs	r1, #15
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f7ff ff8e 	bl	80014e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015cc:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <SysTick_Config+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <SysTick_Config+0x40>)
 80015d4:	2207      	movs	r2, #7
 80015d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000e010 	.word	0xe000e010

080015e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff29 	bl	8001448 <__NVIC_SetPriorityGrouping>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001610:	f7ff ff3e 	bl	8001490 <__NVIC_GetPriorityGrouping>
 8001614:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f7ff ff8e 	bl	800153c <NVIC_EncodePriority>
 8001620:	4602      	mov	r2, r0
 8001622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff5d 	bl	80014e8 <__NVIC_SetPriority>
}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff31 	bl	80014ac <__NVIC_EnableIRQ>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffa2 	bl	80015a4 <SysTick_Config>
 8001660:	4603      	mov	r3, r0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	e17f      	b.n	800197c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2101      	movs	r1, #1
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 8171 	beq.w	8001976 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d005      	beq.n	80016ac <HAL_GPIO_Init+0x40>
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d130      	bne.n	800170e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	2203      	movs	r2, #3
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016e2:	2201      	movs	r2, #1
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	f003 0201 	and.w	r2, r3, #1
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b03      	cmp	r3, #3
 8001718:	d118      	bne.n	800174c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001720:	2201      	movs	r2, #1
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	08db      	lsrs	r3, r3, #3
 8001736:	f003 0201 	and.w	r2, r3, #1
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b03      	cmp	r3, #3
 8001756:	d017      	beq.n	8001788 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d123      	bne.n	80017dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	08da      	lsrs	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3208      	adds	r2, #8
 800179c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	6939      	ldr	r1, [r7, #16]
 80017d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0203 	and.w	r2, r3, #3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80ac 	beq.w	8001976 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	4b5f      	ldr	r3, [pc, #380]	@ (800199c <HAL_GPIO_Init+0x330>)
 8001820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001822:	4a5e      	ldr	r2, [pc, #376]	@ (800199c <HAL_GPIO_Init+0x330>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6613      	str	r3, [r2, #96]	@ 0x60
 800182a:	4b5c      	ldr	r3, [pc, #368]	@ (800199c <HAL_GPIO_Init+0x330>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001836:	4a5a      	ldr	r2, [pc, #360]	@ (80019a0 <HAL_GPIO_Init+0x334>)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001860:	d025      	beq.n	80018ae <HAL_GPIO_Init+0x242>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4f      	ldr	r2, [pc, #316]	@ (80019a4 <HAL_GPIO_Init+0x338>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d01f      	beq.n	80018aa <HAL_GPIO_Init+0x23e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4e      	ldr	r2, [pc, #312]	@ (80019a8 <HAL_GPIO_Init+0x33c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d019      	beq.n	80018a6 <HAL_GPIO_Init+0x23a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4d      	ldr	r2, [pc, #308]	@ (80019ac <HAL_GPIO_Init+0x340>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0x236>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4c      	ldr	r2, [pc, #304]	@ (80019b0 <HAL_GPIO_Init+0x344>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00d      	beq.n	800189e <HAL_GPIO_Init+0x232>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4b      	ldr	r2, [pc, #300]	@ (80019b4 <HAL_GPIO_Init+0x348>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d007      	beq.n	800189a <HAL_GPIO_Init+0x22e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4a      	ldr	r2, [pc, #296]	@ (80019b8 <HAL_GPIO_Init+0x34c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d101      	bne.n	8001896 <HAL_GPIO_Init+0x22a>
 8001892:	2306      	movs	r3, #6
 8001894:	e00c      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 8001896:	2307      	movs	r3, #7
 8001898:	e00a      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 800189a:	2305      	movs	r3, #5
 800189c:	e008      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 800189e:	2304      	movs	r3, #4
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 80018a2:	2303      	movs	r3, #3
 80018a4:	e004      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e002      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <HAL_GPIO_Init+0x244>
 80018ae:	2300      	movs	r3, #0
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	f002 0203 	and.w	r2, r2, #3
 80018b6:	0092      	lsls	r2, r2, #2
 80018b8:	4093      	lsls	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018c0:	4937      	ldr	r1, [pc, #220]	@ (80019a0 <HAL_GPIO_Init+0x334>)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3302      	adds	r3, #2
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018ce:	4b3b      	ldr	r3, [pc, #236]	@ (80019bc <HAL_GPIO_Init+0x350>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018f2:	4a32      	ldr	r2, [pc, #200]	@ (80019bc <HAL_GPIO_Init+0x350>)
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018f8:	4b30      	ldr	r3, [pc, #192]	@ (80019bc <HAL_GPIO_Init+0x350>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800191c:	4a27      	ldr	r2, [pc, #156]	@ (80019bc <HAL_GPIO_Init+0x350>)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001922:	4b26      	ldr	r3, [pc, #152]	@ (80019bc <HAL_GPIO_Init+0x350>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001946:	4a1d      	ldr	r2, [pc, #116]	@ (80019bc <HAL_GPIO_Init+0x350>)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800194c:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <HAL_GPIO_Init+0x350>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001970:	4a12      	ldr	r2, [pc, #72]	@ (80019bc <HAL_GPIO_Init+0x350>)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa22 f303 	lsr.w	r3, r2, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	f47f ae78 	bne.w	800167c <HAL_GPIO_Init+0x10>
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	371c      	adds	r7, #28
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010000 	.word	0x40010000
 80019a4:	48000400 	.word	0x48000400
 80019a8:	48000800 	.word	0x48000800
 80019ac:	48000c00 	.word	0x48000c00
 80019b0:	48001000 	.word	0x48001000
 80019b4:	48001400 	.word	0x48001400
 80019b8:	48001800 	.word	0x48001800
 80019bc:	40010400 	.word	0x40010400

080019c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d020      	beq.n	8001a24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d01b      	beq.n	8001a24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f06f 0202 	mvn.w	r2, #2
 80019f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f8ee 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
 8001a10:	e005      	b.n	8001a1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f8e0 	bl	8001bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f8f1 	bl	8001c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d020      	beq.n	8001a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01b      	beq.n	8001a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f06f 0204 	mvn.w	r2, #4
 8001a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2202      	movs	r2, #2
 8001a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f8c8 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
 8001a5c:	e005      	b.n	8001a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f8ba 	bl	8001bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f8cb 	bl	8001c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d020      	beq.n	8001abc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d01b      	beq.n	8001abc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0208 	mvn.w	r2, #8
 8001a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2204      	movs	r2, #4
 8001a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f8a2 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
 8001aa8:	e005      	b.n	8001ab6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f894 	bl	8001bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f8a5 	bl	8001c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d020      	beq.n	8001b08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f003 0310 	and.w	r3, r3, #16
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d01b      	beq.n	8001b08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f06f 0210 	mvn.w	r2, #16
 8001ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2208      	movs	r2, #8
 8001ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f87c 	bl	8001bec <HAL_TIM_IC_CaptureCallback>
 8001af4:	e005      	b.n	8001b02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f86e 	bl	8001bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f87f 	bl	8001c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00c      	beq.n	8001b2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f06f 0201 	mvn.w	r2, #1
 8001b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f84c 	bl	8001bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00c      	beq.n	8001b50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f876 	bl	8001c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00c      	beq.n	8001b74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f86e 	bl	8001c50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00c      	beq.n	8001b98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d007      	beq.n	8001b98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f83e 	bl	8001c14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00c      	beq.n	8001bbc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f003 0320 	and.w	r3, r3, #32
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0220 	mvn.w	r2, #32
 8001bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f836 	bl	8001c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <adc_CC_Interrupt_init>:


}

void adc_CC_Interrupt_init()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08e      	sub	sp, #56	@ 0x38
 8001c68:	af00      	add	r7, sp, #0
	//Enable clock for GPIOA port
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d54 <adc_CC_Interrupt_init+0xf0>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6e:	4a39      	ldr	r2, [pc, #228]	@ (8001d54 <adc_CC_Interrupt_init+0xf0>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c76:	4b37      	ldr	r3, [pc, #220]	@ (8001d54 <adc_CC_Interrupt_init+0xf0>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
	//Configure PA0 as analog input pin
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	611a      	str	r2, [r3, #16]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	611a      	str	r2, [r3, #16]
 8001ca2:	615a      	str	r2, [r3, #20]

	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62fb      	str	r3, [r7, #44]	@ 0x2c

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cba:	f7ff fcd7 	bl	800166c <HAL_GPIO_Init>


	//Enable clock for ADC1
	__HAL_RCC_ADC_CLK_ENABLE();
 8001cbe:	4b25      	ldr	r3, [pc, #148]	@ (8001d54 <adc_CC_Interrupt_init+0xf0>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc2:	4a24      	ldr	r2, [pc, #144]	@ (8001d54 <adc_CC_Interrupt_init+0xf0>)
 8001cc4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cca:	4b22      	ldr	r3, [pc, #136]	@ (8001d54 <adc_CC_Interrupt_init+0xf0>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]

	//Configure ADC module for Continuous Conversion mode
	hadc1.Instance = ADC1;
 8001cd6:	4b20      	ldr	r3, [pc, #128]	@ (8001d58 <adc_CC_Interrupt_init+0xf4>)
 8001cd8:	4a20      	ldr	r2, [pc, #128]	@ (8001d5c <adc_CC_Interrupt_init+0xf8>)
 8001cda:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <adc_CC_Interrupt_init+0xf4>)
 8001cde:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ce2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d58 <adc_CC_Interrupt_init+0xf4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <adc_CC_Interrupt_init+0xf4>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode  = DISABLE;
 8001cf0:	4b19      	ldr	r3, [pc, #100]	@ (8001d58 <adc_CC_Interrupt_init+0xf4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cf8:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <adc_CC_Interrupt_init+0xf4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cfe:	4b16      	ldr	r3, [pc, #88]	@ (8001d58 <adc_CC_Interrupt_init+0xf4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d04:	4b14      	ldr	r3, [pc, #80]	@ (8001d58 <adc_CC_Interrupt_init+0xf4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001d0a:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <adc_CC_Interrupt_init+0xf4>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d10:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <adc_CC_Interrupt_init+0xf4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	@ (8001d58 <adc_CC_Interrupt_init+0xf4>)
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&hadc1);
 8001d1e:	480e      	ldr	r0, [pc, #56]	@ (8001d58 <adc_CC_Interrupt_init+0xf4>)
 8001d20:	f7fe fc92 	bl	8000648 <HAL_ADC_Init>

	//ADC channel congiguration
	sConfig.Channel = ADC_CHANNEL_5;
 8001d24:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <adc_CC_Interrupt_init+0xfc>)
 8001d26:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001d2c:	2306      	movs	r3, #6
 8001d2e:	617b      	str	r3, [r7, #20]

	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	4619      	mov	r1, r3
 8001d36:	4808      	ldr	r0, [pc, #32]	@ (8001d58 <adc_CC_Interrupt_init+0xf4>)
 8001d38:	f7fe ff0e 	bl	8000b58 <HAL_ADC_ConfigChannel>

	HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2100      	movs	r1, #0
 8001d40:	2012      	movs	r0, #18
 8001d42:	f7ff fc5c 	bl	80015fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001d46:	2012      	movs	r0, #18
 8001d48:	f7ff fc75 	bl	8001636 <HAL_NVIC_EnableIRQ>

}
 8001d4c:	bf00      	nop
 8001d4e:	3738      	adds	r7, #56	@ 0x38
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	2000002c 	.word	0x2000002c
 8001d5c:	50040000 	.word	0x50040000
 8001d60:	14f00020 	.word	0x14f00020

08001d64 <main>:

ADC_HandleTypeDef hadc1;

uint32_t adc_val=0;
int main()
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	HAL_Init();
 8001d68:	f7fe fa30 	bl	80001cc <HAL_Init>
	led_init();
 8001d6c:	f000 f80a 	bl	8001d84 <led_init>
	adc_CC_Interrupt_init();
 8001d70:	f7ff ff78 	bl	8001c64 <adc_CC_Interrupt_init>
	//1.Start ADC_IT
	HAL_ADC_Start_IT(&hadc1);
 8001d74:	4802      	ldr	r0, [pc, #8]	@ (8001d80 <main+0x1c>)
 8001d76:	f7fe fdc1 	bl	80008fc <HAL_ADC_Start_IT>
	while(1)
 8001d7a:	bf00      	nop
 8001d7c:	e7fd      	b.n	8001d7a <main+0x16>
 8001d7e:	bf00      	nop
 8001d80:	2000002c 	.word	0x2000002c

08001d84 <led_init>:
	HAL_GPIO_TogglePin(LED_PORT, LED_PIN);

}

void led_init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
	//1. Configure PA5 as GPIO output for LED
	//Enable Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d98:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <led_init+0x50>)
 8001d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd4 <led_init+0x50>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da4:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <led_init+0x50>)
 8001da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = LED_PIN;
 8001db0:	2320      	movs	r3, #32
 8001db2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dc8:	f7ff fc50 	bl	800166c <HAL_GPIO_Init>
}
 8001dcc:	bf00      	nop
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001ddc:	f7fe fa52 	bl	8000284 <HAL_IncTick>
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <TIM3_IRQHandler>:
	HAL_NVIC_EnableIRQ(TIMx_IRQn);

	HAL_TIM_Base_Start_IT(&TimHandle);
}

void TIMx_IRQHandler(void){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 8001de8:	4802      	ldr	r0, [pc, #8]	@ (8001df4 <TIM3_IRQHandler+0x10>)
 8001dea:	f7ff fde9 	bl	80019c0 <HAL_TIM_IRQHandler>
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000090 	.word	0x20000090

08001df8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001df8:	480d      	ldr	r0, [pc, #52]	@ (8001e30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dfa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dfc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e00:	480c      	ldr	r0, [pc, #48]	@ (8001e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e02:	490d      	ldr	r1, [pc, #52]	@ (8001e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e04:	4a0d      	ldr	r2, [pc, #52]	@ (8001e3c <LoopForever+0xe>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e08:	e002      	b.n	8001e10 <LoopCopyDataInit>

08001e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0e:	3304      	adds	r3, #4

08001e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e14:	d3f9      	bcc.n	8001e0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e16:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e18:	4c0a      	ldr	r4, [pc, #40]	@ (8001e44 <LoopForever+0x16>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e1c:	e001      	b.n	8001e22 <LoopFillZerobss>

08001e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e20:	3204      	adds	r2, #4

08001e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e24:	d3fb      	bcc.n	8001e1e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001e26:	f000 f811 	bl	8001e4c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8001e2a:	f7ff ff9b 	bl	8001d64 <main>

08001e2e <LoopForever>:

LoopForever:
  b LoopForever
 8001e2e:	e7fe      	b.n	8001e2e <LoopForever>
  ldr   r0, =_estack
 8001e30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e3c:	08001eb4 	.word	0x08001eb4
  ldr r2, =_sbss
 8001e40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e44:	200000dc 	.word	0x200000dc

08001e48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC1_2_IRQHandler>
	...

08001e4c <__libc_init_array>:
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	4d0d      	ldr	r5, [pc, #52]	@ (8001e84 <__libc_init_array+0x38>)
 8001e50:	4c0d      	ldr	r4, [pc, #52]	@ (8001e88 <__libc_init_array+0x3c>)
 8001e52:	1b64      	subs	r4, r4, r5
 8001e54:	10a4      	asrs	r4, r4, #2
 8001e56:	2600      	movs	r6, #0
 8001e58:	42a6      	cmp	r6, r4
 8001e5a:	d109      	bne.n	8001e70 <__libc_init_array+0x24>
 8001e5c:	4d0b      	ldr	r5, [pc, #44]	@ (8001e8c <__libc_init_array+0x40>)
 8001e5e:	4c0c      	ldr	r4, [pc, #48]	@ (8001e90 <__libc_init_array+0x44>)
 8001e60:	f000 f818 	bl	8001e94 <_init>
 8001e64:	1b64      	subs	r4, r4, r5
 8001e66:	10a4      	asrs	r4, r4, #2
 8001e68:	2600      	movs	r6, #0
 8001e6a:	42a6      	cmp	r6, r4
 8001e6c:	d105      	bne.n	8001e7a <__libc_init_array+0x2e>
 8001e6e:	bd70      	pop	{r4, r5, r6, pc}
 8001e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e74:	4798      	blx	r3
 8001e76:	3601      	adds	r6, #1
 8001e78:	e7ee      	b.n	8001e58 <__libc_init_array+0xc>
 8001e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e7e:	4798      	blx	r3
 8001e80:	3601      	adds	r6, #1
 8001e82:	e7f2      	b.n	8001e6a <__libc_init_array+0x1e>
 8001e84:	08001eac 	.word	0x08001eac
 8001e88:	08001eac 	.word	0x08001eac
 8001e8c:	08001eac 	.word	0x08001eac
 8001e90:	08001eb0 	.word	0x08001eb0

08001e94 <_init>:
 8001e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e96:	bf00      	nop
 8001e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e9a:	bc08      	pop	{r3}
 8001e9c:	469e      	mov	lr, r3
 8001e9e:	4770      	bx	lr

08001ea0 <_fini>:
 8001ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea2:	bf00      	nop
 8001ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ea6:	bc08      	pop	{r3}
 8001ea8:	469e      	mov	lr, r3
 8001eaa:	4770      	bx	lr
