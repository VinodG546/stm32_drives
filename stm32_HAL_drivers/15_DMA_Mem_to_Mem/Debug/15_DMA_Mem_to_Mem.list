
15_DMA_Mem_to_Mem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b80  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001d0c  08001d0c  00002d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d4c  08001d4c  0000308c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001d4c  08001d4c  0000308c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001d4c  08001d4c  0000308c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d4c  08001d4c  00002d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d50  08001d50  00002d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08001d54  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000308c  2**0
                  CONTENTS
 10 .bss          00000134  2000008c  2000008c  0000308c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  0000308c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000093d1  00000000  00000000  000030bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000174a  00000000  00000000  0000c48d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  0000dbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000885  00000000  00000000  0000e6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001366  00000000  00000000  0000ef75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c62c  00000000  00000000  000102db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb119  00000000  00000000  0001c907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00117a20  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e3c  00000000  00000000  00117a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0011a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000008c 	.word	0x2000008c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001cf4 	.word	0x08001cf4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000090 	.word	0x20000090
 80001c8:	08001cf4 	.word	0x08001cf4

080001cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001d2:	2300      	movs	r3, #0
 80001d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d6:	2003      	movs	r0, #3
 80001d8:	f000 f94a 	bl	8000470 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001dc:	200f      	movs	r0, #15
 80001de:	f000 f815 	bl	800020c <HAL_InitTick>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e8:	2301      	movs	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	e001      	b.n	80001f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ee:	f000 f805 	bl	80001fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
	...

0800020c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000214:	2300      	movs	r3, #0
 8000216:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000218:	4b17      	ldr	r3, [pc, #92]	@ (8000278 <HAL_InitTick+0x6c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d023      	beq.n	8000268 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000220:	4b16      	ldr	r3, [pc, #88]	@ (800027c <HAL_InitTick+0x70>)
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b14      	ldr	r3, [pc, #80]	@ (8000278 <HAL_InitTick+0x6c>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	4619      	mov	r1, r3
 800022a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800022e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000232:	fbb2 f3f3 	udiv	r3, r2, r3
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f941 	bl	80004be <HAL_SYSTICK_Config>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d10f      	bne.n	8000262 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b0f      	cmp	r3, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	2200      	movs	r2, #0
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f000 f919 	bl	8000486 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000254:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <HAL_InitTick+0x74>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	6013      	str	r3, [r2, #0]
 800025a:	e007      	b.n	800026c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800025c:	2301      	movs	r3, #1
 800025e:	73fb      	strb	r3, [r7, #15]
 8000260:	e004      	b.n	800026c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000262:	2301      	movs	r3, #1
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	e001      	b.n	800026c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000268:	2301      	movs	r3, #1
 800026a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000004 	.word	0x20000004
 800027c:	20000088 	.word	0x20000088
 8000280:	20000000 	.word	0x20000000

08000284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <HAL_IncTick+0x20>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	461a      	mov	r2, r3
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <HAL_IncTick+0x24>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4413      	add	r3, r2
 8000294:	4a04      	ldr	r2, [pc, #16]	@ (80002a8 <HAL_IncTick+0x24>)
 8000296:	6013      	str	r3, [r2, #0]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000004 	.word	0x20000004
 80002a8:	200000a8 	.word	0x200000a8

080002ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  return uwTick;
 80002b0:	4b03      	ldr	r3, [pc, #12]	@ (80002c0 <HAL_GetTick+0x14>)
 80002b2:	681b      	ldr	r3, [r3, #0]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	200000a8 	.word	0x200000a8

080002c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002cc:	f7ff ffee 	bl	80002ac <HAL_GetTick>
 80002d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002dc:	d005      	beq.n	80002ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80002de:	4b0a      	ldr	r3, [pc, #40]	@ (8000308 <HAL_Delay+0x44>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	461a      	mov	r2, r3
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	4413      	add	r3, r2
 80002e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002ea:	bf00      	nop
 80002ec:	f7ff ffde 	bl	80002ac <HAL_GetTick>
 80002f0:	4602      	mov	r2, r0
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	1ad3      	subs	r3, r2, r3
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d8f7      	bhi.n	80002ec <HAL_Delay+0x28>
  {
  }
}
 80002fc:	bf00      	nop
 80002fe:	bf00      	nop
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000004 	.word	0x20000004

0800030c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	f003 0307 	and.w	r3, r3, #7
 800031a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800031c:	4b0c      	ldr	r3, [pc, #48]	@ (8000350 <__NVIC_SetPriorityGrouping+0x44>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000322:	68ba      	ldr	r2, [r7, #8]
 8000324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000328:	4013      	ands	r3, r2
 800032a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800033c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800033e:	4a04      	ldr	r2, [pc, #16]	@ (8000350 <__NVIC_SetPriorityGrouping+0x44>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	60d3      	str	r3, [r2, #12]
}
 8000344:	bf00      	nop
 8000346:	3714      	adds	r7, #20
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000358:	4b04      	ldr	r3, [pc, #16]	@ (800036c <__NVIC_GetPriorityGrouping+0x18>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	0a1b      	lsrs	r3, r3, #8
 800035e:	f003 0307 	and.w	r3, r3, #7
}
 8000362:	4618      	mov	r0, r3
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	6039      	str	r1, [r7, #0]
 800037a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800037c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000380:	2b00      	cmp	r3, #0
 8000382:	db0a      	blt.n	800039a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	b2da      	uxtb	r2, r3
 8000388:	490c      	ldr	r1, [pc, #48]	@ (80003bc <__NVIC_SetPriority+0x4c>)
 800038a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800038e:	0112      	lsls	r2, r2, #4
 8000390:	b2d2      	uxtb	r2, r2
 8000392:	440b      	add	r3, r1
 8000394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000398:	e00a      	b.n	80003b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4908      	ldr	r1, [pc, #32]	@ (80003c0 <__NVIC_SetPriority+0x50>)
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	f003 030f 	and.w	r3, r3, #15
 80003a6:	3b04      	subs	r3, #4
 80003a8:	0112      	lsls	r2, r2, #4
 80003aa:	b2d2      	uxtb	r2, r2
 80003ac:	440b      	add	r3, r1
 80003ae:	761a      	strb	r2, [r3, #24]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	e000e100 	.word	0xe000e100
 80003c0:	e000ed00 	.word	0xe000ed00

080003c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b089      	sub	sp, #36	@ 0x24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f003 0307 	and.w	r3, r3, #7
 80003d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003d8:	69fb      	ldr	r3, [r7, #28]
 80003da:	f1c3 0307 	rsb	r3, r3, #7
 80003de:	2b04      	cmp	r3, #4
 80003e0:	bf28      	it	cs
 80003e2:	2304      	movcs	r3, #4
 80003e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003e6:	69fb      	ldr	r3, [r7, #28]
 80003e8:	3304      	adds	r3, #4
 80003ea:	2b06      	cmp	r3, #6
 80003ec:	d902      	bls.n	80003f4 <NVIC_EncodePriority+0x30>
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	3b03      	subs	r3, #3
 80003f2:	e000      	b.n	80003f6 <NVIC_EncodePriority+0x32>
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f8:	f04f 32ff 	mov.w	r2, #4294967295
 80003fc:	69bb      	ldr	r3, [r7, #24]
 80003fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000402:	43da      	mvns	r2, r3
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	401a      	ands	r2, r3
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800040c:	f04f 31ff 	mov.w	r1, #4294967295
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	fa01 f303 	lsl.w	r3, r1, r3
 8000416:	43d9      	mvns	r1, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800041c:	4313      	orrs	r3, r2
         );
}
 800041e:	4618      	mov	r0, r3
 8000420:	3724      	adds	r7, #36	@ 0x24
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
	...

0800042c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3b01      	subs	r3, #1
 8000438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800043c:	d301      	bcc.n	8000442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800043e:	2301      	movs	r3, #1
 8000440:	e00f      	b.n	8000462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000442:	4a0a      	ldr	r2, [pc, #40]	@ (800046c <SysTick_Config+0x40>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3b01      	subs	r3, #1
 8000448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800044a:	210f      	movs	r1, #15
 800044c:	f04f 30ff 	mov.w	r0, #4294967295
 8000450:	f7ff ff8e 	bl	8000370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000454:	4b05      	ldr	r3, [pc, #20]	@ (800046c <SysTick_Config+0x40>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800045a:	4b04      	ldr	r3, [pc, #16]	@ (800046c <SysTick_Config+0x40>)
 800045c:	2207      	movs	r2, #7
 800045e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000460:	2300      	movs	r3, #0
}
 8000462:	4618      	mov	r0, r3
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	e000e010 	.word	0xe000e010

08000470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f7ff ff47 	bl	800030c <__NVIC_SetPriorityGrouping>
}
 800047e:	bf00      	nop
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	b086      	sub	sp, #24
 800048a:	af00      	add	r7, sp, #0
 800048c:	4603      	mov	r3, r0
 800048e:	60b9      	str	r1, [r7, #8]
 8000490:	607a      	str	r2, [r7, #4]
 8000492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000498:	f7ff ff5c 	bl	8000354 <__NVIC_GetPriorityGrouping>
 800049c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	68b9      	ldr	r1, [r7, #8]
 80004a2:	6978      	ldr	r0, [r7, #20]
 80004a4:	f7ff ff8e 	bl	80003c4 <NVIC_EncodePriority>
 80004a8:	4602      	mov	r2, r0
 80004aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff ff5d 	bl	8000370 <__NVIC_SetPriority>
}
 80004b6:	bf00      	nop
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	f7ff ffb0 	bl	800042c <SysTick_Config>
 80004cc:	4603      	mov	r3, r0
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
	...

080004d8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d101      	bne.n	80004ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80004e6:	2301      	movs	r3, #1
 80004e8:	e098      	b.n	800061c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	461a      	mov	r2, r3
 80004f0:	4b4d      	ldr	r3, [pc, #308]	@ (8000628 <HAL_DMA_Init+0x150>)
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d80f      	bhi.n	8000516 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b4b      	ldr	r3, [pc, #300]	@ (800062c <HAL_DMA_Init+0x154>)
 80004fe:	4413      	add	r3, r2
 8000500:	4a4b      	ldr	r2, [pc, #300]	@ (8000630 <HAL_DMA_Init+0x158>)
 8000502:	fba2 2303 	umull	r2, r3, r2, r3
 8000506:	091b      	lsrs	r3, r3, #4
 8000508:	009a      	lsls	r2, r3, #2
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a48      	ldr	r2, [pc, #288]	@ (8000634 <HAL_DMA_Init+0x15c>)
 8000512:	641a      	str	r2, [r3, #64]	@ 0x40
 8000514:	e00e      	b.n	8000534 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	461a      	mov	r2, r3
 800051c:	4b46      	ldr	r3, [pc, #280]	@ (8000638 <HAL_DMA_Init+0x160>)
 800051e:	4413      	add	r3, r2
 8000520:	4a43      	ldr	r2, [pc, #268]	@ (8000630 <HAL_DMA_Init+0x158>)
 8000522:	fba2 2303 	umull	r2, r3, r2, r3
 8000526:	091b      	lsrs	r3, r3, #4
 8000528:	009a      	lsls	r2, r3, #2
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a42      	ldr	r2, [pc, #264]	@ (800063c <HAL_DMA_Init+0x164>)
 8000532:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2202      	movs	r2, #2
 8000538:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800054a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800054e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000558:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	691b      	ldr	r3, [r3, #16]
 800055e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6a1b      	ldr	r3, [r3, #32]
 8000576:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	4313      	orrs	r3, r2
 800057c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800058e:	d039      	beq.n	8000604 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	4a27      	ldr	r2, [pc, #156]	@ (8000634 <HAL_DMA_Init+0x15c>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d11a      	bne.n	80005d0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800059a:	4b29      	ldr	r3, [pc, #164]	@ (8000640 <HAL_DMA_Init+0x168>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005a2:	f003 031c 	and.w	r3, r3, #28
 80005a6:	210f      	movs	r1, #15
 80005a8:	fa01 f303 	lsl.w	r3, r1, r3
 80005ac:	43db      	mvns	r3, r3
 80005ae:	4924      	ldr	r1, [pc, #144]	@ (8000640 <HAL_DMA_Init+0x168>)
 80005b0:	4013      	ands	r3, r2
 80005b2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80005b4:	4b22      	ldr	r3, [pc, #136]	@ (8000640 <HAL_DMA_Init+0x168>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6859      	ldr	r1, [r3, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005c0:	f003 031c 	and.w	r3, r3, #28
 80005c4:	fa01 f303 	lsl.w	r3, r1, r3
 80005c8:	491d      	ldr	r1, [pc, #116]	@ (8000640 <HAL_DMA_Init+0x168>)
 80005ca:	4313      	orrs	r3, r2
 80005cc:	600b      	str	r3, [r1, #0]
 80005ce:	e019      	b.n	8000604 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80005d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <HAL_DMA_Init+0x16c>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005d8:	f003 031c 	and.w	r3, r3, #28
 80005dc:	210f      	movs	r1, #15
 80005de:	fa01 f303 	lsl.w	r3, r1, r3
 80005e2:	43db      	mvns	r3, r3
 80005e4:	4917      	ldr	r1, [pc, #92]	@ (8000644 <HAL_DMA_Init+0x16c>)
 80005e6:	4013      	ands	r3, r2
 80005e8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80005ea:	4b16      	ldr	r3, [pc, #88]	@ (8000644 <HAL_DMA_Init+0x16c>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6859      	ldr	r1, [r3, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f6:	f003 031c 	and.w	r3, r3, #28
 80005fa:	fa01 f303 	lsl.w	r3, r1, r3
 80005fe:	4911      	ldr	r1, [pc, #68]	@ (8000644 <HAL_DMA_Init+0x16c>)
 8000600:	4313      	orrs	r3, r2
 8000602:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2200      	movs	r2, #0
 8000608:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2201      	movs	r2, #1
 800060e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800061a:	2300      	movs	r3, #0
}
 800061c:	4618      	mov	r0, r3
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	40020407 	.word	0x40020407
 800062c:	bffdfff8 	.word	0xbffdfff8
 8000630:	cccccccd 	.word	0xcccccccd
 8000634:	40020000 	.word	0x40020000
 8000638:	bffdfbf8 	.word	0xbffdfbf8
 800063c:	40020400 	.word	0x40020400
 8000640:	400200a8 	.word	0x400200a8
 8000644:	400204a8 	.word	0x400204a8

08000648 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
 8000654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000656:	2300      	movs	r3, #0
 8000658:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000660:	2b01      	cmp	r3, #1
 8000662:	d101      	bne.n	8000668 <HAL_DMA_Start+0x20>
 8000664:	2302      	movs	r3, #2
 8000666:	e02e      	b.n	80006c6 <HAL_DMA_Start+0x7e>
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	2201      	movs	r2, #1
 800066c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000676:	b2db      	uxtb	r3, r3
 8000678:	2b01      	cmp	r3, #1
 800067a:	d11d      	bne.n	80006b8 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2202      	movs	r2, #2
 8000680:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2200      	movs	r2, #0
 8000688:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f022 0201 	bic.w	r2, r2, #1
 8000698:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	68b9      	ldr	r1, [r7, #8]
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f000 f8bb 	bl	800081c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f042 0201 	orr.w	r2, r2, #1
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	e005      	b.n	80006c4 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    status = HAL_BUSY;
 80006c0:	2302      	movs	r3, #2
 80006c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80006c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel Specifies the DMA level complete.
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	60f8      	str	r0, [r7, #12]
 80006d6:	460b      	mov	r3, r1
 80006d8:	607a      	str	r2, [r7, #4]
 80006da:	72fb      	strb	r3, [r7, #11]
  uint32_t temp;
  uint32_t tickstart;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d008      	beq.n	80006fa <HAL_DMA_PollForTransfer+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2204      	movs	r2, #4
 80006ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e08c      	b.n	8000814 <HAL_DMA_PollForTransfer+0x146>
  }

  /* Polling mode not supported in circular mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != 0U)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f003 0320 	and.w	r3, r3, #32
 8000704:	2b00      	cmp	r3, #0
 8000706:	d005      	beq.n	8000714 <HAL_DMA_PollForTransfer+0x46>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800070e:	63da      	str	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8000710:	2301      	movs	r3, #1
 8000712:	e07f      	b.n	8000814 <HAL_DMA_PollForTransfer+0x146>
  }

  /* Get the level transfer complete flag */
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8000714:	7afb      	ldrb	r3, [r7, #11]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d108      	bne.n	800072c <HAL_DMA_PollForTransfer+0x5e>
  {
    /* Transfer Complete flag */
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU);
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071e:	f003 031c 	and.w	r3, r3, #28
 8000722:	2202      	movs	r2, #2
 8000724:	fa02 f303 	lsl.w	r3, r2, r3
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	e007      	b.n	800073c <HAL_DMA_PollForTransfer+0x6e>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU);
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000730:	f003 031c 	and.w	r3, r3, #28
 8000734:	2204      	movs	r2, #4
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800073c:	f7ff fdb6 	bl	80002ac <HAL_GetTick>
 8000740:	6138      	str	r0, [r7, #16]

  while ((hdma->DmaBaseAddress->ISR & temp) == 0U)
 8000742:	e03f      	b.n	80007c4 <HAL_DMA_PollForTransfer+0xf6>
  {
    if ((hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800074e:	f003 031c 	and.w	r3, r3, #28
 8000752:	2108      	movs	r1, #8
 8000754:	fa01 f303 	lsl.w	r3, r1, r3
 8000758:	4013      	ands	r3, r2
 800075a:	2b00      	cmp	r3, #0
 800075c:	d016      	beq.n	800078c <HAL_DMA_PollForTransfer+0xbe>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	f003 021c 	and.w	r2, r3, #28
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076a:	2101      	movs	r1, #1
 800076c:	fa01 f202 	lsl.w	r2, r1, r2
 8000770:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	2201      	movs	r2, #1
 8000776:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2201      	movs	r2, #1
 800077c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000788:	2301      	movs	r3, #1
 800078a:	e043      	b.n	8000814 <HAL_DMA_PollForTransfer+0x146>
    }
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000792:	d017      	beq.n	80007c4 <HAL_DMA_PollForTransfer+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000794:	f7ff fd8a 	bl	80002ac <HAL_GetTick>
 8000798:	4602      	mov	r2, r0
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d302      	bcc.n	80007aa <HAL_DMA_PollForTransfer+0xdc>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d10c      	bne.n	80007c4 <HAL_DMA_PollForTransfer+0xf6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2220      	movs	r2, #32
 80007ae:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2201      	movs	r2, #1
 80007b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80007c0:	2301      	movs	r3, #1
 80007c2:	e027      	b.n	8000814 <HAL_DMA_PollForTransfer+0x146>
  while ((hdma->DmaBaseAddress->ISR & temp) == 0U)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	4013      	ands	r3, r2
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d0b8      	beq.n	8000744 <HAL_DMA_PollForTransfer+0x76>
    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
  }
#endif /* DMAMUX1 */

  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 80007d2:	7afb      	ldrb	r3, [r7, #11]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d112      	bne.n	80007fe <HAL_DMA_PollForTransfer+0x130>
  {
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU));
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007dc:	f003 021c 	and.w	r2, r3, #28
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e4:	2102      	movs	r1, #2
 80007e6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ea:	605a      	str	r2, [r3, #4]

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2201      	movs	r2, #1
 80007f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 80007fc:	e009      	b.n	8000812 <HAL_DMA_PollForTransfer+0x144>
  }
  else
  {
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU));
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000802:	f003 021c 	and.w	r2, r3, #28
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	2104      	movs	r1, #4
 800080c:	fa01 f202 	lsl.w	r2, r1, r2
 8000810:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082e:	f003 021c 	and.w	r2, r3, #28
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000836:	2101      	movs	r1, #1
 8000838:	fa01 f202 	lsl.w	r2, r1, r2
 800083c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	2b10      	cmp	r3, #16
 800084c:	d108      	bne.n	8000860 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800085e:	e007      	b.n	8000870 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	68ba      	ldr	r2, [r7, #8]
 8000866:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	60da      	str	r2, [r3, #12]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800087c:	b480      	push	{r7}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800088a:	e17f      	b.n	8000b8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	2101      	movs	r1, #1
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	fa01 f303 	lsl.w	r3, r1, r3
 8000898:	4013      	ands	r3, r2
 800089a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f000 8171 	beq.w	8000b86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f003 0303 	and.w	r3, r3, #3
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d005      	beq.n	80008bc <HAL_GPIO_Init+0x40>
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f003 0303 	and.w	r3, r3, #3
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d130      	bne.n	800091e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	2203      	movs	r2, #3
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	68da      	ldr	r2, [r3, #12]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008f2:	2201      	movs	r2, #1
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43db      	mvns	r3, r3
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	4013      	ands	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	091b      	lsrs	r3, r3, #4
 8000908:	f003 0201 	and.w	r2, r3, #1
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f003 0303 	and.w	r3, r3, #3
 8000926:	2b03      	cmp	r3, #3
 8000928:	d118      	bne.n	800095c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800092e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000930:	2201      	movs	r2, #1
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	08db      	lsrs	r3, r3, #3
 8000946:	f003 0201 	and.w	r2, r3, #1
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f003 0303 	and.w	r3, r3, #3
 8000964:	2b03      	cmp	r3, #3
 8000966:	d017      	beq.n	8000998 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	2203      	movs	r2, #3
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4313      	orrs	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f003 0303 	and.w	r3, r3, #3
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d123      	bne.n	80009ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	08da      	lsrs	r2, r3, #3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3208      	adds	r2, #8
 80009ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f003 0307 	and.w	r3, r3, #7
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	220f      	movs	r2, #15
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	691a      	ldr	r2, [r3, #16]
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4313      	orrs	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	08da      	lsrs	r2, r3, #3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	3208      	adds	r2, #8
 80009e6:	6939      	ldr	r1, [r7, #16]
 80009e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	2203      	movs	r2, #3
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f003 0203 	and.w	r2, r3, #3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f000 80ac 	beq.w	8000b86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b5f      	ldr	r3, [pc, #380]	@ (8000bac <HAL_GPIO_Init+0x330>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a32:	4a5e      	ldr	r2, [pc, #376]	@ (8000bac <HAL_GPIO_Init+0x330>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a3a:	4b5c      	ldr	r3, [pc, #368]	@ (8000bac <HAL_GPIO_Init+0x330>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a46:	4a5a      	ldr	r2, [pc, #360]	@ (8000bb0 <HAL_GPIO_Init+0x334>)
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	f003 0303 	and.w	r3, r3, #3
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a70:	d025      	beq.n	8000abe <HAL_GPIO_Init+0x242>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a4f      	ldr	r2, [pc, #316]	@ (8000bb4 <HAL_GPIO_Init+0x338>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d01f      	beq.n	8000aba <HAL_GPIO_Init+0x23e>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a4e      	ldr	r2, [pc, #312]	@ (8000bb8 <HAL_GPIO_Init+0x33c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d019      	beq.n	8000ab6 <HAL_GPIO_Init+0x23a>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a4d      	ldr	r2, [pc, #308]	@ (8000bbc <HAL_GPIO_Init+0x340>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d013      	beq.n	8000ab2 <HAL_GPIO_Init+0x236>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a4c      	ldr	r2, [pc, #304]	@ (8000bc0 <HAL_GPIO_Init+0x344>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d00d      	beq.n	8000aae <HAL_GPIO_Init+0x232>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4b      	ldr	r2, [pc, #300]	@ (8000bc4 <HAL_GPIO_Init+0x348>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d007      	beq.n	8000aaa <HAL_GPIO_Init+0x22e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a4a      	ldr	r2, [pc, #296]	@ (8000bc8 <HAL_GPIO_Init+0x34c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d101      	bne.n	8000aa6 <HAL_GPIO_Init+0x22a>
 8000aa2:	2306      	movs	r3, #6
 8000aa4:	e00c      	b.n	8000ac0 <HAL_GPIO_Init+0x244>
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	e00a      	b.n	8000ac0 <HAL_GPIO_Init+0x244>
 8000aaa:	2305      	movs	r3, #5
 8000aac:	e008      	b.n	8000ac0 <HAL_GPIO_Init+0x244>
 8000aae:	2304      	movs	r3, #4
 8000ab0:	e006      	b.n	8000ac0 <HAL_GPIO_Init+0x244>
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	e004      	b.n	8000ac0 <HAL_GPIO_Init+0x244>
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e002      	b.n	8000ac0 <HAL_GPIO_Init+0x244>
 8000aba:	2301      	movs	r3, #1
 8000abc:	e000      	b.n	8000ac0 <HAL_GPIO_Init+0x244>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	f002 0203 	and.w	r2, r2, #3
 8000ac6:	0092      	lsls	r2, r2, #2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ad0:	4937      	ldr	r1, [pc, #220]	@ (8000bb0 <HAL_GPIO_Init+0x334>)
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ade:	4b3b      	ldr	r3, [pc, #236]	@ (8000bcc <HAL_GPIO_Init+0x350>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b02:	4a32      	ldr	r2, [pc, #200]	@ (8000bcc <HAL_GPIO_Init+0x350>)
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b08:	4b30      	ldr	r3, [pc, #192]	@ (8000bcc <HAL_GPIO_Init+0x350>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d003      	beq.n	8000b2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b2c:	4a27      	ldr	r2, [pc, #156]	@ (8000bcc <HAL_GPIO_Init+0x350>)
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b32:	4b26      	ldr	r3, [pc, #152]	@ (8000bcc <HAL_GPIO_Init+0x350>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b56:	4a1d      	ldr	r2, [pc, #116]	@ (8000bcc <HAL_GPIO_Init+0x350>)
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <HAL_GPIO_Init+0x350>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b80:	4a12      	ldr	r2, [pc, #72]	@ (8000bcc <HAL_GPIO_Init+0x350>)
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa22 f303 	lsr.w	r3, r2, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f47f ae78 	bne.w	800088c <HAL_GPIO_Init+0x10>
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	371c      	adds	r7, #28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40010000 	.word	0x40010000
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	48000800 	.word	0x48000800
 8000bbc:	48000c00 	.word	0x48000c00
 8000bc0:	48001000 	.word	0x48001000
 8000bc4:	48001400 	.word	0x48001400
 8000bc8:	48001800 	.word	0x48001800
 8000bcc:	40010400 	.word	0x40010400

08000bd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000be2:	887a      	ldrh	r2, [r7, #2]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4013      	ands	r3, r2
 8000be8:	041a      	lsls	r2, r3, #16
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	43d9      	mvns	r1, r3
 8000bee:	887b      	ldrh	r3, [r7, #2]
 8000bf0:	400b      	ands	r3, r1
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	619a      	str	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <HAL_PWREx_GetVoltageRange+0x18>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40007000 	.word	0x40007000

08000c20 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d101      	bne.n	8000c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e3ca      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c32:	4b97      	ldr	r3, [pc, #604]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f003 030c 	and.w	r3, r3, #12
 8000c3a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c3c:	4b94      	ldr	r3, [pc, #592]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0310 	and.w	r3, r3, #16
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f000 80e4 	beq.w	8000e1c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d007      	beq.n	8000c6a <HAL_RCC_OscConfig+0x4a>
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	2b0c      	cmp	r3, #12
 8000c5e:	f040 808b 	bne.w	8000d78 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	f040 8087 	bne.w	8000d78 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c6a:	4b89      	ldr	r3, [pc, #548]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d005      	beq.n	8000c82 <HAL_RCC_OscConfig+0x62>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e3a2      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a1a      	ldr	r2, [r3, #32]
 8000c86:	4b82      	ldr	r3, [pc, #520]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d004      	beq.n	8000c9c <HAL_RCC_OscConfig+0x7c>
 8000c92:	4b7f      	ldr	r3, [pc, #508]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000c9a:	e005      	b.n	8000ca8 <HAL_RCC_OscConfig+0x88>
 8000c9c:	4b7c      	ldr	r3, [pc, #496]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ca2:	091b      	lsrs	r3, r3, #4
 8000ca4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d223      	bcs.n	8000cf4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a1b      	ldr	r3, [r3, #32]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 fd1d 	bl	80016f0 <RCC_SetFlashLatencyFromMSIRange>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e383      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cc0:	4b73      	ldr	r3, [pc, #460]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a72      	ldr	r2, [pc, #456]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cc6:	f043 0308 	orr.w	r3, r3, #8
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b70      	ldr	r3, [pc, #448]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a1b      	ldr	r3, [r3, #32]
 8000cd8:	496d      	ldr	r1, [pc, #436]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cde:	4b6c      	ldr	r3, [pc, #432]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	4968      	ldr	r1, [pc, #416]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	604b      	str	r3, [r1, #4]
 8000cf2:	e025      	b.n	8000d40 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cf4:	4b66      	ldr	r3, [pc, #408]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a65      	ldr	r2, [pc, #404]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000cfa:	f043 0308 	orr.w	r3, r3, #8
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b63      	ldr	r3, [pc, #396]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a1b      	ldr	r3, [r3, #32]
 8000d0c:	4960      	ldr	r1, [pc, #384]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d12:	4b5f      	ldr	r3, [pc, #380]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	021b      	lsls	r3, r3, #8
 8000d20:	495b      	ldr	r1, [pc, #364]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d22:	4313      	orrs	r3, r2
 8000d24:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d109      	bne.n	8000d40 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a1b      	ldr	r3, [r3, #32]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fcdd 	bl	80016f0 <RCC_SetFlashLatencyFromMSIRange>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e343      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d40:	f000 fc4a 	bl	80015d8 <HAL_RCC_GetSysClockFreq>
 8000d44:	4602      	mov	r2, r0
 8000d46:	4b52      	ldr	r3, [pc, #328]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	091b      	lsrs	r3, r3, #4
 8000d4c:	f003 030f 	and.w	r3, r3, #15
 8000d50:	4950      	ldr	r1, [pc, #320]	@ (8000e94 <HAL_RCC_OscConfig+0x274>)
 8000d52:	5ccb      	ldrb	r3, [r1, r3]
 8000d54:	f003 031f 	and.w	r3, r3, #31
 8000d58:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5c:	4a4e      	ldr	r2, [pc, #312]	@ (8000e98 <HAL_RCC_OscConfig+0x278>)
 8000d5e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d60:	4b4e      	ldr	r3, [pc, #312]	@ (8000e9c <HAL_RCC_OscConfig+0x27c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fa51 	bl	800020c <HAL_InitTick>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d052      	beq.n	8000e1a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	e327      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d032      	beq.n	8000de6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d80:	4b43      	ldr	r3, [pc, #268]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a42      	ldr	r2, [pc, #264]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d8c:	f7ff fa8e 	bl	80002ac <HAL_GetTick>
 8000d90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d92:	e008      	b.n	8000da6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d94:	f7ff fa8a 	bl	80002ac <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d901      	bls.n	8000da6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000da2:	2303      	movs	r3, #3
 8000da4:	e310      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000da6:	4b3a      	ldr	r3, [pc, #232]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0f0      	beq.n	8000d94 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000db2:	4b37      	ldr	r3, [pc, #220]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a36      	ldr	r2, [pc, #216]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	4b34      	ldr	r3, [pc, #208]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a1b      	ldr	r3, [r3, #32]
 8000dca:	4931      	ldr	r1, [pc, #196]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dd0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69db      	ldr	r3, [r3, #28]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	492c      	ldr	r1, [pc, #176]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000de0:	4313      	orrs	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]
 8000de4:	e01a      	b.n	8000e1c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000de6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a29      	ldr	r2, [pc, #164]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000dec:	f023 0301 	bic.w	r3, r3, #1
 8000df0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000df2:	f7ff fa5b 	bl	80002ac <HAL_GetTick>
 8000df6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000df8:	e008      	b.n	8000e0c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dfa:	f7ff fa57 	bl	80002ac <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e2dd      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e0c:	4b20      	ldr	r3, [pc, #128]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1f0      	bne.n	8000dfa <HAL_RCC_OscConfig+0x1da>
 8000e18:	e000      	b.n	8000e1c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e1a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d074      	beq.n	8000f12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	2b08      	cmp	r3, #8
 8000e2c:	d005      	beq.n	8000e3a <HAL_RCC_OscConfig+0x21a>
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	2b0c      	cmp	r3, #12
 8000e32:	d10e      	bne.n	8000e52 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d10b      	bne.n	8000e52 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d064      	beq.n	8000f10 <HAL_RCC_OscConfig+0x2f0>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d160      	bne.n	8000f10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e2ba      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e5a:	d106      	bne.n	8000e6a <HAL_RCC_OscConfig+0x24a>
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0b      	ldr	r2, [pc, #44]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	e026      	b.n	8000eb8 <HAL_RCC_OscConfig+0x298>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e72:	d115      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x280>
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a05      	ldr	r2, [pc, #20]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a02      	ldr	r2, [pc, #8]	@ (8000e90 <HAL_RCC_OscConfig+0x270>)
 8000e86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	e014      	b.n	8000eb8 <HAL_RCC_OscConfig+0x298>
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000
 8000e94:	08001d0c 	.word	0x08001d0c
 8000e98:	20000088 	.word	0x20000088
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	4ba0      	ldr	r3, [pc, #640]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a9f      	ldr	r2, [pc, #636]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b9d      	ldr	r3, [pc, #628]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a9c      	ldr	r2, [pc, #624]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d013      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec0:	f7ff f9f4 	bl	80002ac <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff f9f0 	bl	80002ac <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	@ 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e276      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eda:	4b92      	ldr	r3, [pc, #584]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f0      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x2a8>
 8000ee6:	e014      	b.n	8000f12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ee8:	f7ff f9e0 	bl	80002ac <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef0:	f7ff f9dc 	bl	80002ac <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b64      	cmp	r3, #100	@ 0x64
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e262      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f02:	4b88      	ldr	r3, [pc, #544]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1f0      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x2d0>
 8000f0e:	e000      	b.n	8000f12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d060      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d005      	beq.n	8000f30 <HAL_RCC_OscConfig+0x310>
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2b0c      	cmp	r3, #12
 8000f28:	d119      	bne.n	8000f5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d116      	bne.n	8000f5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f30:	4b7c      	ldr	r3, [pc, #496]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d005      	beq.n	8000f48 <HAL_RCC_OscConfig+0x328>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e23f      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f48:	4b76      	ldr	r3, [pc, #472]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	061b      	lsls	r3, r3, #24
 8000f56:	4973      	ldr	r1, [pc, #460]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f5c:	e040      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d023      	beq.n	8000fae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f66:	4b6f      	ldr	r3, [pc, #444]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a6e      	ldr	r2, [pc, #440]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f72:	f7ff f99b 	bl	80002ac <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f7a:	f7ff f997 	bl	80002ac <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e21d      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f8c:	4b65      	ldr	r3, [pc, #404]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0f0      	beq.n	8000f7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f98:	4b62      	ldr	r3, [pc, #392]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	061b      	lsls	r3, r3, #24
 8000fa6:	495f      	ldr	r1, [pc, #380]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
 8000fac:	e018      	b.n	8000fe0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fae:	4b5d      	ldr	r3, [pc, #372]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a5c      	ldr	r2, [pc, #368]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fba:	f7ff f977 	bl	80002ac <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc2:	f7ff f973 	bl	80002ac <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e1f9      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fd4:	4b53      	ldr	r3, [pc, #332]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f0      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d03c      	beq.n	8001066 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d01c      	beq.n	800102e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ffa:	4a4a      	ldr	r2, [pc, #296]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001004:	f7ff f952 	bl	80002ac <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800100c:	f7ff f94e 	bl	80002ac <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e1d4      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800101e:	4b41      	ldr	r3, [pc, #260]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0ef      	beq.n	800100c <HAL_RCC_OscConfig+0x3ec>
 800102c:	e01b      	b.n	8001066 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800102e:	4b3d      	ldr	r3, [pc, #244]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001030:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001034:	4a3b      	ldr	r2, [pc, #236]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001036:	f023 0301 	bic.w	r3, r3, #1
 800103a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800103e:	f7ff f935 	bl	80002ac <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001046:	f7ff f931 	bl	80002ac <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e1b7      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001058:	4b32      	ldr	r3, [pc, #200]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 800105a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1ef      	bne.n	8001046 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 80a6 	beq.w	80011c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001078:	4b2a      	ldr	r3, [pc, #168]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 800107a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10d      	bne.n	80010a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001084:	4b27      	ldr	r3, [pc, #156]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001088:	4a26      	ldr	r2, [pc, #152]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800108e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001090:	4b24      	ldr	r3, [pc, #144]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109c:	2301      	movs	r3, #1
 800109e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010a0:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <HAL_RCC_OscConfig+0x508>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d118      	bne.n	80010de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <HAL_RCC_OscConfig+0x508>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001128 <HAL_RCC_OscConfig+0x508>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010b8:	f7ff f8f8 	bl	80002ac <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c0:	f7ff f8f4 	bl	80002ac <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e17a      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d2:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <HAL_RCC_OscConfig+0x508>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f0      	beq.n	80010c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d108      	bne.n	80010f8 <HAL_RCC_OscConfig+0x4d8>
 80010e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 80010e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010f6:	e029      	b.n	800114c <HAL_RCC_OscConfig+0x52c>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	d115      	bne.n	800112c <HAL_RCC_OscConfig+0x50c>
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001106:	4a07      	ldr	r2, [pc, #28]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001116:	4a03      	ldr	r2, [pc, #12]	@ (8001124 <HAL_RCC_OscConfig+0x504>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001120:	e014      	b.n	800114c <HAL_RCC_OscConfig+0x52c>
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	40007000 	.word	0x40007000
 800112c:	4b9c      	ldr	r3, [pc, #624]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 800112e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001132:	4a9b      	ldr	r2, [pc, #620]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 8001134:	f023 0301 	bic.w	r3, r3, #1
 8001138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800113c:	4b98      	ldr	r3, [pc, #608]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 800113e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001142:	4a97      	ldr	r2, [pc, #604]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 8001144:	f023 0304 	bic.w	r3, r3, #4
 8001148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d016      	beq.n	8001182 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001154:	f7ff f8aa 	bl	80002ac <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800115a:	e00a      	b.n	8001172 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800115c:	f7ff f8a6 	bl	80002ac <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800116a:	4293      	cmp	r3, r2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e12a      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001172:	4b8b      	ldr	r3, [pc, #556]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 8001174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0ed      	beq.n	800115c <HAL_RCC_OscConfig+0x53c>
 8001180:	e015      	b.n	80011ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001182:	f7ff f893 	bl	80002ac <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001188:	e00a      	b.n	80011a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118a:	f7ff f88f 	bl	80002ac <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001198:	4293      	cmp	r3, r2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e113      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011a0:	4b7f      	ldr	r3, [pc, #508]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 80011a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1ed      	bne.n	800118a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d105      	bne.n	80011c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b4:	4b7a      	ldr	r3, [pc, #488]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 80011b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b8:	4a79      	ldr	r2, [pc, #484]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 80011ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011be:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80fe 	beq.w	80013c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	f040 80d0 	bne.w	8001374 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80011d4:	4b72      	ldr	r3, [pc, #456]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f003 0203 	and.w	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d130      	bne.n	800124a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	3b01      	subs	r3, #1
 80011f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d127      	bne.n	800124a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001204:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001206:	429a      	cmp	r2, r3
 8001208:	d11f      	bne.n	800124a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001214:	2a07      	cmp	r2, #7
 8001216:	bf14      	ite	ne
 8001218:	2201      	movne	r2, #1
 800121a:	2200      	moveq	r2, #0
 800121c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800121e:	4293      	cmp	r3, r2
 8001220:	d113      	bne.n	800124a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800122c:	085b      	lsrs	r3, r3, #1
 800122e:	3b01      	subs	r3, #1
 8001230:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001232:	429a      	cmp	r2, r3
 8001234:	d109      	bne.n	800124a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	085b      	lsrs	r3, r3, #1
 8001242:	3b01      	subs	r3, #1
 8001244:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001246:	429a      	cmp	r2, r3
 8001248:	d06e      	beq.n	8001328 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	2b0c      	cmp	r3, #12
 800124e:	d069      	beq.n	8001324 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001250:	4b53      	ldr	r3, [pc, #332]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d105      	bne.n	8001268 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800125c:	4b50      	ldr	r3, [pc, #320]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0ad      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800126c:	4b4c      	ldr	r3, [pc, #304]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a4b      	ldr	r2, [pc, #300]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 8001272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001276:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001278:	f7ff f818 	bl	80002ac <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001280:	f7ff f814 	bl	80002ac <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e09a      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001292:	4b43      	ldr	r3, [pc, #268]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800129e:	4b40      	ldr	r3, [pc, #256]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	4b40      	ldr	r3, [pc, #256]	@ (80013a4 <HAL_RCC_OscConfig+0x784>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80012ae:	3a01      	subs	r2, #1
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	4311      	orrs	r1, r2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80012b8:	0212      	lsls	r2, r2, #8
 80012ba:	4311      	orrs	r1, r2
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80012c0:	0852      	lsrs	r2, r2, #1
 80012c2:	3a01      	subs	r2, #1
 80012c4:	0552      	lsls	r2, r2, #21
 80012c6:	4311      	orrs	r1, r2
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80012cc:	0852      	lsrs	r2, r2, #1
 80012ce:	3a01      	subs	r2, #1
 80012d0:	0652      	lsls	r2, r2, #25
 80012d2:	4311      	orrs	r1, r2
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80012d8:	0912      	lsrs	r2, r2, #4
 80012da:	0452      	lsls	r2, r2, #17
 80012dc:	430a      	orrs	r2, r1
 80012de:	4930      	ldr	r1, [pc, #192]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80012e4:	4b2e      	ldr	r3, [pc, #184]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a2d      	ldr	r2, [pc, #180]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 80012ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012f0:	4b2b      	ldr	r3, [pc, #172]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	4a2a      	ldr	r2, [pc, #168]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 80012f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012fc:	f7fe ffd6 	bl	80002ac <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001304:	f7fe ffd2 	bl	80002ac <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e058      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001316:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001322:	e050      	b.n	80013c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e04f      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001328:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d148      	bne.n	80013c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001334:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a19      	ldr	r2, [pc, #100]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 800133a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800133e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001340:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	4a16      	ldr	r2, [pc, #88]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 8001346:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800134a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800134c:	f7fe ffae 	bl	80002ac <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001354:	f7fe ffaa 	bl	80002ac <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e030      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0x734>
 8001372:	e028      	b.n	80013c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2b0c      	cmp	r3, #12
 8001378:	d023      	beq.n	80013c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a08      	ldr	r2, [pc, #32]	@ (80013a0 <HAL_RCC_OscConfig+0x780>)
 8001380:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001386:	f7fe ff91 	bl	80002ac <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800138c:	e00c      	b.n	80013a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138e:	f7fe ff8d 	bl	80002ac <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d905      	bls.n	80013a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e013      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
 80013a0:	40021000 	.word	0x40021000
 80013a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <HAL_RCC_OscConfig+0x7b0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1ec      	bne.n	800138e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <HAL_RCC_OscConfig+0x7b0>)
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	4905      	ldr	r1, [pc, #20]	@ (80013d0 <HAL_RCC_OscConfig+0x7b0>)
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_RCC_OscConfig+0x7b4>)
 80013bc:	4013      	ands	r3, r2
 80013be:	60cb      	str	r3, [r1, #12]
 80013c0:	e001      	b.n	80013c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40021000 	.word	0x40021000
 80013d4:	feeefffc 	.word	0xfeeefffc

080013d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0e7      	b.n	80015bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013ec:	4b75      	ldr	r3, [pc, #468]	@ (80015c4 <HAL_RCC_ClockConfig+0x1ec>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d910      	bls.n	800141c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fa:	4b72      	ldr	r3, [pc, #456]	@ (80015c4 <HAL_RCC_ClockConfig+0x1ec>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 0207 	bic.w	r2, r3, #7
 8001402:	4970      	ldr	r1, [pc, #448]	@ (80015c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800140a:	4b6e      	ldr	r3, [pc, #440]	@ (80015c4 <HAL_RCC_ClockConfig+0x1ec>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	429a      	cmp	r2, r3
 8001416:	d001      	beq.n	800141c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0cf      	b.n	80015bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d010      	beq.n	800144a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	4b66      	ldr	r3, [pc, #408]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001434:	429a      	cmp	r2, r3
 8001436:	d908      	bls.n	800144a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001438:	4b63      	ldr	r3, [pc, #396]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	4960      	ldr	r1, [pc, #384]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001446:	4313      	orrs	r3, r2
 8001448:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	d04c      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d107      	bne.n	800146e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800145e:	4b5a      	ldr	r3, [pc, #360]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d121      	bne.n	80014ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e0a6      	b.n	80015bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d107      	bne.n	8001486 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001476:	4b54      	ldr	r3, [pc, #336]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d115      	bne.n	80014ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e09a      	b.n	80015bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d107      	bne.n	800149e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800148e:	4b4e      	ldr	r3, [pc, #312]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d109      	bne.n	80014ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e08e      	b.n	80015bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800149e:	4b4a      	ldr	r3, [pc, #296]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e086      	b.n	80015bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014ae:	4b46      	ldr	r3, [pc, #280]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f023 0203 	bic.w	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4943      	ldr	r1, [pc, #268]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014c0:	f7fe fef4 	bl	80002ac <HAL_GetTick>
 80014c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	e00a      	b.n	80014de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c8:	f7fe fef0 	bl	80002ac <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e06e      	b.n	80015bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	4b3a      	ldr	r3, [pc, #232]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 020c 	and.w	r2, r3, #12
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d1eb      	bne.n	80014c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d010      	beq.n	800151e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	4b31      	ldr	r3, [pc, #196]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001508:	429a      	cmp	r2, r3
 800150a:	d208      	bcs.n	800151e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150c:	4b2e      	ldr	r3, [pc, #184]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	492b      	ldr	r1, [pc, #172]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 800151a:	4313      	orrs	r3, r2
 800151c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800151e:	4b29      	ldr	r3, [pc, #164]	@ (80015c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d210      	bcs.n	800154e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152c:	4b25      	ldr	r3, [pc, #148]	@ (80015c4 <HAL_RCC_ClockConfig+0x1ec>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f023 0207 	bic.w	r2, r3, #7
 8001534:	4923      	ldr	r1, [pc, #140]	@ (80015c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	4313      	orrs	r3, r2
 800153a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153c:	4b21      	ldr	r3, [pc, #132]	@ (80015c4 <HAL_RCC_ClockConfig+0x1ec>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d001      	beq.n	800154e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e036      	b.n	80015bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	2b00      	cmp	r3, #0
 8001558:	d008      	beq.n	800156c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800155a:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	4918      	ldr	r1, [pc, #96]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001568:	4313      	orrs	r3, r2
 800156a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	2b00      	cmp	r3, #0
 8001576:	d009      	beq.n	800158c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001578:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	4910      	ldr	r1, [pc, #64]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001588:	4313      	orrs	r3, r2
 800158a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800158c:	f000 f824 	bl	80015d8 <HAL_RCC_GetSysClockFreq>
 8001590:	4602      	mov	r2, r0
 8001592:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	f003 030f 	and.w	r3, r3, #15
 800159c:	490b      	ldr	r1, [pc, #44]	@ (80015cc <HAL_RCC_ClockConfig+0x1f4>)
 800159e:	5ccb      	ldrb	r3, [r1, r3]
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
 80015a8:	4a09      	ldr	r2, [pc, #36]	@ (80015d0 <HAL_RCC_ClockConfig+0x1f8>)
 80015aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015ac:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <HAL_RCC_ClockConfig+0x1fc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe fe2b 	bl	800020c <HAL_InitTick>
 80015b6:	4603      	mov	r3, r0
 80015b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80015ba:	7afb      	ldrb	r3, [r7, #11]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40022000 	.word	0x40022000
 80015c8:	40021000 	.word	0x40021000
 80015cc:	08001d0c 	.word	0x08001d0c
 80015d0:	20000088 	.word	0x20000088
 80015d4:	20000000 	.word	0x20000000

080015d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	@ 0x24
 80015dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e6:	4b3e      	ldr	r3, [pc, #248]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f0:	4b3b      	ldr	r3, [pc, #236]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_GetSysClockFreq+0x34>
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	2b0c      	cmp	r3, #12
 8001604:	d121      	bne.n	800164a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d11e      	bne.n	800164a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800160c:	4b34      	ldr	r3, [pc, #208]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d107      	bne.n	8001628 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001618:	4b31      	ldr	r3, [pc, #196]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800161a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800161e:	0a1b      	lsrs	r3, r3, #8
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	e005      	b.n	8001634 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001628:	4b2d      	ldr	r3, [pc, #180]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001634:	4a2b      	ldr	r2, [pc, #172]	@ (80016e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10d      	bne.n	8001660 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001648:	e00a      	b.n	8001660 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2b04      	cmp	r3, #4
 800164e:	d102      	bne.n	8001656 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001650:	4b25      	ldr	r3, [pc, #148]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	e004      	b.n	8001660 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	2b08      	cmp	r3, #8
 800165a:	d101      	bne.n	8001660 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800165c:	4b23      	ldr	r3, [pc, #140]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x114>)
 800165e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d134      	bne.n	80016d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001666:	4b1e      	ldr	r3, [pc, #120]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d003      	beq.n	800167e <HAL_RCC_GetSysClockFreq+0xa6>
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d003      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0xac>
 800167c:	e005      	b.n	800168a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800167e:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001680:	617b      	str	r3, [r7, #20]
      break;
 8001682:	e005      	b.n	8001690 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001684:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x114>)
 8001686:	617b      	str	r3, [r7, #20]
      break;
 8001688:	e002      	b.n	8001690 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	617b      	str	r3, [r7, #20]
      break;
 800168e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001690:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	3301      	adds	r3, #1
 800169c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800169e:	4b10      	ldr	r3, [pc, #64]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	fb03 f202 	mul.w	r2, r3, r2
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016b6:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	0e5b      	lsrs	r3, r3, #25
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	3301      	adds	r3, #1
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80016d0:	69bb      	ldr	r3, [r7, #24]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	@ 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	08001d1c 	.word	0x08001d1c
 80016e8:	00f42400 	.word	0x00f42400
 80016ec:	007a1200 	.word	0x007a1200

080016f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016fc:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001708:	f7ff fa7c 	bl	8000c04 <HAL_PWREx_GetVoltageRange>
 800170c:	6178      	str	r0, [r7, #20]
 800170e:	e014      	b.n	800173a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001710:	4b25      	ldr	r3, [pc, #148]	@ (80017a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001714:	4a24      	ldr	r2, [pc, #144]	@ (80017a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171a:	6593      	str	r3, [r2, #88]	@ 0x58
 800171c:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001728:	f7ff fa6c 	bl	8000c04 <HAL_PWREx_GetVoltageRange>
 800172c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800172e:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001732:	4a1d      	ldr	r2, [pc, #116]	@ (80017a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001738:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001740:	d10b      	bne.n	800175a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b80      	cmp	r3, #128	@ 0x80
 8001746:	d919      	bls.n	800177c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2ba0      	cmp	r3, #160	@ 0xa0
 800174c:	d902      	bls.n	8001754 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800174e:	2302      	movs	r3, #2
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	e013      	b.n	800177c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001754:	2301      	movs	r3, #1
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	e010      	b.n	800177c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b80      	cmp	r3, #128	@ 0x80
 800175e:	d902      	bls.n	8001766 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001760:	2303      	movs	r3, #3
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	e00a      	b.n	800177c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b80      	cmp	r3, #128	@ 0x80
 800176a:	d102      	bne.n	8001772 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800176c:	2302      	movs	r3, #2
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	e004      	b.n	800177c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b70      	cmp	r3, #112	@ 0x70
 8001776:	d101      	bne.n	800177c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001778:	2301      	movs	r3, #1
 800177a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 0207 	bic.w	r2, r3, #7
 8001784:	4909      	ldr	r1, [pc, #36]	@ (80017ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800178c:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	429a      	cmp	r2, r3
 8001798:	d001      	beq.n	800179e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40022000 	.word	0x40022000

080017b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d020      	beq.n	8001814 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d01b      	beq.n	8001814 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f06f 0202 	mvn.w	r2, #2
 80017e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f8ee 	bl	80019dc <HAL_TIM_IC_CaptureCallback>
 8001800:	e005      	b.n	800180e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f8e0 	bl	80019c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f8f1 	bl	80019f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b00      	cmp	r3, #0
 800181c:	d020      	beq.n	8001860 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d01b      	beq.n	8001860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f06f 0204 	mvn.w	r2, #4
 8001830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2202      	movs	r2, #2
 8001836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f8c8 	bl	80019dc <HAL_TIM_IC_CaptureCallback>
 800184c:	e005      	b.n	800185a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f8ba 	bl	80019c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f8cb 	bl	80019f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d020      	beq.n	80018ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d01b      	beq.n	80018ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f06f 0208 	mvn.w	r2, #8
 800187c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2204      	movs	r2, #4
 8001882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f8a2 	bl	80019dc <HAL_TIM_IC_CaptureCallback>
 8001898:	e005      	b.n	80018a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f894 	bl	80019c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f8a5 	bl	80019f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d020      	beq.n	80018f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d01b      	beq.n	80018f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f06f 0210 	mvn.w	r2, #16
 80018c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2208      	movs	r2, #8
 80018ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f87c 	bl	80019dc <HAL_TIM_IC_CaptureCallback>
 80018e4:	e005      	b.n	80018f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f86e 	bl	80019c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f87f 	bl	80019f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00c      	beq.n	800191c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d007      	beq.n	800191c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f06f 0201 	mvn.w	r2, #1
 8001914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f84c 	bl	80019b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00c      	beq.n	8001940 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800192c:	2b00      	cmp	r3, #0
 800192e:	d007      	beq.n	8001940 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f876 	bl	8001a2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00c      	beq.n	8001964 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001950:	2b00      	cmp	r3, #0
 8001952:	d007      	beq.n	8001964 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800195c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f86e 	bl	8001a40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00c      	beq.n	8001988 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001974:	2b00      	cmp	r3, #0
 8001976:	d007      	beq.n	8001988 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f83e 	bl	8001a04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f003 0320 	and.w	r3, r3, #32
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00c      	beq.n	80019ac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f003 0320 	and.w	r3, r3, #32
 8001998:	2b00      	cmp	r3, #0
 800199a:	d007      	beq.n	80019ac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f06f 0220 	mvn.w	r2, #32
 80019a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f836 	bl	8001a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <MX_GPIO_Init>:
    1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
};
uint32_t dstBuffer[BUFFER_SIZE];
DMA_HandleTypeDef hdma_memtomem;
static void MX_GPIO_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <MX_GPIO_Init+0x50>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5e:	4a11      	ldr	r2, [pc, #68]	@ (8001aa4 <MX_GPIO_Init+0x50>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a66:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <MX_GPIO_Init+0x50>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
    /* LD2 on NUCLEO-L476RG is PA5 */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a80:	2320      	movs	r3, #32
 8001a82:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	4619      	mov	r1, r3
 8001a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a98:	f7fe fef0 	bl	800087c <HAL_GPIO_Init>
}
 8001a9c:	bf00      	nop
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40021000 	.word	0x40021000

08001aa8 <MX_DMA_Init>:
void MX_DMA_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001aae:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <MX_DMA_Init+0x6c>)
 8001ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ab2:	4a18      	ldr	r2, [pc, #96]	@ (8001b14 <MX_DMA_Init+0x6c>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001aba:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <MX_DMA_Init+0x6c>)
 8001abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]

    hdma_memtomem.Instance                 = DMA1_Channel1;
 8001ac6:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <MX_DMA_Init+0x70>)
 8001ac8:	4a14      	ldr	r2, [pc, #80]	@ (8001b1c <MX_DMA_Init+0x74>)
 8001aca:	601a      	str	r2, [r3, #0]
    hdma_memtomem.Init.Request             = DMA_REQUEST_MEM2MEM;
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <MX_DMA_Init+0x70>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	605a      	str	r2, [r3, #4]
    hdma_memtomem.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <MX_DMA_Init+0x70>)
 8001ad4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ad8:	609a      	str	r2, [r3, #8]
    hdma_memtomem.Init.PeriphInc           = DMA_PINC_ENABLE;   // source increments
 8001ada:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <MX_DMA_Init+0x70>)
 8001adc:	2240      	movs	r2, #64	@ 0x40
 8001ade:	60da      	str	r2, [r3, #12]
    hdma_memtomem.Init.MemInc              = DMA_MINC_ENABLE;   // destination increments
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <MX_DMA_Init+0x70>)
 8001ae2:	2280      	movs	r2, #128	@ 0x80
 8001ae4:	611a      	str	r2, [r3, #16]
    hdma_memtomem.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;  // word (32-bit)
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <MX_DMA_Init+0x70>)
 8001ae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aec:	615a      	str	r2, [r3, #20]
    hdma_memtomem.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001aee:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <MX_DMA_Init+0x70>)
 8001af0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001af4:	619a      	str	r2, [r3, #24]
    hdma_memtomem.Init.Mode                = DMA_NORMAL;
 8001af6:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <MX_DMA_Init+0x70>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	61da      	str	r2, [r3, #28]
    hdma_memtomem.Init.Priority            = DMA_PRIORITY_HIGH;
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <MX_DMA_Init+0x70>)
 8001afe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b02:	621a      	str	r2, [r3, #32]

    HAL_DMA_Init(&hdma_memtomem);
 8001b04:	4804      	ldr	r0, [pc, #16]	@ (8001b18 <MX_DMA_Init+0x70>)
 8001b06:	f7fe fce7 	bl	80004d8 <HAL_DMA_Init>

}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000
 8001b18:	2000012c 	.word	0x2000012c
 8001b1c:	40020008 	.word	0x40020008

08001b20 <SystemClock_Config>:
static void SystemClock_Config(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b096      	sub	sp, #88	@ 0x58
 8001b24:	af00      	add	r7, sp, #0
    /* Minimal HSI-based config @80MHz typical for L476.
       Replace with your CubeMX-generated function if you have one. */
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	2244      	movs	r2, #68	@ 0x44
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f8b3 	bl	8001c9a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b34:	463b      	mov	r3, r7
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b42:	2302      	movs	r3, #2
 8001b44:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b4a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b4c:	2310      	movs	r3, #16
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b50:	2302      	movs	r3, #2
 8001b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b54:	2302      	movs	r3, #2
 8001b56:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 10;   // 16MHz * 10 / 2 = 80MHz
 8001b5c:	230a      	movs	r3, #10
 8001b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b60:	2302      	movs	r3, #2
 8001b62:	657b      	str	r3, [r7, #84]	@ 0x54
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b64:	2307      	movs	r3, #7
 8001b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff f855 	bl	8000c20 <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 8001b76:	230f      	movs	r3, #15
 8001b78:	603b      	str	r3, [r7, #0]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fc22 	bl	80013d8 <HAL_RCC_ClockConfig>
}
 8001b94:	bf00      	nop
 8001b96:	3758      	adds	r7, #88	@ 0x58
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <main>:
int main()
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
	HAL_Init();
 8001ba2:	f7fe fb13 	bl	80001cc <HAL_Init>
	SystemClock_Config();
 8001ba6:	f7ff ffbb 	bl	8001b20 <SystemClock_Config>
	MX_DMA_Init();
 8001baa:	f7ff ff7d 	bl	8001aa8 <MX_DMA_Init>
	MX_GPIO_Init();
 8001bae:	f7ff ff51 	bl	8001a54 <MX_GPIO_Init>
	HAL_DMA_Start(&hdma_memtomem,
 8001bb2:	491a      	ldr	r1, [pc, #104]	@ (8001c1c <main+0x80>)
 8001bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c20 <main+0x84>)
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	481a      	ldr	r0, [pc, #104]	@ (8001c24 <main+0x88>)
 8001bba:	f7fe fd45 	bl	8000648 <HAL_DMA_Start>
	                      (uint32_t)srcBuffer,
	                      (uint32_t)dstBuffer,
	                      BUFFER_SIZE);
	HAL_DMA_PollForTransfer(&hdma_memtomem,
 8001bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4817      	ldr	r0, [pc, #92]	@ (8001c24 <main+0x88>)
 8001bc6:	f7fe fd82 	bl	80006ce <HAL_DMA_PollForTransfer>
	                                HAL_DMA_FULL_TRANSFER,
	                                HAL_MAX_DELAY);
	for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	e016      	b.n	8001bfe <main+0x62>
	        if (dstBuffer[i] != srcBuffer[i]) {
 8001bd0:	4a13      	ldr	r2, [pc, #76]	@ (8001c20 <main+0x84>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bd8:	4910      	ldr	r1, [pc, #64]	@ (8001c1c <main+0x80>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d009      	beq.n	8001bf8 <main+0x5c>
	            /* Indicate error: fast blink */
	            while (1) {
	                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001be4:	2120      	movs	r1, #32
 8001be6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bea:	f7fe fff1 	bl	8000bd0 <HAL_GPIO_TogglePin>
	                HAL_Delay(100);
 8001bee:	2064      	movs	r0, #100	@ 0x64
 8001bf0:	f7fe fb68 	bl	80002c4 <HAL_Delay>
	                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001bf4:	bf00      	nop
 8001bf6:	e7f5      	b.n	8001be4 <main+0x48>
	for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b1f      	cmp	r3, #31
 8001c02:	d9e5      	bls.n	8001bd0 <main+0x34>
	        }
	    }

	    /* Success: slow blink LD2 (PA5) forever */
	    while (1) {
	        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001c04:	2120      	movs	r1, #32
 8001c06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c0a:	f7fe ffe1 	bl	8000bd0 <HAL_GPIO_TogglePin>
	        HAL_Delay(500);
 8001c0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c12:	f7fe fb57 	bl	80002c4 <HAL_Delay>
	        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001c16:	bf00      	nop
 8001c18:	e7f4      	b.n	8001c04 <main+0x68>
 8001c1a:	bf00      	nop
 8001c1c:	20000008 	.word	0x20000008
 8001c20:	200000ac 	.word	0x200000ac
 8001c24:	2000012c 	.word	0x2000012c

08001c28 <SysTick_Handler>:
	    }
}


void SysTick_Handler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001c2c:	f7fe fb2a 	bl	8000284 <HAL_IncTick>
}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <TIM3_IRQHandler>:
	HAL_NVIC_EnableIRQ(TIMx_IRQn);

	HAL_TIM_Base_Start_IT(&TimHandle);
}

void TIMx_IRQHandler(void){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 8001c38:	4802      	ldr	r0, [pc, #8]	@ (8001c44 <TIM3_IRQHandler+0x10>)
 8001c3a:	f7ff fdb9 	bl	80017b0 <HAL_TIM_IRQHandler>
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000174 	.word	0x20000174

08001c48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c48:	480d      	ldr	r0, [pc, #52]	@ (8001c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c4c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c50:	480c      	ldr	r0, [pc, #48]	@ (8001c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c52:	490d      	ldr	r1, [pc, #52]	@ (8001c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c54:	4a0d      	ldr	r2, [pc, #52]	@ (8001c8c <LoopForever+0xe>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c58:	e002      	b.n	8001c60 <LoopCopyDataInit>

08001c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5e:	3304      	adds	r3, #4

08001c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c64:	d3f9      	bcc.n	8001c5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c68:	4c0a      	ldr	r4, [pc, #40]	@ (8001c94 <LoopForever+0x16>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c6c:	e001      	b.n	8001c72 <LoopFillZerobss>

08001c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c70:	3204      	adds	r2, #4

08001c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c74:	d3fb      	bcc.n	8001c6e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001c76:	f000 f819 	bl	8001cac <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8001c7a:	f7ff ff8f 	bl	8001b9c <main>

08001c7e <LoopForever>:

LoopForever:
  b LoopForever
 8001c7e:	e7fe      	b.n	8001c7e <LoopForever>
  ldr   r0, =_estack
 8001c80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c88:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001c8c:	08001d54 	.word	0x08001d54
  ldr r2, =_sbss
 8001c90:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001c94:	200001c0 	.word	0x200001c0

08001c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c98:	e7fe      	b.n	8001c98 <ADC1_2_IRQHandler>

08001c9a <memset>:
 8001c9a:	4402      	add	r2, r0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d100      	bne.n	8001ca4 <memset+0xa>
 8001ca2:	4770      	bx	lr
 8001ca4:	f803 1b01 	strb.w	r1, [r3], #1
 8001ca8:	e7f9      	b.n	8001c9e <memset+0x4>
	...

08001cac <__libc_init_array>:
 8001cac:	b570      	push	{r4, r5, r6, lr}
 8001cae:	4d0d      	ldr	r5, [pc, #52]	@ (8001ce4 <__libc_init_array+0x38>)
 8001cb0:	4c0d      	ldr	r4, [pc, #52]	@ (8001ce8 <__libc_init_array+0x3c>)
 8001cb2:	1b64      	subs	r4, r4, r5
 8001cb4:	10a4      	asrs	r4, r4, #2
 8001cb6:	2600      	movs	r6, #0
 8001cb8:	42a6      	cmp	r6, r4
 8001cba:	d109      	bne.n	8001cd0 <__libc_init_array+0x24>
 8001cbc:	4d0b      	ldr	r5, [pc, #44]	@ (8001cec <__libc_init_array+0x40>)
 8001cbe:	4c0c      	ldr	r4, [pc, #48]	@ (8001cf0 <__libc_init_array+0x44>)
 8001cc0:	f000 f818 	bl	8001cf4 <_init>
 8001cc4:	1b64      	subs	r4, r4, r5
 8001cc6:	10a4      	asrs	r4, r4, #2
 8001cc8:	2600      	movs	r6, #0
 8001cca:	42a6      	cmp	r6, r4
 8001ccc:	d105      	bne.n	8001cda <__libc_init_array+0x2e>
 8001cce:	bd70      	pop	{r4, r5, r6, pc}
 8001cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cd4:	4798      	blx	r3
 8001cd6:	3601      	adds	r6, #1
 8001cd8:	e7ee      	b.n	8001cb8 <__libc_init_array+0xc>
 8001cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cde:	4798      	blx	r3
 8001ce0:	3601      	adds	r6, #1
 8001ce2:	e7f2      	b.n	8001cca <__libc_init_array+0x1e>
 8001ce4:	08001d4c 	.word	0x08001d4c
 8001ce8:	08001d4c 	.word	0x08001d4c
 8001cec:	08001d4c 	.word	0x08001d4c
 8001cf0:	08001d50 	.word	0x08001d50

08001cf4 <_init>:
 8001cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf6:	bf00      	nop
 8001cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cfa:	bc08      	pop	{r3}
 8001cfc:	469e      	mov	lr, r3
 8001cfe:	4770      	bx	lr

08001d00 <_fini>:
 8001d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d02:	bf00      	nop
 8001d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d06:	bc08      	pop	{r3}
 8001d08:	469e      	mov	lr, r3
 8001d0a:	4770      	bx	lr
